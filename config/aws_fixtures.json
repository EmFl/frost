{
    "acm_certificate_chain": {
        "fetch": {
            "all_args": [
                "CertificateArn"
            ],
            "docstring": "acm.get_certificate(['CertificateArn'])",
            "method_name": "get_certificate",
            "required_args": [
                "CertificateArn"
            ],
            "service_name": "acm"
        },
        "output_shape": "<StringShape(CertificateChain)>",
        "result_key": "CertificateChain"
    },
    "acm_certificate_from_describe_certificate": {
        "fetch": {
            "all_args": [
                "CertificateArn"
            ],
            "docstring": "acm.describe_certificate(['CertificateArn'])",
            "method_name": "describe_certificate",
            "required_args": [
                "CertificateArn"
            ],
            "service_name": "acm"
        },
        "output_shape": "<StructureShape(CertificateDetail)>",
        "result_key": "Certificate"
    },
    "acm_certificate_from_get_certificate": {
        "fetch": {
            "all_args": [
                "CertificateArn"
            ],
            "docstring": "acm.get_certificate(['CertificateArn'])",
            "method_name": "get_certificate",
            "required_args": [
                "CertificateArn"
            ],
            "service_name": "acm"
        },
        "output_shape": "<StringShape(CertificateBody)>",
        "result_key": "Certificate"
    },
    "acm_certificate_summary": {
        "fetch": {
            "all_args": [
                "CertificateStatuses"
            ],
            "docstring": "acm.list_certificates([])",
            "method_name": "list_certificates",
            "required_args": [],
            "service_name": "acm"
        },
        "output_shape": "<StructureShape(CertificateSummary)>",
        "parametrize_id_source": [
            "CertificateArn"
        ],
        "result_key": "CertificateSummaryList"
    },
    "acm_certificate_summary_list": {
        "fetch": {
            "all_args": [
                "CertificateStatuses"
            ],
            "docstring": "acm.list_certificates([])",
            "method_name": "list_certificates",
            "required_args": [],
            "service_name": "acm"
        },
        "output_shape": "<ListShape(CertificateSummaryList)>",
        "result_key": "CertificateSummaryList"
    },
    "acm_tag": {
        "fetch": {
            "all_args": [
                "CertificateArn"
            ],
            "docstring": "acm.list_tags_for_certificate(['CertificateArn'])",
            "method_name": "list_tags_for_certificate",
            "required_args": [
                "CertificateArn"
            ],
            "service_name": "acm"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "acm_tags": {
        "fetch": {
            "all_args": [
                "CertificateArn"
            ],
            "docstring": "acm.list_tags_for_certificate(['CertificateArn'])",
            "method_name": "list_tags_for_certificate",
            "required_args": [
                "CertificateArn"
            ],
            "service_name": "acm"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "apigateway_api_key": {
        "fetch": {
            "all_args": [
                "position",
                "limit",
                "nameQuery",
                "customerId",
                "includeValues"
            ],
            "docstring": "apigateway.get_api_keys([])",
            "method_name": "get_api_keys",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(ApiKey)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "items"
    },
    "apigateway_api_key_required": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(NullableBoolean)>",
        "result_key": "apiKeyRequired"
    },
    "apigateway_api_key_version": {
        "fetch": {
            "all_args": [],
            "docstring": "apigateway.get_account([])",
            "method_name": "get_account",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "apiKeyVersion"
    },
    "apigateway_api_stage": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(ApiStage)>",
        "parametrize_id_source": [
            "apiId"
        ],
        "result_key": "apiStages"
    },
    "apigateway_api_stages": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfApiStage)>",
        "result_key": "apiStages"
    },
    "apigateway_api_summary": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId",
                "embed"
            ],
            "docstring": "apigateway.get_deployment(['restApiId', 'deploymentId'])",
            "method_name": "get_deployment",
            "required_args": [
                "restApiId",
                "deploymentId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(PathToMapOfMethodSnapshot)>",
        "result_key": "apiSummary"
    },
    "apigateway_auth_type": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "authType"
    },
    "apigateway_authorization_type": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "authorizationType"
    },
    "apigateway_authorizer": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_authorizers(['restApiId'])",
            "method_name": "get_authorizers",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Authorizer)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_authorizer_credentials": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "authorizerCredentials"
    },
    "apigateway_authorizer_id": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "authorizerId"
    },
    "apigateway_authorizer_result_ttl_in_seconds": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(NullableInteger)>",
        "result_key": "authorizerResultTtlInSeconds"
    },
    "apigateway_authorizer_uri": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "authorizerUri"
    },
    "apigateway_base_path": {
        "fetch": {
            "all_args": [
                "domainName",
                "basePath"
            ],
            "docstring": "apigateway.get_base_path_mapping(['domainName', 'basePath'])",
            "method_name": "get_base_path_mapping",
            "required_args": [
                "domainName",
                "basePath"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "basePath"
    },
    "apigateway_base_path_mapping": {
        "fetch": {
            "all_args": [
                "domainName",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_base_path_mappings(['domainName'])",
            "method_name": "get_base_path_mappings",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(BasePathMapping)>",
        "parametrize_id_source": [
            "restApiId"
        ],
        "result_key": "items"
    },
    "apigateway_binary_media_types": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "binaryMediaTypes"
    },
    "apigateway_body_from_get_export": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "exportType",
                "parameters",
                "accepts"
            ],
            "docstring": "apigateway.get_export(['restApiId', 'stageName', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "restApiId",
                "stageName",
                "exportType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Blob)>",
        "result_key": "body"
    },
    "apigateway_body_from_get_sdk": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "sdkType",
                "parameters"
            ],
            "docstring": "apigateway.get_sdk(['restApiId', 'stageName', 'sdkType'])",
            "method_name": "get_sdk",
            "required_args": [
                "restApiId",
                "stageName",
                "sdkType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Blob)>",
        "result_key": "body"
    },
    "apigateway_cache_cluster_enabled": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "cacheClusterEnabled"
    },
    "apigateway_cache_cluster_size": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(CacheClusterSize)>",
        "result_key": "cacheClusterSize"
    },
    "apigateway_cache_cluster_status": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(CacheClusterStatus)>",
        "result_key": "cacheClusterStatus"
    },
    "apigateway_cache_key_parameters": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "cacheKeyParameters"
    },
    "apigateway_cache_namespace": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "cacheNamespace"
    },
    "apigateway_certificate_arn": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "apigateway.get_domain_name(['domainName'])",
            "method_name": "get_domain_name",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "certificateArn"
    },
    "apigateway_certificate_name": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "apigateway.get_domain_name(['domainName'])",
            "method_name": "get_domain_name",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "certificateName"
    },
    "apigateway_certificate_upload_date": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "apigateway.get_domain_name(['domainName'])",
            "method_name": "get_domain_name",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "certificateUploadDate"
    },
    "apigateway_client_certificate": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_client_certificates([])",
            "method_name": "get_client_certificates",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(ClientCertificate)>",
        "parametrize_id_source": [
            "clientCertificateId"
        ],
        "result_key": "items"
    },
    "apigateway_client_certificate_id_from_get_client_certificate": {
        "fetch": {
            "all_args": [
                "clientCertificateId"
            ],
            "docstring": "apigateway.get_client_certificate(['clientCertificateId'])",
            "method_name": "get_client_certificate",
            "required_args": [
                "clientCertificateId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "clientCertificateId"
    },
    "apigateway_client_certificate_id_from_get_stage": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "clientCertificateId"
    },
    "apigateway_cloudwatch_role_arn": {
        "fetch": {
            "all_args": [],
            "docstring": "apigateway.get_account([])",
            "method_name": "get_account",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "cloudwatchRoleArn"
    },
    "apigateway_configuration_properties": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "apigateway.get_sdk_type(['id'])",
            "method_name": "get_sdk_type",
            "required_args": [
                "id"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfSdkConfigurationProperty)>",
        "result_key": "configurationProperties"
    },
    "apigateway_content_disposition_from_get_export": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "exportType",
                "parameters",
                "accepts"
            ],
            "docstring": "apigateway.get_export(['restApiId', 'stageName', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "restApiId",
                "stageName",
                "exportType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "contentDisposition"
    },
    "apigateway_content_disposition_from_get_sdk": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "sdkType",
                "parameters"
            ],
            "docstring": "apigateway.get_sdk(['restApiId', 'stageName', 'sdkType'])",
            "method_name": "get_sdk",
            "required_args": [
                "restApiId",
                "stageName",
                "sdkType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "contentDisposition"
    },
    "apigateway_content_handling_from_get_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(ContentHandlingStrategy)>",
        "result_key": "contentHandling"
    },
    "apigateway_content_handling_from_get_integration_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_integration_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_integration_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(ContentHandlingStrategy)>",
        "result_key": "contentHandling"
    },
    "apigateway_content_type_from_get_export": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "exportType",
                "parameters",
                "accepts"
            ],
            "docstring": "apigateway.get_export(['restApiId', 'stageName', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "restApiId",
                "stageName",
                "exportType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "contentType"
    },
    "apigateway_content_type_from_get_model": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName",
                "flatten"
            ],
            "docstring": "apigateway.get_model(['restApiId', 'modelName'])",
            "method_name": "get_model",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "contentType"
    },
    "apigateway_content_type_from_get_sdk": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName",
                "sdkType",
                "parameters"
            ],
            "docstring": "apigateway.get_sdk(['restApiId', 'stageName', 'sdkType'])",
            "method_name": "get_sdk",
            "required_args": [
                "restApiId",
                "stageName",
                "sdkType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "contentType"
    },
    "apigateway_created_date_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_created_date_from_get_client_certificate": {
        "fetch": {
            "all_args": [
                "clientCertificateId"
            ],
            "docstring": "apigateway.get_client_certificate(['clientCertificateId'])",
            "method_name": "get_client_certificate",
            "required_args": [
                "clientCertificateId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_created_date_from_get_deployment": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId",
                "embed"
            ],
            "docstring": "apigateway.get_deployment(['restApiId', 'deploymentId'])",
            "method_name": "get_deployment",
            "required_args": [
                "restApiId",
                "deploymentId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_created_date_from_get_documentation_version": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationVersion"
            ],
            "docstring": "apigateway.get_documentation_version(['restApiId', 'documentationVersion'])",
            "method_name": "get_documentation_version",
            "required_args": [
                "restApiId",
                "documentationVersion"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_created_date_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_created_date_from_get_stage": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "apigateway_credentials": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "credentials"
    },
    "apigateway_customer_id": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "customerId"
    },
    "apigateway_default_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "responseType"
            ],
            "docstring": "apigateway.get_gateway_response(['restApiId', 'responseType'])",
            "method_name": "get_gateway_response",
            "required_args": [
                "restApiId",
                "responseType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "defaultResponse"
    },
    "apigateway_deployment": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_deployments(['restApiId'])",
            "method_name": "get_deployments",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Deployment)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_deployment_id": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "deploymentId"
    },
    "apigateway_description_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_client_certificate": {
        "fetch": {
            "all_args": [
                "clientCertificateId"
            ],
            "docstring": "apigateway.get_client_certificate(['clientCertificateId'])",
            "method_name": "get_client_certificate",
            "required_args": [
                "clientCertificateId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_deployment": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId",
                "embed"
            ],
            "docstring": "apigateway.get_deployment(['restApiId', 'deploymentId'])",
            "method_name": "get_deployment",
            "required_args": [
                "restApiId",
                "deploymentId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_documentation_version": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationVersion"
            ],
            "docstring": "apigateway.get_documentation_version(['restApiId', 'documentationVersion'])",
            "method_name": "get_documentation_version",
            "required_args": [
                "restApiId",
                "documentationVersion"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_model": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName",
                "flatten"
            ],
            "docstring": "apigateway.get_model(['restApiId', 'modelName'])",
            "method_name": "get_model",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_sdk_type": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "apigateway.get_sdk_type(['id'])",
            "method_name": "get_sdk_type",
            "required_args": [
                "id"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_stage": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_description_from_get_usage_plan": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "description"
    },
    "apigateway_distribution_domain_name": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "apigateway.get_domain_name(['domainName'])",
            "method_name": "get_domain_name",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "distributionDomainName"
    },
    "apigateway_documentation_part": {
        "fetch": {
            "all_args": [
                "restApiId",
                "type",
                "nameQuery",
                "path",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_parts(['restApiId'])",
            "method_name": "get_documentation_parts",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(DocumentationPart)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_documentation_version_from_get_documentation_versions": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_versions(['restApiId'])",
            "method_name": "get_documentation_versions",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(DocumentationVersion)>",
        "parametrize_id_source": null,
        "result_key": "items"
    },
    "apigateway_documentation_version_from_get_stage": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "documentationVersion"
    },
    "apigateway_domain_name_from_get_domain_name": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "apigateway.get_domain_name(['domainName'])",
            "method_name": "get_domain_name",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "domainName"
    },
    "apigateway_domain_name_from_get_domain_names": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_domain_names([])",
            "method_name": "get_domain_names",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(DomainName)>",
        "parametrize_id_source": [
            "certificateArn"
        ],
        "result_key": "items"
    },
    "apigateway_enabled": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "enabled"
    },
    "apigateway_end_date": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId",
                "startDate",
                "endDate",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_usage(['usagePlanId', 'startDate', 'endDate'])",
            "method_name": "get_usage",
            "required_args": [
                "usagePlanId",
                "startDate",
                "endDate"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "endDate"
    },
    "apigateway_expiration_date": {
        "fetch": {
            "all_args": [
                "clientCertificateId"
            ],
            "docstring": "apigateway.get_client_certificate(['clientCertificateId'])",
            "method_name": "get_client_certificate",
            "required_args": [
                "clientCertificateId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "expirationDate"
    },
    "apigateway_features": {
        "fetch": {
            "all_args": [],
            "docstring": "apigateway.get_account([])",
            "method_name": "get_account",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "features"
    },
    "apigateway_friendly_name": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "apigateway.get_sdk_type(['id'])",
            "method_name": "get_sdk_type",
            "required_args": [
                "id"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "friendlyName"
    },
    "apigateway_gateway_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_gateway_responses(['restApiId'])",
            "method_name": "get_gateway_responses",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(GatewayResponse)>",
        "parametrize_id_source": null,
        "result_key": "items"
    },
    "apigateway_http_method_from_get_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "httpMethod"
    },
    "apigateway_http_method_from_get_method": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "httpMethod"
    },
    "apigateway_id_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_authorizer": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_deployment": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId",
                "embed"
            ],
            "docstring": "apigateway.get_deployment(['restApiId', 'deploymentId'])",
            "method_name": "get_deployment",
            "required_args": [
                "restApiId",
                "deploymentId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_documentation_part": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationPartId"
            ],
            "docstring": "apigateway.get_documentation_part(['restApiId', 'documentationPartId'])",
            "method_name": "get_documentation_part",
            "required_args": [
                "restApiId",
                "documentationPartId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_model": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName",
                "flatten"
            ],
            "docstring": "apigateway.get_model(['restApiId', 'modelName'])",
            "method_name": "get_model",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_request_validator": {
        "fetch": {
            "all_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "docstring": "apigateway.get_request_validator(['restApiId', 'requestValidatorId'])",
            "method_name": "get_request_validator",
            "required_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_resource": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "embed"
            ],
            "docstring": "apigateway.get_resource(['restApiId', 'resourceId'])",
            "method_name": "get_resource",
            "required_args": [
                "restApiId",
                "resourceId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_sdk_type": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "apigateway.get_sdk_type(['id'])",
            "method_name": "get_sdk_type",
            "required_args": [
                "id"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_usage_plan": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_id_from_get_usage_plan_key": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId"
            ],
            "docstring": "apigateway.get_usage_plan_key(['usagePlanId', 'keyId'])",
            "method_name": "get_usage_plan_key",
            "required_args": [
                "usagePlanId",
                "keyId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "id"
    },
    "apigateway_identity_source": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "identitySource"
    },
    "apigateway_identity_validation_expression": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "identityValidationExpression"
    },
    "apigateway_integration_responses": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfIntegrationResponse)>",
        "result_key": "integrationResponses"
    },
    "apigateway_item": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId"
            ],
            "docstring": "apigateway.get_stages(['restApiId'])",
            "method_name": "get_stages",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfStage)>",
        "result_key": "item"
    },
    "apigateway_items_from_get_api_keys": {
        "fetch": {
            "all_args": [
                "position",
                "limit",
                "nameQuery",
                "customerId",
                "includeValues"
            ],
            "docstring": "apigateway.get_api_keys([])",
            "method_name": "get_api_keys",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfApiKey)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_authorizers": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_authorizers(['restApiId'])",
            "method_name": "get_authorizers",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfAuthorizer)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_base_path_mappings": {
        "fetch": {
            "all_args": [
                "domainName",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_base_path_mappings(['domainName'])",
            "method_name": "get_base_path_mappings",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfBasePathMapping)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_client_certificates": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_client_certificates([])",
            "method_name": "get_client_certificates",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfClientCertificate)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_deployments": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_deployments(['restApiId'])",
            "method_name": "get_deployments",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfDeployment)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_documentation_parts": {
        "fetch": {
            "all_args": [
                "restApiId",
                "type",
                "nameQuery",
                "path",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_parts(['restApiId'])",
            "method_name": "get_documentation_parts",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfDocumentationPart)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_documentation_versions": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_versions(['restApiId'])",
            "method_name": "get_documentation_versions",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfDocumentationVersion)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_domain_names": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_domain_names([])",
            "method_name": "get_domain_names",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfDomainName)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_gateway_responses": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_gateway_responses(['restApiId'])",
            "method_name": "get_gateway_responses",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfGatewayResponse)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_models": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_models(['restApiId'])",
            "method_name": "get_models",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfModel)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_request_validators": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_request_validators(['restApiId'])",
            "method_name": "get_request_validators",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfRequestValidator)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_resources": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit",
                "embed"
            ],
            "docstring": "apigateway.get_resources(['restApiId'])",
            "method_name": "get_resources",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfResource)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_rest_apis": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_rest_apis([])",
            "method_name": "get_rest_apis",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfRestApi)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_sdk_types": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_sdk_types([])",
            "method_name": "get_sdk_types",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfSdkType)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_usage": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId",
                "startDate",
                "endDate",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_usage(['usagePlanId', 'startDate', 'endDate'])",
            "method_name": "get_usage",
            "required_args": [
                "usagePlanId",
                "startDate",
                "endDate"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfKeyUsages)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_usage_plan_keys": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "position",
                "limit",
                "nameQuery"
            ],
            "docstring": "apigateway.get_usage_plan_keys(['usagePlanId'])",
            "method_name": "get_usage_plan_keys",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfUsagePlanKey)>",
        "result_key": "items"
    },
    "apigateway_items_from_get_usage_plans": {
        "fetch": {
            "all_args": [
                "position",
                "keyId",
                "limit"
            ],
            "docstring": "apigateway.get_usage_plans([])",
            "method_name": "get_usage_plans",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfUsagePlan)>",
        "result_key": "items"
    },
    "apigateway_last_updated_date_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "apigateway_last_updated_date_from_get_stage": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "apigateway_location": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationPartId"
            ],
            "docstring": "apigateway.get_documentation_part(['restApiId', 'documentationPartId'])",
            "method_name": "get_documentation_part",
            "required_args": [
                "restApiId",
                "documentationPartId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(DocumentationPartLocation)>",
        "result_key": "location"
    },
    "apigateway_method_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Integration)>",
        "result_key": "methodIntegration"
    },
    "apigateway_method_responses": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfMethodResponse)>",
        "result_key": "methodResponses"
    },
    "apigateway_method_settings": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfMethodSettings)>",
        "result_key": "methodSettings"
    },
    "apigateway_model": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_models(['restApiId'])",
            "method_name": "get_models",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Model)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_name_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_authorizer": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_model": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName",
                "flatten"
            ],
            "docstring": "apigateway.get_model(['restApiId', 'modelName'])",
            "method_name": "get_model",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_request_validator": {
        "fetch": {
            "all_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "docstring": "apigateway.get_request_validator(['restApiId', 'requestValidatorId'])",
            "method_name": "get_request_validator",
            "required_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_usage_plan": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_name_from_get_usage_plan_key": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId"
            ],
            "docstring": "apigateway.get_usage_plan_key(['usagePlanId', 'keyId'])",
            "method_name": "get_usage_plan_key",
            "required_args": [
                "usagePlanId",
                "keyId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "name"
    },
    "apigateway_operation_name": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "operationName"
    },
    "apigateway_parent_id": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "embed"
            ],
            "docstring": "apigateway.get_resource(['restApiId', 'resourceId'])",
            "method_name": "get_resource",
            "required_args": [
                "restApiId",
                "resourceId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "parentId"
    },
    "apigateway_passthrough_behavior": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "passthroughBehavior"
    },
    "apigateway_path": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "embed"
            ],
            "docstring": "apigateway.get_resource(['restApiId', 'resourceId'])",
            "method_name": "get_resource",
            "required_args": [
                "restApiId",
                "resourceId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "path"
    },
    "apigateway_path_part": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "embed"
            ],
            "docstring": "apigateway.get_resource(['restApiId', 'resourceId'])",
            "method_name": "get_resource",
            "required_args": [
                "restApiId",
                "resourceId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "pathPart"
    },
    "apigateway_pem_encoded_certificate": {
        "fetch": {
            "all_args": [
                "clientCertificateId"
            ],
            "docstring": "apigateway.get_client_certificate(['clientCertificateId'])",
            "method_name": "get_client_certificate",
            "required_args": [
                "clientCertificateId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "pemEncodedCertificate"
    },
    "apigateway_position_from_get_api_keys": {
        "fetch": {
            "all_args": [
                "position",
                "limit",
                "nameQuery",
                "customerId",
                "includeValues"
            ],
            "docstring": "apigateway.get_api_keys([])",
            "method_name": "get_api_keys",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_authorizers": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_authorizers(['restApiId'])",
            "method_name": "get_authorizers",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_base_path_mappings": {
        "fetch": {
            "all_args": [
                "domainName",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_base_path_mappings(['domainName'])",
            "method_name": "get_base_path_mappings",
            "required_args": [
                "domainName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_client_certificates": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_client_certificates([])",
            "method_name": "get_client_certificates",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_deployments": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_deployments(['restApiId'])",
            "method_name": "get_deployments",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_documentation_parts": {
        "fetch": {
            "all_args": [
                "restApiId",
                "type",
                "nameQuery",
                "path",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_parts(['restApiId'])",
            "method_name": "get_documentation_parts",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_documentation_versions": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_documentation_versions(['restApiId'])",
            "method_name": "get_documentation_versions",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_domain_names": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_domain_names([])",
            "method_name": "get_domain_names",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_gateway_responses": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_gateway_responses(['restApiId'])",
            "method_name": "get_gateway_responses",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_models": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_models(['restApiId'])",
            "method_name": "get_models",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_request_validators": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_request_validators(['restApiId'])",
            "method_name": "get_request_validators",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_resources": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit",
                "embed"
            ],
            "docstring": "apigateway.get_resources(['restApiId'])",
            "method_name": "get_resources",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_rest_apis": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_rest_apis([])",
            "method_name": "get_rest_apis",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_sdk_types": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_sdk_types([])",
            "method_name": "get_sdk_types",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_usage": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId",
                "startDate",
                "endDate",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_usage(['usagePlanId', 'startDate', 'endDate'])",
            "method_name": "get_usage",
            "required_args": [
                "usagePlanId",
                "startDate",
                "endDate"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_usage_plan_keys": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "position",
                "limit",
                "nameQuery"
            ],
            "docstring": "apigateway.get_usage_plan_keys(['usagePlanId'])",
            "method_name": "get_usage_plan_keys",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_position_from_get_usage_plans": {
        "fetch": {
            "all_args": [
                "position",
                "keyId",
                "limit"
            ],
            "docstring": "apigateway.get_usage_plans([])",
            "method_name": "get_usage_plans",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "position"
    },
    "apigateway_product_code": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "productCode"
    },
    "apigateway_properties": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationPartId"
            ],
            "docstring": "apigateway.get_documentation_part(['restApiId', 'documentationPartId'])",
            "method_name": "get_documentation_part",
            "required_args": [
                "restApiId",
                "documentationPartId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "properties"
    },
    "apigateway_provider_arn": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(ProviderARN)>",
        "parametrize_id_source": [
            "ProviderARN"
        ],
        "result_key": "providerARNs"
    },
    "apigateway_provider_arns": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfARNs)>",
        "result_key": "providerARNs"
    },
    "apigateway_quota": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(QuotaSettings)>",
        "result_key": "quota"
    },
    "apigateway_request_models": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "requestModels"
    },
    "apigateway_request_parameters_from_get_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "requestParameters"
    },
    "apigateway_request_parameters_from_get_method": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToBoolean)>",
        "result_key": "requestParameters"
    },
    "apigateway_request_templates": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "requestTemplates"
    },
    "apigateway_request_validator": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_request_validators(['restApiId'])",
            "method_name": "get_request_validators",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(RequestValidator)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_request_validator_id": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_method(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_method",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "requestValidatorId"
    },
    "apigateway_resource": {
        "fetch": {
            "all_args": [
                "restApiId",
                "position",
                "limit",
                "embed"
            ],
            "docstring": "apigateway.get_resources(['restApiId'])",
            "method_name": "get_resources",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Resource)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_resource_methods": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "embed"
            ],
            "docstring": "apigateway.get_resource(['restApiId', 'resourceId'])",
            "method_name": "get_resource",
            "required_args": [
                "restApiId",
                "resourceId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfMethod)>",
        "result_key": "resourceMethods"
    },
    "apigateway_response_models": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_method_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_method_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "responseModels"
    },
    "apigateway_response_parameters_from_get_gateway_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "responseType"
            ],
            "docstring": "apigateway.get_gateway_response(['restApiId', 'responseType'])",
            "method_name": "get_gateway_response",
            "required_args": [
                "restApiId",
                "responseType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "responseParameters"
    },
    "apigateway_response_parameters_from_get_integration_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_integration_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_integration_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "responseParameters"
    },
    "apigateway_response_parameters_from_get_method_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_method_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_method_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToBoolean)>",
        "result_key": "responseParameters"
    },
    "apigateway_response_templates_from_get_gateway_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "responseType"
            ],
            "docstring": "apigateway.get_gateway_response(['restApiId', 'responseType'])",
            "method_name": "get_gateway_response",
            "required_args": [
                "restApiId",
                "responseType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "responseTemplates"
    },
    "apigateway_response_templates_from_get_integration_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_integration_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_integration_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "responseTemplates"
    },
    "apigateway_response_type": {
        "fetch": {
            "all_args": [
                "restApiId",
                "responseType"
            ],
            "docstring": "apigateway.get_gateway_response(['restApiId', 'responseType'])",
            "method_name": "get_gateway_response",
            "required_args": [
                "restApiId",
                "responseType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(GatewayResponseType)>",
        "result_key": "responseType"
    },
    "apigateway_rest_api": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_rest_apis([])",
            "method_name": "get_rest_apis",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(RestApi)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_rest_api_id": {
        "fetch": {
            "all_args": [
                "domainName",
                "basePath"
            ],
            "docstring": "apigateway.get_base_path_mapping(['domainName', 'basePath'])",
            "method_name": "get_base_path_mapping",
            "required_args": [
                "domainName",
                "basePath"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "restApiId"
    },
    "apigateway_schema": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName",
                "flatten"
            ],
            "docstring": "apigateway.get_model(['restApiId', 'modelName'])",
            "method_name": "get_model",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "schema"
    },
    "apigateway_sdk_configuration_property": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "apigateway.get_sdk_type(['id'])",
            "method_name": "get_sdk_type",
            "required_args": [
                "id"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(SdkConfigurationProperty)>",
        "parametrize_id_source": null,
        "result_key": "configurationProperties"
    },
    "apigateway_sdk_type": {
        "fetch": {
            "all_args": [
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_sdk_types([])",
            "method_name": "get_sdk_types",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(SdkType)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_selection_pattern": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_integration_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_integration_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "selectionPattern"
    },
    "apigateway_stage_from_get_base_path_mapping": {
        "fetch": {
            "all_args": [
                "domainName",
                "basePath"
            ],
            "docstring": "apigateway.get_base_path_mapping(['domainName', 'basePath'])",
            "method_name": "get_base_path_mapping",
            "required_args": [
                "domainName",
                "basePath"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "stage"
    },
    "apigateway_stage_from_get_stages": {
        "fetch": {
            "all_args": [
                "restApiId",
                "deploymentId"
            ],
            "docstring": "apigateway.get_stages(['restApiId'])",
            "method_name": "get_stages",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(Stage)>",
        "parametrize_id_source": [
            "deploymentId"
        ],
        "result_key": "item"
    },
    "apigateway_stage_keys": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "stageKeys"
    },
    "apigateway_stage_name": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "stageName"
    },
    "apigateway_start_date": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId",
                "startDate",
                "endDate",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_usage(['usagePlanId', 'startDate', 'endDate'])",
            "method_name": "get_usage",
            "required_args": [
                "usagePlanId",
                "startDate",
                "endDate"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "startDate"
    },
    "apigateway_status_code_from_get_gateway_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "responseType"
            ],
            "docstring": "apigateway.get_gateway_response(['restApiId', 'responseType'])",
            "method_name": "get_gateway_response",
            "required_args": [
                "restApiId",
                "responseType"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(StatusCode)>",
        "result_key": "statusCode"
    },
    "apigateway_status_code_from_get_integration_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_integration_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_integration_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(StatusCode)>",
        "result_key": "statusCode"
    },
    "apigateway_status_code_from_get_method_response": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "docstring": "apigateway.get_method_response(['restApiId', 'resourceId', 'httpMethod', 'statusCode'])",
            "method_name": "get_method_response",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod",
                "statusCode"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(StatusCode)>",
        "result_key": "statusCode"
    },
    "apigateway_string_from_get_account": {
        "fetch": {
            "all_args": [],
            "docstring": "apigateway.get_account([])",
            "method_name": "get_account",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "features"
    },
    "apigateway_string_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "stageKeys"
    },
    "apigateway_string_from_get_api_keys": {
        "fetch": {
            "all_args": [
                "position",
                "limit",
                "nameQuery",
                "customerId",
                "includeValues"
            ],
            "docstring": "apigateway.get_api_keys([])",
            "method_name": "get_api_keys",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "warnings"
    },
    "apigateway_string_from_get_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "cacheKeyParameters"
    },
    "apigateway_string_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "binaryMediaTypes"
    },
    "apigateway_throttle": {
        "fetch": {
            "all_args": [
                "usagePlanId"
            ],
            "docstring": "apigateway.get_usage_plan(['usagePlanId'])",
            "method_name": "get_usage_plan",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(ThrottleSettings)>",
        "result_key": "throttle"
    },
    "apigateway_throttle_settings": {
        "fetch": {
            "all_args": [],
            "docstring": "apigateway.get_account([])",
            "method_name": "get_account",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(ThrottleSettings)>",
        "result_key": "throttleSettings"
    },
    "apigateway_type_from_get_authorizer": {
        "fetch": {
            "all_args": [
                "restApiId",
                "authorizerId"
            ],
            "docstring": "apigateway.get_authorizer(['restApiId', 'authorizerId'])",
            "method_name": "get_authorizer",
            "required_args": [
                "restApiId",
                "authorizerId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(AuthorizerType)>",
        "result_key": "type"
    },
    "apigateway_type_from_get_integration": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(IntegrationType)>",
        "result_key": "type"
    },
    "apigateway_type_from_get_usage_plan_key": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId"
            ],
            "docstring": "apigateway.get_usage_plan_key(['usagePlanId', 'keyId'])",
            "method_name": "get_usage_plan_key",
            "required_args": [
                "usagePlanId",
                "keyId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "type"
    },
    "apigateway_uri": {
        "fetch": {
            "all_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "docstring": "apigateway.get_integration(['restApiId', 'resourceId', 'httpMethod'])",
            "method_name": "get_integration",
            "required_args": [
                "restApiId",
                "resourceId",
                "httpMethod"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "uri"
    },
    "apigateway_usage_plan": {
        "fetch": {
            "all_args": [
                "position",
                "keyId",
                "limit"
            ],
            "docstring": "apigateway.get_usage_plans([])",
            "method_name": "get_usage_plans",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(UsagePlan)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "items"
    },
    "apigateway_usage_plan_id": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId",
                "startDate",
                "endDate",
                "position",
                "limit"
            ],
            "docstring": "apigateway.get_usage(['usagePlanId', 'startDate', 'endDate'])",
            "method_name": "get_usage",
            "required_args": [
                "usagePlanId",
                "startDate",
                "endDate"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "usagePlanId"
    },
    "apigateway_usage_plan_key": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "position",
                "limit",
                "nameQuery"
            ],
            "docstring": "apigateway.get_usage_plan_keys(['usagePlanId'])",
            "method_name": "get_usage_plan_keys",
            "required_args": [
                "usagePlanId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StructureShape(UsagePlanKey)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "items"
    },
    "apigateway_validate_request_body": {
        "fetch": {
            "all_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "docstring": "apigateway.get_request_validator(['restApiId', 'requestValidatorId'])",
            "method_name": "get_request_validator",
            "required_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "validateRequestBody"
    },
    "apigateway_validate_request_parameters": {
        "fetch": {
            "all_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "docstring": "apigateway.get_request_validator(['restApiId', 'requestValidatorId'])",
            "method_name": "get_request_validator",
            "required_args": [
                "restApiId",
                "requestValidatorId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "validateRequestParameters"
    },
    "apigateway_value_from_get_api_key": {
        "fetch": {
            "all_args": [
                "apiKey",
                "includeValue"
            ],
            "docstring": "apigateway.get_api_key(['apiKey'])",
            "method_name": "get_api_key",
            "required_args": [
                "apiKey"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "value"
    },
    "apigateway_value_from_get_model_template": {
        "fetch": {
            "all_args": [
                "restApiId",
                "modelName"
            ],
            "docstring": "apigateway.get_model_template(['restApiId', 'modelName'])",
            "method_name": "get_model_template",
            "required_args": [
                "restApiId",
                "modelName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "value"
    },
    "apigateway_value_from_get_usage_plan_key": {
        "fetch": {
            "all_args": [
                "usagePlanId",
                "keyId"
            ],
            "docstring": "apigateway.get_usage_plan_key(['usagePlanId', 'keyId'])",
            "method_name": "get_usage_plan_key",
            "required_args": [
                "usagePlanId",
                "keyId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "value"
    },
    "apigateway_variables": {
        "fetch": {
            "all_args": [
                "restApiId",
                "stageName"
            ],
            "docstring": "apigateway.get_stage(['restApiId', 'stageName'])",
            "method_name": "get_stage",
            "required_args": [
                "restApiId",
                "stageName"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<MapShape(MapOfStringToString)>",
        "result_key": "variables"
    },
    "apigateway_version_from_get_documentation_version": {
        "fetch": {
            "all_args": [
                "restApiId",
                "documentationVersion"
            ],
            "docstring": "apigateway.get_documentation_version(['restApiId', 'documentationVersion'])",
            "method_name": "get_documentation_version",
            "required_args": [
                "restApiId",
                "documentationVersion"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "version"
    },
    "apigateway_version_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "version"
    },
    "apigateway_warnings_from_get_api_keys": {
        "fetch": {
            "all_args": [
                "position",
                "limit",
                "nameQuery",
                "customerId",
                "includeValues"
            ],
            "docstring": "apigateway.get_api_keys([])",
            "method_name": "get_api_keys",
            "required_args": [],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "warnings"
    },
    "apigateway_warnings_from_get_rest_api": {
        "fetch": {
            "all_args": [
                "restApiId"
            ],
            "docstring": "apigateway.get_rest_api(['restApiId'])",
            "method_name": "get_rest_api",
            "required_args": [
                "restApiId"
            ],
            "service_name": "apigateway"
        },
        "output_shape": "<ListShape(ListOfString)>",
        "result_key": "warnings"
    },
    "application_autoscaling_scalable_target": {
        "fetch": {
            "all_args": [
                "ServiceNamespace",
                "ResourceIds",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scalable_targets(['ServiceNamespace'])",
            "method_name": "describe_scalable_targets",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<StructureShape(ScalableTarget)>",
        "parametrize_id_source": [
            "ServiceNamespace"
        ],
        "result_key": "ScalableTargets"
    },
    "application_autoscaling_scalable_targets": {
        "fetch": {
            "all_args": [
                "ServiceNamespace",
                "ResourceIds",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scalable_targets(['ServiceNamespace'])",
            "method_name": "describe_scalable_targets",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<ListShape(ScalableTargets)>",
        "result_key": "ScalableTargets"
    },
    "application_autoscaling_scaling_activities": {
        "fetch": {
            "all_args": [
                "ServiceNamespace",
                "ResourceId",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scaling_activities(['ServiceNamespace'])",
            "method_name": "describe_scaling_activities",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<ListShape(ScalingActivities)>",
        "result_key": "ScalingActivities"
    },
    "application_autoscaling_scaling_activity": {
        "fetch": {
            "all_args": [
                "ServiceNamespace",
                "ResourceId",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scaling_activities(['ServiceNamespace'])",
            "method_name": "describe_scaling_activities",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<StructureShape(ScalingActivity)>",
        "parametrize_id_source": [
            "ServiceNamespace"
        ],
        "result_key": "ScalingActivities"
    },
    "application_autoscaling_scaling_policies": {
        "fetch": {
            "all_args": [
                "PolicyNames",
                "ServiceNamespace",
                "ResourceId",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scaling_policies(['ServiceNamespace'])",
            "method_name": "describe_scaling_policies",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<ListShape(ScalingPolicies)>",
        "result_key": "ScalingPolicies"
    },
    "application_autoscaling_scaling_policy": {
        "fetch": {
            "all_args": [
                "PolicyNames",
                "ServiceNamespace",
                "ResourceId",
                "ScalableDimension"
            ],
            "docstring": "application-autoscaling.describe_scaling_policies(['ServiceNamespace'])",
            "method_name": "describe_scaling_policies",
            "required_args": [
                "ServiceNamespace"
            ],
            "service_name": "application-autoscaling"
        },
        "output_shape": "<StructureShape(ScalingPolicy)>",
        "parametrize_id_source": [
            "ServiceNamespace"
        ],
        "result_key": "ScalingPolicies"
    },
    "appstream_directory_config": {
        "fetch": {
            "all_args": [
                "DirectoryNames"
            ],
            "docstring": "appstream.describe_directory_configs([])",
            "method_name": "describe_directory_configs",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(DirectoryConfig)>",
        "parametrize_id_source": [
            "DirectoryName"
        ],
        "result_key": "DirectoryConfigs"
    },
    "appstream_directory_configs": {
        "fetch": {
            "all_args": [
                "DirectoryNames"
            ],
            "docstring": "appstream.describe_directory_configs([])",
            "method_name": "describe_directory_configs",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(DirectoryConfigList)>",
        "result_key": "DirectoryConfigs"
    },
    "appstream_fleet": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_fleets([])",
            "method_name": "describe_fleets",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(Fleet)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Fleets"
    },
    "appstream_fleets": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_fleets([])",
            "method_name": "describe_fleets",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(FleetList)>",
        "result_key": "Fleets"
    },
    "appstream_image": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_images([])",
            "method_name": "describe_images",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(Image)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Images"
    },
    "appstream_image_builder": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_image_builders([])",
            "method_name": "describe_image_builders",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(ImageBuilder)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "ImageBuilders"
    },
    "appstream_image_builders": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_image_builders([])",
            "method_name": "describe_image_builders",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(ImageBuilderList)>",
        "result_key": "ImageBuilders"
    },
    "appstream_images": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_images([])",
            "method_name": "describe_images",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(ImageList)>",
        "result_key": "Images"
    },
    "appstream_names_from_list_associated_fleets": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "appstream.list_associated_fleets(['StackName'])",
            "method_name": "list_associated_fleets",
            "required_args": [
                "StackName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "Names"
    },
    "appstream_names_from_list_associated_stacks": {
        "fetch": {
            "all_args": [
                "FleetName"
            ],
            "docstring": "appstream.list_associated_stacks(['FleetName'])",
            "method_name": "list_associated_stacks",
            "required_args": [
                "FleetName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "Names"
    },
    "appstream_session": {
        "fetch": {
            "all_args": [
                "StackName",
                "FleetName",
                "UserId",
                "Limit",
                "AuthenticationType"
            ],
            "docstring": "appstream.describe_sessions(['StackName', 'FleetName'])",
            "method_name": "describe_sessions",
            "required_args": [
                "StackName",
                "FleetName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(Session)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "Sessions"
    },
    "appstream_sessions": {
        "fetch": {
            "all_args": [
                "StackName",
                "FleetName",
                "UserId",
                "Limit",
                "AuthenticationType"
            ],
            "docstring": "appstream.describe_sessions(['StackName', 'FleetName'])",
            "method_name": "describe_sessions",
            "required_args": [
                "StackName",
                "FleetName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(SessionList)>",
        "result_key": "Sessions"
    },
    "appstream_stack": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<StructureShape(Stack)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Stacks"
    },
    "appstream_stacks": {
        "fetch": {
            "all_args": [
                "Names"
            ],
            "docstring": "appstream.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "appstream"
        },
        "output_shape": "<ListShape(StackList)>",
        "result_key": "Stacks"
    },
    "appstream_string_from_list_associated_fleets": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "appstream.list_associated_fleets(['StackName'])",
            "method_name": "list_associated_fleets",
            "required_args": [
                "StackName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "Names"
    },
    "appstream_string_from_list_associated_stacks": {
        "fetch": {
            "all_args": [
                "FleetName"
            ],
            "docstring": "appstream.list_associated_stacks(['FleetName'])",
            "method_name": "list_associated_stacks",
            "required_args": [
                "FleetName"
            ],
            "service_name": "appstream"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "Names"
    },
    "athena_named_query": {
        "fetch": {
            "all_args": [
                "NamedQueryId"
            ],
            "docstring": "athena.get_named_query(['NamedQueryId'])",
            "method_name": "get_named_query",
            "required_args": [
                "NamedQueryId"
            ],
            "service_name": "athena"
        },
        "output_shape": "<StructureShape(NamedQuery)>",
        "result_key": "NamedQuery"
    },
    "athena_named_query_id": {
        "fetch": {
            "all_args": [],
            "docstring": "athena.list_named_queries([])",
            "method_name": "list_named_queries",
            "required_args": [],
            "service_name": "athena"
        },
        "output_shape": "<StringShape(NamedQueryId)>",
        "parametrize_id_source": [
            "NamedQueryId"
        ],
        "result_key": "NamedQueryIds"
    },
    "athena_named_query_ids": {
        "fetch": {
            "all_args": [],
            "docstring": "athena.list_named_queries([])",
            "method_name": "list_named_queries",
            "required_args": [],
            "service_name": "athena"
        },
        "output_shape": "<ListShape(NamedQueryIdList)>",
        "result_key": "NamedQueryIds"
    },
    "athena_query_execution": {
        "fetch": {
            "all_args": [
                "QueryExecutionId"
            ],
            "docstring": "athena.get_query_execution(['QueryExecutionId'])",
            "method_name": "get_query_execution",
            "required_args": [
                "QueryExecutionId"
            ],
            "service_name": "athena"
        },
        "output_shape": "<StructureShape(QueryExecution)>",
        "result_key": "QueryExecution"
    },
    "athena_query_execution_id": {
        "fetch": {
            "all_args": [],
            "docstring": "athena.list_query_executions([])",
            "method_name": "list_query_executions",
            "required_args": [],
            "service_name": "athena"
        },
        "output_shape": "<StringShape(QueryExecutionId)>",
        "parametrize_id_source": [
            "QueryExecutionId"
        ],
        "result_key": "QueryExecutionIds"
    },
    "athena_query_execution_ids": {
        "fetch": {
            "all_args": [],
            "docstring": "athena.list_query_executions([])",
            "method_name": "list_query_executions",
            "required_args": [],
            "service_name": "athena"
        },
        "output_shape": "<ListShape(QueryExecutionIdList)>",
        "result_key": "QueryExecutionIds"
    },
    "athena_result_set": {
        "fetch": {
            "all_args": [
                "QueryExecutionId"
            ],
            "docstring": "athena.get_query_results(['QueryExecutionId'])",
            "method_name": "get_query_results",
            "required_args": [
                "QueryExecutionId"
            ],
            "service_name": "athena"
        },
        "output_shape": "<StructureShape(ResultSet)>",
        "result_key": "ResultSet"
    },
    "autoscaling_activities": {
        "fetch": {
            "all_args": [
                "ActivityIds",
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_scaling_activities([])",
            "method_name": "describe_scaling_activities",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(Activities)>",
        "result_key": "Activities"
    },
    "autoscaling_activity": {
        "fetch": {
            "all_args": [
                "ActivityIds",
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_scaling_activities([])",
            "method_name": "describe_scaling_activities",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(Activity)>",
        "parametrize_id_source": [
            "ActivityId"
        ],
        "result_key": "Activities"
    },
    "autoscaling_adjustment_type": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_adjustment_types([])",
            "method_name": "describe_adjustment_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(AdjustmentType)>",
        "parametrize_id_source": null,
        "result_key": "AdjustmentTypes"
    },
    "autoscaling_adjustment_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_adjustment_types([])",
            "method_name": "describe_adjustment_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(AdjustmentTypes)>",
        "result_key": "AdjustmentTypes"
    },
    "autoscaling_auto_scaling_group": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupNames"
            ],
            "docstring": "autoscaling.describe_auto_scaling_groups([])",
            "method_name": "describe_auto_scaling_groups",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(AutoScalingGroup)>",
        "parametrize_id_source": [
            "AutoScalingGroupName"
        ],
        "result_key": "AutoScalingGroups"
    },
    "autoscaling_auto_scaling_groups": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupNames"
            ],
            "docstring": "autoscaling.describe_auto_scaling_groups([])",
            "method_name": "describe_auto_scaling_groups",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(AutoScalingGroups)>",
        "result_key": "AutoScalingGroups"
    },
    "autoscaling_auto_scaling_instance_details": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "autoscaling.describe_auto_scaling_instances([])",
            "method_name": "describe_auto_scaling_instances",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(AutoScalingInstanceDetails)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "AutoScalingInstances"
    },
    "autoscaling_auto_scaling_instances": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "autoscaling.describe_auto_scaling_instances([])",
            "method_name": "describe_auto_scaling_instances",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(AutoScalingInstances)>",
        "result_key": "AutoScalingInstances"
    },
    "autoscaling_auto_scaling_notification_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_auto_scaling_notification_types([])",
            "method_name": "describe_auto_scaling_notification_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(AutoScalingNotificationTypes)>",
        "result_key": "AutoScalingNotificationTypes"
    },
    "autoscaling_granularities": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_metric_collection_types([])",
            "method_name": "describe_metric_collection_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(MetricGranularityTypes)>",
        "result_key": "Granularities"
    },
    "autoscaling_launch_configuration": {
        "fetch": {
            "all_args": [
                "LaunchConfigurationNames"
            ],
            "docstring": "autoscaling.describe_launch_configurations([])",
            "method_name": "describe_launch_configurations",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(LaunchConfiguration)>",
        "parametrize_id_source": [
            "LaunchConfigurationName"
        ],
        "result_key": "LaunchConfigurations"
    },
    "autoscaling_launch_configurations": {
        "fetch": {
            "all_args": [
                "LaunchConfigurationNames"
            ],
            "docstring": "autoscaling.describe_launch_configurations([])",
            "method_name": "describe_launch_configurations",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(LaunchConfigurations)>",
        "result_key": "LaunchConfigurations"
    },
    "autoscaling_lifecycle_hook": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "LifecycleHookNames"
            ],
            "docstring": "autoscaling.describe_lifecycle_hooks(['AutoScalingGroupName'])",
            "method_name": "describe_lifecycle_hooks",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(LifecycleHook)>",
        "parametrize_id_source": [
            "AutoScalingGroupName"
        ],
        "result_key": "LifecycleHooks"
    },
    "autoscaling_lifecycle_hook_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_lifecycle_hook_types([])",
            "method_name": "describe_lifecycle_hook_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(AutoScalingNotificationTypes)>",
        "result_key": "LifecycleHookTypes"
    },
    "autoscaling_lifecycle_hooks": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "LifecycleHookNames"
            ],
            "docstring": "autoscaling.describe_lifecycle_hooks(['AutoScalingGroupName'])",
            "method_name": "describe_lifecycle_hooks",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(LifecycleHooks)>",
        "result_key": "LifecycleHooks"
    },
    "autoscaling_load_balancer_state": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_load_balancers(['AutoScalingGroupName'])",
            "method_name": "describe_load_balancers",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(LoadBalancerState)>",
        "parametrize_id_source": null,
        "result_key": "LoadBalancers"
    },
    "autoscaling_load_balancer_target_group_state": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_load_balancer_target_groups(['AutoScalingGroupName'])",
            "method_name": "describe_load_balancer_target_groups",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(LoadBalancerTargetGroupState)>",
        "parametrize_id_source": [
            "LoadBalancerTargetGroupARN"
        ],
        "result_key": "LoadBalancerTargetGroups"
    },
    "autoscaling_load_balancer_target_groups": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_load_balancer_target_groups(['AutoScalingGroupName'])",
            "method_name": "describe_load_balancer_target_groups",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(LoadBalancerTargetGroupStates)>",
        "result_key": "LoadBalancerTargetGroups"
    },
    "autoscaling_load_balancers": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName"
            ],
            "docstring": "autoscaling.describe_load_balancers(['AutoScalingGroupName'])",
            "method_name": "describe_load_balancers",
            "required_args": [
                "AutoScalingGroupName"
            ],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(LoadBalancerStates)>",
        "result_key": "LoadBalancers"
    },
    "autoscaling_metric_collection_type": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_metric_collection_types([])",
            "method_name": "describe_metric_collection_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(MetricCollectionType)>",
        "parametrize_id_source": null,
        "result_key": "Metrics"
    },
    "autoscaling_metric_granularity_type": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_metric_collection_types([])",
            "method_name": "describe_metric_collection_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(MetricGranularityType)>",
        "parametrize_id_source": null,
        "result_key": "Granularities"
    },
    "autoscaling_metrics": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_metric_collection_types([])",
            "method_name": "describe_metric_collection_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(MetricCollectionTypes)>",
        "result_key": "Metrics"
    },
    "autoscaling_notification_configuration": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupNames"
            ],
            "docstring": "autoscaling.describe_notification_configurations([])",
            "method_name": "describe_notification_configurations",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(NotificationConfiguration)>",
        "parametrize_id_source": [
            "AutoScalingGroupName"
        ],
        "result_key": "NotificationConfigurations"
    },
    "autoscaling_notification_configurations": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupNames"
            ],
            "docstring": "autoscaling.describe_notification_configurations([])",
            "method_name": "describe_notification_configurations",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(NotificationConfigurations)>",
        "result_key": "NotificationConfigurations"
    },
    "autoscaling_number_of_auto_scaling_groups": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<Shape(NumberOfAutoScalingGroups)>",
        "result_key": "NumberOfAutoScalingGroups"
    },
    "autoscaling_number_of_launch_configurations": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<Shape(NumberOfLaunchConfigurations)>",
        "result_key": "NumberOfLaunchConfigurations"
    },
    "autoscaling_process_type": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_scaling_process_types([])",
            "method_name": "describe_scaling_process_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(ProcessType)>",
        "parametrize_id_source": null,
        "result_key": "Processes"
    },
    "autoscaling_processes": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_scaling_process_types([])",
            "method_name": "describe_scaling_process_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(Processes)>",
        "result_key": "Processes"
    },
    "autoscaling_scaling_policies": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "PolicyNames",
                "PolicyTypes"
            ],
            "docstring": "autoscaling.describe_policies([])",
            "method_name": "describe_policies",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(ScalingPolicies)>",
        "result_key": "ScalingPolicies"
    },
    "autoscaling_scaling_policy": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "PolicyNames",
                "PolicyTypes"
            ],
            "docstring": "autoscaling.describe_policies([])",
            "method_name": "describe_policies",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(ScalingPolicy)>",
        "parametrize_id_source": [
            "AutoScalingGroupName"
        ],
        "result_key": "ScalingPolicies"
    },
    "autoscaling_scheduled_update_group_action": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "ScheduledActionNames",
                "StartTime",
                "EndTime"
            ],
            "docstring": "autoscaling.describe_scheduled_actions([])",
            "method_name": "describe_scheduled_actions",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(ScheduledUpdateGroupAction)>",
        "parametrize_id_source": [
            "AutoScalingGroupName"
        ],
        "result_key": "ScheduledUpdateGroupActions"
    },
    "autoscaling_scheduled_update_group_actions": {
        "fetch": {
            "all_args": [
                "AutoScalingGroupName",
                "ScheduledActionNames",
                "StartTime",
                "EndTime"
            ],
            "docstring": "autoscaling.describe_scheduled_actions([])",
            "method_name": "describe_scheduled_actions",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(ScheduledUpdateGroupActions)>",
        "result_key": "ScheduledUpdateGroupActions"
    },
    "autoscaling_tag_description": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "autoscaling.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StructureShape(TagDescription)>",
        "parametrize_id_source": [
            "ResourceId"
        ],
        "result_key": "Tags"
    },
    "autoscaling_tags": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "autoscaling.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(TagDescriptionList)>",
        "result_key": "Tags"
    },
    "autoscaling_termination_policy_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_termination_policy_types([])",
            "method_name": "describe_termination_policy_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<ListShape(TerminationPolicies)>",
        "result_key": "TerminationPolicyTypes"
    },
    "autoscaling_xml_string_max_len_1600": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_termination_policy_types([])",
            "method_name": "describe_termination_policy_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StringShape(XmlStringMaxLen1600)>",
        "parametrize_id_source": [
            "XmlStringMaxLen1600"
        ],
        "result_key": "TerminationPolicyTypes"
    },
    "autoscaling_xml_string_max_len_255_from_describe_auto_scaling_notification_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_auto_scaling_notification_types([])",
            "method_name": "describe_auto_scaling_notification_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StringShape(XmlStringMaxLen255)>",
        "parametrize_id_source": [
            "XmlStringMaxLen255"
        ],
        "result_key": "AutoScalingNotificationTypes"
    },
    "autoscaling_xml_string_max_len_255_from_describe_lifecycle_hook_types": {
        "fetch": {
            "all_args": [],
            "docstring": "autoscaling.describe_lifecycle_hook_types([])",
            "method_name": "describe_lifecycle_hook_types",
            "required_args": [],
            "service_name": "autoscaling"
        },
        "output_shape": "<StringShape(XmlStringMaxLen255)>",
        "parametrize_id_source": [
            "XmlStringMaxLen255"
        ],
        "result_key": "LifecycleHookTypes"
    },
    "batch_compute_environment_detail": {
        "fetch": {
            "all_args": [
                "computeEnvironments"
            ],
            "docstring": "batch.describe_compute_environments([])",
            "method_name": "describe_compute_environments",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<StructureShape(ComputeEnvironmentDetail)>",
        "parametrize_id_source": [
            "computeEnvironmentArn"
        ],
        "result_key": "computeEnvironments"
    },
    "batch_compute_environments": {
        "fetch": {
            "all_args": [
                "computeEnvironments"
            ],
            "docstring": "batch.describe_compute_environments([])",
            "method_name": "describe_compute_environments",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<ListShape(ComputeEnvironmentDetailList)>",
        "result_key": "computeEnvironments"
    },
    "batch_job_definition": {
        "fetch": {
            "all_args": [
                "jobDefinitions",
                "jobDefinitionName",
                "status"
            ],
            "docstring": "batch.describe_job_definitions([])",
            "method_name": "describe_job_definitions",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<StructureShape(JobDefinition)>",
        "parametrize_id_source": [
            "jobDefinitionName"
        ],
        "result_key": "jobDefinitions"
    },
    "batch_job_definitions": {
        "fetch": {
            "all_args": [
                "jobDefinitions",
                "jobDefinitionName",
                "status"
            ],
            "docstring": "batch.describe_job_definitions([])",
            "method_name": "describe_job_definitions",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<ListShape(JobDefinitionList)>",
        "result_key": "jobDefinitions"
    },
    "batch_job_detail": {
        "fetch": {
            "all_args": [
                "jobs"
            ],
            "docstring": "batch.describe_jobs(['jobs'])",
            "method_name": "describe_jobs",
            "required_args": [
                "jobs"
            ],
            "service_name": "batch"
        },
        "output_shape": "<StructureShape(JobDetail)>",
        "parametrize_id_source": [
            "jobId"
        ],
        "result_key": "jobs"
    },
    "batch_job_queue_detail": {
        "fetch": {
            "all_args": [
                "jobQueues"
            ],
            "docstring": "batch.describe_job_queues([])",
            "method_name": "describe_job_queues",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<StructureShape(JobQueueDetail)>",
        "parametrize_id_source": [
            "jobQueueArn"
        ],
        "result_key": "jobQueues"
    },
    "batch_job_queues": {
        "fetch": {
            "all_args": [
                "jobQueues"
            ],
            "docstring": "batch.describe_job_queues([])",
            "method_name": "describe_job_queues",
            "required_args": [],
            "service_name": "batch"
        },
        "output_shape": "<ListShape(JobQueueDetailList)>",
        "result_key": "jobQueues"
    },
    "batch_job_summary": {
        "fetch": {
            "all_args": [
                "jobQueue",
                "jobStatus"
            ],
            "docstring": "batch.list_jobs(['jobQueue'])",
            "method_name": "list_jobs",
            "required_args": [
                "jobQueue"
            ],
            "service_name": "batch"
        },
        "output_shape": "<StructureShape(JobSummary)>",
        "parametrize_id_source": [
            "jobId"
        ],
        "result_key": "jobSummaryList"
    },
    "batch_job_summary_list": {
        "fetch": {
            "all_args": [
                "jobQueue",
                "jobStatus"
            ],
            "docstring": "batch.list_jobs(['jobQueue'])",
            "method_name": "list_jobs",
            "required_args": [
                "jobQueue"
            ],
            "service_name": "batch"
        },
        "output_shape": "<ListShape(JobSummaryList)>",
        "result_key": "jobSummaryList"
    },
    "batch_jobs": {
        "fetch": {
            "all_args": [
                "jobs"
            ],
            "docstring": "batch.describe_jobs(['jobs'])",
            "method_name": "describe_jobs",
            "required_args": [
                "jobs"
            ],
            "service_name": "batch"
        },
        "output_shape": "<ListShape(JobDetailList)>",
        "result_key": "jobs"
    },
    "budgets_budget_from_describe_budget": {
        "fetch": {
            "all_args": [
                "AccountId",
                "BudgetName"
            ],
            "docstring": "budgets.describe_budget(['AccountId', 'BudgetName'])",
            "method_name": "describe_budget",
            "required_args": [
                "AccountId",
                "BudgetName"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<StructureShape(Budget)>",
        "result_key": "Budget"
    },
    "budgets_budget_from_describe_budgets": {
        "fetch": {
            "all_args": [
                "AccountId"
            ],
            "docstring": "budgets.describe_budgets(['AccountId'])",
            "method_name": "describe_budgets",
            "required_args": [
                "AccountId"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<StructureShape(Budget)>",
        "parametrize_id_source": null,
        "result_key": "Budgets"
    },
    "budgets_budgets": {
        "fetch": {
            "all_args": [
                "AccountId"
            ],
            "docstring": "budgets.describe_budgets(['AccountId'])",
            "method_name": "describe_budgets",
            "required_args": [
                "AccountId"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<ListShape(Budgets)>",
        "result_key": "Budgets"
    },
    "budgets_notification": {
        "fetch": {
            "all_args": [
                "AccountId",
                "BudgetName"
            ],
            "docstring": "budgets.describe_notifications_for_budget(['AccountId', 'BudgetName'])",
            "method_name": "describe_notifications_for_budget",
            "required_args": [
                "AccountId",
                "BudgetName"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<StructureShape(Notification)>",
        "parametrize_id_source": null,
        "result_key": "Notifications"
    },
    "budgets_notifications": {
        "fetch": {
            "all_args": [
                "AccountId",
                "BudgetName"
            ],
            "docstring": "budgets.describe_notifications_for_budget(['AccountId', 'BudgetName'])",
            "method_name": "describe_notifications_for_budget",
            "required_args": [
                "AccountId",
                "BudgetName"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<ListShape(Notifications)>",
        "result_key": "Notifications"
    },
    "budgets_subscriber": {
        "fetch": {
            "all_args": [
                "AccountId",
                "BudgetName",
                "Notification"
            ],
            "docstring": "budgets.describe_subscribers_for_notification(['AccountId', 'BudgetName', 'Notification'])",
            "method_name": "describe_subscribers_for_notification",
            "required_args": [
                "AccountId",
                "BudgetName",
                "Notification"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<StructureShape(Subscriber)>",
        "parametrize_id_source": null,
        "result_key": "Subscribers"
    },
    "budgets_subscribers": {
        "fetch": {
            "all_args": [
                "AccountId",
                "BudgetName",
                "Notification"
            ],
            "docstring": "budgets.describe_subscribers_for_notification(['AccountId', 'BudgetName', 'Notification'])",
            "method_name": "describe_subscribers_for_notification",
            "required_args": [
                "AccountId",
                "BudgetName",
                "Notification"
            ],
            "service_name": "budgets"
        },
        "output_shape": "<ListShape(Subscribers)>",
        "result_key": "Subscribers"
    },
    "clouddirectory_arn_from_list_applied_schema_arns": {
        "fetch": {
            "all_args": [
                "DirectoryArn"
            ],
            "docstring": "clouddirectory.list_applied_schema_arns(['DirectoryArn'])",
            "method_name": "list_applied_schema_arns",
            "required_args": [
                "DirectoryArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "SchemaArns"
    },
    "clouddirectory_arn_from_list_development_schema_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "clouddirectory.list_development_schema_arns([])",
            "method_name": "list_development_schema_arns",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "SchemaArns"
    },
    "clouddirectory_arn_from_list_published_schema_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "clouddirectory.list_published_schema_arns([])",
            "method_name": "list_published_schema_arns",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "SchemaArns"
    },
    "clouddirectory_attached_policy_ids": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_object_policies(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_policies",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(ObjectIdentifierList)>",
        "result_key": "AttachedPolicyIds"
    },
    "clouddirectory_attribute_key_and_value": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel",
                "FacetFilter"
            ],
            "docstring": "clouddirectory.list_object_attributes(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_attributes",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(AttributeKeyAndValue)>",
        "parametrize_id_source": null,
        "result_key": "Attributes"
    },
    "clouddirectory_attribute_name": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.get_typed_link_facet_information(['SchemaArn', 'Name'])",
            "method_name": "get_typed_link_facet_information",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(AttributeName)>",
        "parametrize_id_source": [
            "AttributeName"
        ],
        "result_key": "IdentityAttributeOrder"
    },
    "clouddirectory_attributes_from_list_facet_attributes": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.list_facet_attributes(['SchemaArn', 'Name'])",
            "method_name": "list_facet_attributes",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(FacetAttributeList)>",
        "result_key": "Attributes"
    },
    "clouddirectory_attributes_from_list_object_attributes": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel",
                "FacetFilter"
            ],
            "docstring": "clouddirectory.list_object_attributes(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_attributes",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(AttributeKeyAndValueList)>",
        "result_key": "Attributes"
    },
    "clouddirectory_attributes_from_list_typed_link_facet_attributes": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.list_typed_link_facet_attributes(['SchemaArn', 'Name'])",
            "method_name": "list_typed_link_facet_attributes",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(TypedLinkAttributeDefinitionList)>",
        "result_key": "Attributes"
    },
    "clouddirectory_children": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_object_children(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_children",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<MapShape(LinkNameToObjectIdentifierMap)>",
        "result_key": "Children"
    },
    "clouddirectory_directories": {
        "fetch": {
            "all_args": [
                "state"
            ],
            "docstring": "clouddirectory.list_directories([])",
            "method_name": "list_directories",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(DirectoryList)>",
        "result_key": "Directories"
    },
    "clouddirectory_directory_from_get_directory": {
        "fetch": {
            "all_args": [
                "DirectoryArn"
            ],
            "docstring": "clouddirectory.get_directory(['DirectoryArn'])",
            "method_name": "get_directory",
            "required_args": [
                "DirectoryArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(Directory)>",
        "result_key": "Directory"
    },
    "clouddirectory_directory_from_list_directories": {
        "fetch": {
            "all_args": [
                "state"
            ],
            "docstring": "clouddirectory.list_directories([])",
            "method_name": "list_directories",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(Directory)>",
        "parametrize_id_source": [
            "DirectoryArn"
        ],
        "result_key": "Directories"
    },
    "clouddirectory_document": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.get_schema_as_json(['SchemaArn'])",
            "method_name": "get_schema_as_json",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(SchemaJsonDocument)>",
        "result_key": "Document"
    },
    "clouddirectory_facet": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.get_facet(['SchemaArn', 'Name'])",
            "method_name": "get_facet",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(Facet)>",
        "result_key": "Facet"
    },
    "clouddirectory_facet_attribute": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.list_facet_attributes(['SchemaArn', 'Name'])",
            "method_name": "list_facet_attributes",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(FacetAttribute)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Attributes"
    },
    "clouddirectory_facet_name": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.list_facet_names(['SchemaArn'])",
            "method_name": "list_facet_names",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(FacetName)>",
        "parametrize_id_source": [
            "FacetName"
        ],
        "result_key": "FacetNames"
    },
    "clouddirectory_facet_names_from_list_facet_names": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.list_facet_names(['SchemaArn'])",
            "method_name": "list_facet_names",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(FacetNameList)>",
        "result_key": "FacetNames"
    },
    "clouddirectory_facet_names_from_list_typed_link_facet_names": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.list_typed_link_facet_names(['SchemaArn'])",
            "method_name": "list_typed_link_facet_names",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(TypedLinkNameList)>",
        "result_key": "FacetNames"
    },
    "clouddirectory_identity_attribute_order": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.get_typed_link_facet_information(['SchemaArn', 'Name'])",
            "method_name": "get_typed_link_facet_information",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(AttributeNameList)>",
        "result_key": "IdentityAttributeOrder"
    },
    "clouddirectory_index_attachment_from_list_attached_indices": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "TargetReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_attached_indices(['DirectoryArn', 'TargetReference'])",
            "method_name": "list_attached_indices",
            "required_args": [
                "DirectoryArn",
                "TargetReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(IndexAttachment)>",
        "parametrize_id_source": [
            "ObjectIdentifier"
        ],
        "result_key": "IndexAttachments"
    },
    "clouddirectory_index_attachment_from_list_index": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "RangesOnIndexedValues",
                "IndexReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_index(['DirectoryArn', 'IndexReference'])",
            "method_name": "list_index",
            "required_args": [
                "DirectoryArn",
                "IndexReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(IndexAttachment)>",
        "parametrize_id_source": [
            "ObjectIdentifier"
        ],
        "result_key": "IndexAttachments"
    },
    "clouddirectory_index_attachments_from_list_attached_indices": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "TargetReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_attached_indices(['DirectoryArn', 'TargetReference'])",
            "method_name": "list_attached_indices",
            "required_args": [
                "DirectoryArn",
                "TargetReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(IndexAttachmentList)>",
        "result_key": "IndexAttachments"
    },
    "clouddirectory_index_attachments_from_list_index": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "RangesOnIndexedValues",
                "IndexReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_index(['DirectoryArn', 'IndexReference'])",
            "method_name": "list_index",
            "required_args": [
                "DirectoryArn",
                "IndexReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(IndexAttachmentList)>",
        "result_key": "IndexAttachments"
    },
    "clouddirectory_link_specifiers": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "FilterAttributeRanges",
                "FilterTypedLink",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_incoming_typed_links(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_incoming_typed_links",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(TypedLinkSpecifierList)>",
        "result_key": "LinkSpecifiers"
    },
    "clouddirectory_name": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.get_schema_as_json(['SchemaArn'])",
            "method_name": "get_schema_as_json",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(SchemaName)>",
        "result_key": "Name"
    },
    "clouddirectory_object_identifier_from_get_object_information": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.get_object_information(['DirectoryArn', 'ObjectReference'])",
            "method_name": "get_object_information",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(ObjectIdentifier)>",
        "result_key": "ObjectIdentifier"
    },
    "clouddirectory_object_identifier_from_list_object_policies": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_object_policies(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_policies",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(ObjectIdentifier)>",
        "parametrize_id_source": [
            "ObjectIdentifier"
        ],
        "result_key": "AttachedPolicyIds"
    },
    "clouddirectory_object_identifier_from_list_policy_attachments": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "PolicyReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_policy_attachments(['DirectoryArn', 'PolicyReference'])",
            "method_name": "list_policy_attachments",
            "required_args": [
                "DirectoryArn",
                "PolicyReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(ObjectIdentifier)>",
        "parametrize_id_source": [
            "ObjectIdentifier"
        ],
        "result_key": "ObjectIdentifiers"
    },
    "clouddirectory_object_identifiers": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "PolicyReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_policy_attachments(['DirectoryArn', 'PolicyReference'])",
            "method_name": "list_policy_attachments",
            "required_args": [
                "DirectoryArn",
                "PolicyReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(ObjectIdentifierList)>",
        "result_key": "ObjectIdentifiers"
    },
    "clouddirectory_parents": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_object_parents(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_parents",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<MapShape(ObjectIdentifierToLinkNameMap)>",
        "result_key": "Parents"
    },
    "clouddirectory_path_to_object_identifiers": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "docstring": "clouddirectory.list_object_parent_paths(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_parent_paths",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(PathToObjectIdentifiers)>",
        "parametrize_id_source": [
            "ObjectIdentifiers"
        ],
        "result_key": "PathToObjectIdentifiersList"
    },
    "clouddirectory_path_to_object_identifiers_list": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "docstring": "clouddirectory.list_object_parent_paths(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_object_parent_paths",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(PathToObjectIdentifiersList)>",
        "result_key": "PathToObjectIdentifiersList"
    },
    "clouddirectory_schema_arns_from_list_applied_schema_arns": {
        "fetch": {
            "all_args": [
                "DirectoryArn"
            ],
            "docstring": "clouddirectory.list_applied_schema_arns(['DirectoryArn'])",
            "method_name": "list_applied_schema_arns",
            "required_args": [
                "DirectoryArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(Arns)>",
        "result_key": "SchemaArns"
    },
    "clouddirectory_schema_arns_from_list_development_schema_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "clouddirectory.list_development_schema_arns([])",
            "method_name": "list_development_schema_arns",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(Arns)>",
        "result_key": "SchemaArns"
    },
    "clouddirectory_schema_arns_from_list_published_schema_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "clouddirectory.list_published_schema_arns([])",
            "method_name": "list_published_schema_arns",
            "required_args": [],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(Arns)>",
        "result_key": "SchemaArns"
    },
    "clouddirectory_schema_facet": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.get_object_information(['DirectoryArn', 'ObjectReference'])",
            "method_name": "get_object_information",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(SchemaFacet)>",
        "parametrize_id_source": [
            "SchemaArn"
        ],
        "result_key": "SchemaFacets"
    },
    "clouddirectory_schema_facets": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.get_object_information(['DirectoryArn', 'ObjectReference'])",
            "method_name": "get_object_information",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(SchemaFacetList)>",
        "result_key": "SchemaFacets"
    },
    "clouddirectory_tag": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "clouddirectory.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "clouddirectory_tags": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "clouddirectory.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "clouddirectory_typed_link_attribute_definition": {
        "fetch": {
            "all_args": [
                "SchemaArn",
                "Name"
            ],
            "docstring": "clouddirectory.list_typed_link_facet_attributes(['SchemaArn', 'Name'])",
            "method_name": "list_typed_link_facet_attributes",
            "required_args": [
                "SchemaArn",
                "Name"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(TypedLinkAttributeDefinition)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Attributes"
    },
    "clouddirectory_typed_link_name": {
        "fetch": {
            "all_args": [
                "SchemaArn"
            ],
            "docstring": "clouddirectory.list_typed_link_facet_names(['SchemaArn'])",
            "method_name": "list_typed_link_facet_names",
            "required_args": [
                "SchemaArn"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StringShape(TypedLinkName)>",
        "parametrize_id_source": [
            "TypedLinkName"
        ],
        "result_key": "FacetNames"
    },
    "clouddirectory_typed_link_specifier_from_list_incoming_typed_links": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "FilterAttributeRanges",
                "FilterTypedLink",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_incoming_typed_links(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_incoming_typed_links",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(TypedLinkSpecifier)>",
        "parametrize_id_source": [
            "IdentityAttributeValues"
        ],
        "result_key": "LinkSpecifiers"
    },
    "clouddirectory_typed_link_specifier_from_list_outgoing_typed_links": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "FilterAttributeRanges",
                "FilterTypedLink",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_outgoing_typed_links(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_outgoing_typed_links",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<StructureShape(TypedLinkSpecifier)>",
        "parametrize_id_source": [
            "IdentityAttributeValues"
        ],
        "result_key": "TypedLinkSpecifiers"
    },
    "clouddirectory_typed_link_specifiers": {
        "fetch": {
            "all_args": [
                "DirectoryArn",
                "ObjectReference",
                "FilterAttributeRanges",
                "FilterTypedLink",
                "ConsistencyLevel"
            ],
            "docstring": "clouddirectory.list_outgoing_typed_links(['DirectoryArn', 'ObjectReference'])",
            "method_name": "list_outgoing_typed_links",
            "required_args": [
                "DirectoryArn",
                "ObjectReference"
            ],
            "service_name": "clouddirectory"
        },
        "output_shape": "<ListShape(TypedLinkSpecifierList)>",
        "result_key": "TypedLinkSpecifiers"
    },
    "cloudformation_account_limit": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudformation.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(AccountLimit)>",
        "parametrize_id_source": null,
        "result_key": "AccountLimits"
    },
    "cloudformation_account_limits": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudformation.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(AccountLimitList)>",
        "result_key": "AccountLimits"
    },
    "cloudformation_capabilities_from_describe_change_set": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Capabilities)>",
        "result_key": "Capabilities"
    },
    "cloudformation_capabilities_from_get_template_summary": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Capabilities)>",
        "result_key": "Capabilities"
    },
    "cloudformation_capabilities_reason": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(CapabilitiesReason)>",
        "result_key": "CapabilitiesReason"
    },
    "cloudformation_capability_from_describe_change_set": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Capability)>",
        "parametrize_id_source": [
            "Capability"
        ],
        "result_key": "Capabilities"
    },
    "cloudformation_capability_from_get_template_summary": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Capability)>",
        "parametrize_id_source": [
            "Capability"
        ],
        "result_key": "Capabilities"
    },
    "cloudformation_change": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(Change)>",
        "parametrize_id_source": null,
        "result_key": "Changes"
    },
    "cloudformation_change_set_id": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ChangeSetId)>",
        "result_key": "ChangeSetId"
    },
    "cloudformation_change_set_name": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ChangeSetName)>",
        "result_key": "ChangeSetName"
    },
    "cloudformation_change_set_summary": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.list_change_sets(['StackName'])",
            "method_name": "list_change_sets",
            "required_args": [
                "StackName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(ChangeSetSummary)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "Summaries"
    },
    "cloudformation_changes": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Changes)>",
        "result_key": "Changes"
    },
    "cloudformation_creation_time": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<Shape(CreationTime)>",
        "result_key": "CreationTime"
    },
    "cloudformation_declared_transforms": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(TransformsList)>",
        "result_key": "DeclaredTransforms"
    },
    "cloudformation_description_from_describe_change_set": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "Description"
    },
    "cloudformation_description_from_get_template_summary": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "Description"
    },
    "cloudformation_execution_status": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ExecutionStatus)>",
        "result_key": "ExecutionStatus"
    },
    "cloudformation_export": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudformation.list_exports([])",
            "method_name": "list_exports",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(Export)>",
        "parametrize_id_source": [
            "ExportingStackId"
        ],
        "result_key": "Exports"
    },
    "cloudformation_exports": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudformation.list_exports([])",
            "method_name": "list_exports",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Exports)>",
        "result_key": "Exports"
    },
    "cloudformation_imports": {
        "fetch": {
            "all_args": [
                "ExportName"
            ],
            "docstring": "cloudformation.list_imports(['ExportName'])",
            "method_name": "list_imports",
            "required_args": [
                "ExportName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Imports)>",
        "result_key": "Imports"
    },
    "cloudformation_metadata": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Metadata)>",
        "result_key": "Metadata"
    },
    "cloudformation_notification_arn": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(NotificationARN)>",
        "parametrize_id_source": [
            "NotificationARN"
        ],
        "result_key": "NotificationARNs"
    },
    "cloudformation_notification_arns": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(NotificationARNs)>",
        "result_key": "NotificationARNs"
    },
    "cloudformation_parameter": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": null,
        "result_key": "Parameters"
    },
    "cloudformation_parameter_declaration": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(ParameterDeclaration)>",
        "parametrize_id_source": null,
        "result_key": "Parameters"
    },
    "cloudformation_parameters_from_describe_change_set": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Parameters)>",
        "result_key": "Parameters"
    },
    "cloudformation_parameters_from_get_template_summary": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(ParameterDeclarations)>",
        "result_key": "Parameters"
    },
    "cloudformation_resource_type": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ResourceType)>",
        "parametrize_id_source": [
            "ResourceType"
        ],
        "result_key": "ResourceTypes"
    },
    "cloudformation_resource_types": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(ResourceTypes)>",
        "result_key": "ResourceTypes"
    },
    "cloudformation_rollback_configuration": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(RollbackConfiguration)>",
        "result_key": "RollbackConfiguration"
    },
    "cloudformation_stack": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(Stack)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "Stacks"
    },
    "cloudformation_stack_event": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.describe_stack_events([])",
            "method_name": "describe_stack_events",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackEvent)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "StackEvents"
    },
    "cloudformation_stack_events": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.describe_stack_events([])",
            "method_name": "describe_stack_events",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackEvents)>",
        "result_key": "StackEvents"
    },
    "cloudformation_stack_id": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(StackId)>",
        "result_key": "StackId"
    },
    "cloudformation_stack_instance": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "StackInstanceAccount",
                "StackInstanceRegion"
            ],
            "docstring": "cloudformation.describe_stack_instance(['StackSetName', 'StackInstanceAccount', 'StackInstanceRegion'])",
            "method_name": "describe_stack_instance",
            "required_args": [
                "StackSetName",
                "StackInstanceAccount",
                "StackInstanceRegion"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackInstance)>",
        "result_key": "StackInstance"
    },
    "cloudformation_stack_instance_summary": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "StackInstanceAccount",
                "StackInstanceRegion"
            ],
            "docstring": "cloudformation.list_stack_instances(['StackSetName'])",
            "method_name": "list_stack_instances",
            "required_args": [
                "StackSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackInstanceSummary)>",
        "parametrize_id_source": [
            "Region"
        ],
        "result_key": "Summaries"
    },
    "cloudformation_stack_name_from_describe_change_set": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(StackName)>",
        "result_key": "StackName"
    },
    "cloudformation_stack_name_from_list_imports": {
        "fetch": {
            "all_args": [
                "ExportName"
            ],
            "docstring": "cloudformation.list_imports(['ExportName'])",
            "method_name": "list_imports",
            "required_args": [
                "ExportName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(StackName)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "Imports"
    },
    "cloudformation_stack_policy_body": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.get_stack_policy(['StackName'])",
            "method_name": "get_stack_policy",
            "required_args": [
                "StackName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(StackPolicyBody)>",
        "result_key": "StackPolicyBody"
    },
    "cloudformation_stack_resource": {
        "fetch": {
            "all_args": [
                "StackName",
                "LogicalResourceId",
                "PhysicalResourceId"
            ],
            "docstring": "cloudformation.describe_stack_resources([])",
            "method_name": "describe_stack_resources",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackResource)>",
        "parametrize_id_source": [
            "StackName"
        ],
        "result_key": "StackResources"
    },
    "cloudformation_stack_resource_detail": {
        "fetch": {
            "all_args": [
                "StackName",
                "LogicalResourceId"
            ],
            "docstring": "cloudformation.describe_stack_resource(['StackName', 'LogicalResourceId'])",
            "method_name": "describe_stack_resource",
            "required_args": [
                "StackName",
                "LogicalResourceId"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackResourceDetail)>",
        "result_key": "StackResourceDetail"
    },
    "cloudformation_stack_resource_summaries": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.list_stack_resources(['StackName'])",
            "method_name": "list_stack_resources",
            "required_args": [
                "StackName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackResourceSummaries)>",
        "result_key": "StackResourceSummaries"
    },
    "cloudformation_stack_resource_summary": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.list_stack_resources(['StackName'])",
            "method_name": "list_stack_resources",
            "required_args": [
                "StackName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackResourceSummary)>",
        "parametrize_id_source": [
            "LogicalResourceId"
        ],
        "result_key": "StackResourceSummaries"
    },
    "cloudformation_stack_resources": {
        "fetch": {
            "all_args": [
                "StackName",
                "LogicalResourceId",
                "PhysicalResourceId"
            ],
            "docstring": "cloudformation.describe_stack_resources([])",
            "method_name": "describe_stack_resources",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackResources)>",
        "result_key": "StackResources"
    },
    "cloudformation_stack_set": {
        "fetch": {
            "all_args": [
                "StackSetName"
            ],
            "docstring": "cloudformation.describe_stack_set(['StackSetName'])",
            "method_name": "describe_stack_set",
            "required_args": [
                "StackSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSet)>",
        "result_key": "StackSet"
    },
    "cloudformation_stack_set_operation": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "OperationId"
            ],
            "docstring": "cloudformation.describe_stack_set_operation(['StackSetName', 'OperationId'])",
            "method_name": "describe_stack_set_operation",
            "required_args": [
                "StackSetName",
                "OperationId"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSetOperation)>",
        "result_key": "StackSetOperation"
    },
    "cloudformation_stack_set_operation_result_summary": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "OperationId"
            ],
            "docstring": "cloudformation.list_stack_set_operation_results(['StackSetName', 'OperationId'])",
            "method_name": "list_stack_set_operation_results",
            "required_args": [
                "StackSetName",
                "OperationId"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSetOperationResultSummary)>",
        "parametrize_id_source": null,
        "result_key": "Summaries"
    },
    "cloudformation_stack_set_operation_summary": {
        "fetch": {
            "all_args": [
                "StackSetName"
            ],
            "docstring": "cloudformation.list_stack_set_operations(['StackSetName'])",
            "method_name": "list_stack_set_operations",
            "required_args": [
                "StackSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSetOperationSummary)>",
        "parametrize_id_source": [
            "OperationId"
        ],
        "result_key": "Summaries"
    },
    "cloudformation_stack_set_summary": {
        "fetch": {
            "all_args": [
                "Status"
            ],
            "docstring": "cloudformation.list_stack_sets([])",
            "method_name": "list_stack_sets",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSetSummary)>",
        "parametrize_id_source": [
            "Status"
        ],
        "result_key": "Summaries"
    },
    "cloudformation_stack_summaries": {
        "fetch": {
            "all_args": [
                "StackStatusFilter"
            ],
            "docstring": "cloudformation.list_stacks([])",
            "method_name": "list_stacks",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackSummaries)>",
        "result_key": "StackSummaries"
    },
    "cloudformation_stack_summary": {
        "fetch": {
            "all_args": [
                "StackStatusFilter"
            ],
            "docstring": "cloudformation.list_stacks([])",
            "method_name": "list_stacks",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(StackSummary)>",
        "parametrize_id_source": [
            "StackStatus"
        ],
        "result_key": "StackSummaries"
    },
    "cloudformation_stacks": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Stacks)>",
        "result_key": "Stacks"
    },
    "cloudformation_stages_available": {
        "fetch": {
            "all_args": [
                "StackName",
                "ChangeSetName",
                "TemplateStage"
            ],
            "docstring": "cloudformation.get_template([])",
            "method_name": "get_template",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StageList)>",
        "result_key": "StagesAvailable"
    },
    "cloudformation_status": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ChangeSetStatus)>",
        "result_key": "Status"
    },
    "cloudformation_status_reason": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(ChangeSetStatusReason)>",
        "result_key": "StatusReason"
    },
    "cloudformation_summaries_from_list_change_sets": {
        "fetch": {
            "all_args": [
                "StackName"
            ],
            "docstring": "cloudformation.list_change_sets(['StackName'])",
            "method_name": "list_change_sets",
            "required_args": [
                "StackName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(ChangeSetSummaries)>",
        "result_key": "Summaries"
    },
    "cloudformation_summaries_from_list_stack_instances": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "StackInstanceAccount",
                "StackInstanceRegion"
            ],
            "docstring": "cloudformation.list_stack_instances(['StackSetName'])",
            "method_name": "list_stack_instances",
            "required_args": [
                "StackSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackInstanceSummaries)>",
        "result_key": "Summaries"
    },
    "cloudformation_summaries_from_list_stack_set_operation_results": {
        "fetch": {
            "all_args": [
                "StackSetName",
                "OperationId"
            ],
            "docstring": "cloudformation.list_stack_set_operation_results(['StackSetName', 'OperationId'])",
            "method_name": "list_stack_set_operation_results",
            "required_args": [
                "StackSetName",
                "OperationId"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackSetOperationResultSummaries)>",
        "result_key": "Summaries"
    },
    "cloudformation_summaries_from_list_stack_set_operations": {
        "fetch": {
            "all_args": [
                "StackSetName"
            ],
            "docstring": "cloudformation.list_stack_set_operations(['StackSetName'])",
            "method_name": "list_stack_set_operations",
            "required_args": [
                "StackSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackSetOperationSummaries)>",
        "result_key": "Summaries"
    },
    "cloudformation_summaries_from_list_stack_sets": {
        "fetch": {
            "all_args": [
                "Status"
            ],
            "docstring": "cloudformation.list_stack_sets([])",
            "method_name": "list_stack_sets",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(StackSetSummaries)>",
        "result_key": "Summaries"
    },
    "cloudformation_tag": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "cloudformation_tags": {
        "fetch": {
            "all_args": [
                "ChangeSetName",
                "StackName"
            ],
            "docstring": "cloudformation.describe_change_set(['ChangeSetName'])",
            "method_name": "describe_change_set",
            "required_args": [
                "ChangeSetName"
            ],
            "service_name": "cloudformation"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "cloudformation_template_body": {
        "fetch": {
            "all_args": [
                "StackName",
                "ChangeSetName",
                "TemplateStage"
            ],
            "docstring": "cloudformation.get_template([])",
            "method_name": "get_template",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(TemplateBody)>",
        "result_key": "TemplateBody"
    },
    "cloudformation_template_stage": {
        "fetch": {
            "all_args": [
                "StackName",
                "ChangeSetName",
                "TemplateStage"
            ],
            "docstring": "cloudformation.get_template([])",
            "method_name": "get_template",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(TemplateStage)>",
        "parametrize_id_source": [
            "TemplateStage"
        ],
        "result_key": "StagesAvailable"
    },
    "cloudformation_transform_name": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(TransformName)>",
        "parametrize_id_source": [
            "TransformName"
        ],
        "result_key": "DeclaredTransforms"
    },
    "cloudformation_version": {
        "fetch": {
            "all_args": [
                "TemplateBody",
                "TemplateURL",
                "StackName",
                "StackSetName"
            ],
            "docstring": "cloudformation.get_template_summary([])",
            "method_name": "get_template_summary",
            "required_args": [],
            "service_name": "cloudformation"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "Version"
    },
    "cloudfront_cloud_front_origin_access_identity": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_cloud_front_origin_access_identity(['Id'])",
            "method_name": "get_cloud_front_origin_access_identity",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(CloudFrontOriginAccessIdentity)>",
        "result_key": "CloudFrontOriginAccessIdentity"
    },
    "cloudfront_cloud_front_origin_access_identity_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_cloud_front_origin_access_identity_config(['Id'])",
            "method_name": "get_cloud_front_origin_access_identity_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(CloudFrontOriginAccessIdentityConfig)>",
        "result_key": "CloudFrontOriginAccessIdentityConfig"
    },
    "cloudfront_cloud_front_origin_access_identity_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudfront.list_cloud_front_origin_access_identities([])",
            "method_name": "list_cloud_front_origin_access_identities",
            "required_args": [],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(CloudFrontOriginAccessIdentityList)>",
        "result_key": "CloudFrontOriginAccessIdentityList"
    },
    "cloudfront_distribution": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_distribution(['Id'])",
            "method_name": "get_distribution",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(Distribution)>",
        "result_key": "Distribution"
    },
    "cloudfront_distribution_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_distribution_config(['Id'])",
            "method_name": "get_distribution_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(DistributionConfig)>",
        "result_key": "DistributionConfig"
    },
    "cloudfront_distribution_list_from_list_distributions": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudfront.list_distributions([])",
            "method_name": "list_distributions",
            "required_args": [],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(DistributionList)>",
        "result_key": "DistributionList"
    },
    "cloudfront_distribution_list_from_list_distributions_by_web_acl_id": {
        "fetch": {
            "all_args": [
                "WebACLId"
            ],
            "docstring": "cloudfront.list_distributions_by_web_acl_id(['WebACLId'])",
            "method_name": "list_distributions_by_web_acl_id",
            "required_args": [
                "WebACLId"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(DistributionList)>",
        "result_key": "DistributionList"
    },
    "cloudfront_e_tag_from_get_cloud_front_origin_access_identity": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_cloud_front_origin_access_identity(['Id'])",
            "method_name": "get_cloud_front_origin_access_identity",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_e_tag_from_get_cloud_front_origin_access_identity_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_cloud_front_origin_access_identity_config(['Id'])",
            "method_name": "get_cloud_front_origin_access_identity_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_e_tag_from_get_distribution": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_distribution(['Id'])",
            "method_name": "get_distribution",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_e_tag_from_get_distribution_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_distribution_config(['Id'])",
            "method_name": "get_distribution_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_e_tag_from_get_streaming_distribution": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_streaming_distribution(['Id'])",
            "method_name": "get_streaming_distribution",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_e_tag_from_get_streaming_distribution_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_streaming_distribution_config(['Id'])",
            "method_name": "get_streaming_distribution_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ETag"
    },
    "cloudfront_invalidation": {
        "fetch": {
            "all_args": [
                "DistributionId",
                "Id"
            ],
            "docstring": "cloudfront.get_invalidation(['DistributionId', 'Id'])",
            "method_name": "get_invalidation",
            "required_args": [
                "DistributionId",
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(Invalidation)>",
        "result_key": "Invalidation"
    },
    "cloudfront_invalidation_list": {
        "fetch": {
            "all_args": [
                "DistributionId"
            ],
            "docstring": "cloudfront.list_invalidations(['DistributionId'])",
            "method_name": "list_invalidations",
            "required_args": [
                "DistributionId"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(InvalidationList)>",
        "result_key": "InvalidationList"
    },
    "cloudfront_streaming_distribution": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_streaming_distribution(['Id'])",
            "method_name": "get_streaming_distribution",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(StreamingDistribution)>",
        "result_key": "StreamingDistribution"
    },
    "cloudfront_streaming_distribution_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "cloudfront.get_streaming_distribution_config(['Id'])",
            "method_name": "get_streaming_distribution_config",
            "required_args": [
                "Id"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(StreamingDistributionConfig)>",
        "result_key": "StreamingDistributionConfig"
    },
    "cloudfront_streaming_distribution_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudfront.list_streaming_distributions([])",
            "method_name": "list_streaming_distributions",
            "required_args": [],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(StreamingDistributionList)>",
        "result_key": "StreamingDistributionList"
    },
    "cloudfront_tags": {
        "fetch": {
            "all_args": [
                "Resource"
            ],
            "docstring": "cloudfront.list_tags_for_resource(['Resource'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "Resource"
            ],
            "service_name": "cloudfront"
        },
        "output_shape": "<StructureShape(Tags)>",
        "result_key": "Tags"
    },
    "cloudhsm_availability_zone": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(AZ)>",
        "result_key": "AvailabilityZone"
    },
    "cloudhsm_az": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_available_zones([])",
            "method_name": "list_available_zones",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(AZ)>",
        "parametrize_id_source": [
            "AZ"
        ],
        "result_key": "AZList"
    },
    "cloudhsm_az_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_available_zones([])",
            "method_name": "list_available_zones",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(AZList)>",
        "result_key": "AZList"
    },
    "cloudhsm_certificate": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "CertificateFingerprint"
            ],
            "docstring": "cloudhsm.describe_luna_client([])",
            "method_name": "describe_luna_client",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Certificate)>",
        "result_key": "Certificate"
    },
    "cloudhsm_certificate_fingerprint": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "CertificateFingerprint"
            ],
            "docstring": "cloudhsm.describe_luna_client([])",
            "method_name": "describe_luna_client",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(CertificateFingerprint)>",
        "result_key": "CertificateFingerprint"
    },
    "cloudhsm_client_arn_from_describe_luna_client": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "CertificateFingerprint"
            ],
            "docstring": "cloudhsm.describe_luna_client([])",
            "method_name": "describe_luna_client",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(ClientArn)>",
        "result_key": "ClientArn"
    },
    "cloudhsm_client_arn_from_list_luna_clients": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_luna_clients([])",
            "method_name": "list_luna_clients",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(ClientArn)>",
        "parametrize_id_source": [
            "ClientArn"
        ],
        "result_key": "ClientList"
    },
    "cloudhsm_client_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_luna_clients([])",
            "method_name": "list_luna_clients",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(ClientList)>",
        "result_key": "ClientList"
    },
    "cloudhsm_config_cred": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "docstring": "cloudhsm.get_config(['ClientArn', 'ClientVersion', 'HapgList'])",
            "method_name": "get_config",
            "required_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ConfigCred"
    },
    "cloudhsm_config_file": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "docstring": "cloudhsm.get_config(['ClientArn', 'ClientVersion', 'HapgList'])",
            "method_name": "get_config",
            "required_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ConfigFile"
    },
    "cloudhsm_config_type": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "docstring": "cloudhsm.get_config(['ClientArn', 'ClientVersion', 'HapgList'])",
            "method_name": "get_config",
            "required_args": [
                "ClientArn",
                "ClientVersion",
                "HapgList"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ConfigType"
    },
    "cloudhsm_eni_id": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(EniId)>",
        "result_key": "EniId"
    },
    "cloudhsm_eni_ip": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(IpAddress)>",
        "result_key": "EniIp"
    },
    "cloudhsm_hapg_arn_from_describe_hapg": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HapgArn)>",
        "result_key": "HapgArn"
    },
    "cloudhsm_hapg_arn_from_list_hapgs": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_hapgs([])",
            "method_name": "list_hapgs",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HapgArn)>",
        "parametrize_id_source": [
            "HapgArn"
        ],
        "result_key": "HapgList"
    },
    "cloudhsm_hapg_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_hapgs([])",
            "method_name": "list_hapgs",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(HapgList)>",
        "result_key": "HapgList"
    },
    "cloudhsm_hapg_serial": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "HapgSerial"
    },
    "cloudhsm_hsm_arn_from_describe_hapg": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HsmArn)>",
        "parametrize_id_source": [
            "HsmArn"
        ],
        "result_key": "HsmsPendingRegistration"
    },
    "cloudhsm_hsm_arn_from_describe_hsm": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HsmArn)>",
        "result_key": "HsmArn"
    },
    "cloudhsm_hsm_arn_from_list_hsms": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_hsms([])",
            "method_name": "list_hsms",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HsmArn)>",
        "parametrize_id_source": [
            "HsmArn"
        ],
        "result_key": "HsmList"
    },
    "cloudhsm_hsm_list": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudhsm.list_hsms([])",
            "method_name": "list_hsms",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(HsmList)>",
        "result_key": "HsmList"
    },
    "cloudhsm_hsm_type": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "HsmType"
    },
    "cloudhsm_hsms_last_action_failed": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(HsmList)>",
        "result_key": "HsmsLastActionFailed"
    },
    "cloudhsm_hsms_pending_deletion": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(HsmList)>",
        "result_key": "HsmsPendingDeletion"
    },
    "cloudhsm_hsms_pending_registration": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(HsmList)>",
        "result_key": "HsmsPendingRegistration"
    },
    "cloudhsm_iam_role_arn": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(IamRoleArn)>",
        "result_key": "IamRoleArn"
    },
    "cloudhsm_label_from_describe_hapg": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Label)>",
        "result_key": "Label"
    },
    "cloudhsm_label_from_describe_luna_client": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "CertificateFingerprint"
            ],
            "docstring": "cloudhsm.describe_luna_client([])",
            "method_name": "describe_luna_client",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Label)>",
        "result_key": "Label"
    },
    "cloudhsm_last_modified_timestamp_from_describe_hapg": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "LastModifiedTimestamp"
    },
    "cloudhsm_last_modified_timestamp_from_describe_luna_client": {
        "fetch": {
            "all_args": [
                "ClientArn",
                "CertificateFingerprint"
            ],
            "docstring": "cloudhsm.describe_luna_client([])",
            "method_name": "describe_luna_client",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "LastModifiedTimestamp"
    },
    "cloudhsm_partition_arn": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(PartitionArn)>",
        "parametrize_id_source": [
            "PartitionArn"
        ],
        "result_key": "Partitions"
    },
    "cloudhsm_partition_serial": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(PartitionSerial)>",
        "parametrize_id_source": [
            "PartitionSerial"
        ],
        "result_key": "PartitionSerialList"
    },
    "cloudhsm_partition_serial_list": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(PartitionSerialList)>",
        "result_key": "PartitionSerialList"
    },
    "cloudhsm_partitions": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(PartitionList)>",
        "result_key": "Partitions"
    },
    "cloudhsm_serial_number": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HsmSerialNumber)>",
        "result_key": "SerialNumber"
    },
    "cloudhsm_server_cert_last_updated": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "ServerCertLastUpdated"
    },
    "cloudhsm_server_cert_uri": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ServerCertUri"
    },
    "cloudhsm_software_version": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SoftwareVersion"
    },
    "cloudhsm_ssh_key_last_updated": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "SshKeyLastUpdated"
    },
    "cloudhsm_ssh_public_key": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(SshKey)>",
        "result_key": "SshPublicKey"
    },
    "cloudhsm_state": {
        "fetch": {
            "all_args": [
                "HapgArn"
            ],
            "docstring": "cloudhsm.describe_hapg(['HapgArn'])",
            "method_name": "describe_hapg",
            "required_args": [
                "HapgArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(CloudHsmObjectState)>",
        "result_key": "State"
    },
    "cloudhsm_status": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(HsmStatus)>",
        "result_key": "Status"
    },
    "cloudhsm_status_details": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "StatusDetails"
    },
    "cloudhsm_subnet_id": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(SubnetId)>",
        "result_key": "SubnetId"
    },
    "cloudhsm_subscription_end_date": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "SubscriptionEndDate"
    },
    "cloudhsm_subscription_start_date": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "SubscriptionStartDate"
    },
    "cloudhsm_subscription_type": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(SubscriptionType)>",
        "result_key": "SubscriptionType"
    },
    "cloudhsm_tag": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "cloudhsm.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "cloudhsm_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "cloudhsm.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "cloudhsm"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "cloudhsm_vendor_name": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "VendorName"
    },
    "cloudhsm_vpc_id": {
        "fetch": {
            "all_args": [
                "HsmArn",
                "HsmSerialNumber"
            ],
            "docstring": "cloudhsm.describe_hsm([])",
            "method_name": "describe_hsm",
            "required_args": [],
            "service_name": "cloudhsm"
        },
        "output_shape": "<StringShape(VpcId)>",
        "result_key": "VpcId"
    },
    "cloudhsmv2_backup": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "cloudhsmv2.describe_backups([])",
            "method_name": "describe_backups",
            "required_args": [],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<StructureShape(Backup)>",
        "parametrize_id_source": [
            "BackupId"
        ],
        "result_key": "Backups"
    },
    "cloudhsmv2_backups": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "cloudhsmv2.describe_backups([])",
            "method_name": "describe_backups",
            "required_args": [],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<ListShape(Backups)>",
        "result_key": "Backups"
    },
    "cloudhsmv2_cluster": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "cloudhsmv2.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<StructureShape(Cluster)>",
        "parametrize_id_source": [
            "ClusterId"
        ],
        "result_key": "Clusters"
    },
    "cloudhsmv2_clusters": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "cloudhsmv2.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<ListShape(Clusters)>",
        "result_key": "Clusters"
    },
    "cloudhsmv2_tag": {
        "fetch": {
            "all_args": [
                "ResourceId"
            ],
            "docstring": "cloudhsmv2.list_tags(['ResourceId'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "cloudhsmv2_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceId"
            ],
            "docstring": "cloudhsmv2.list_tags(['ResourceId'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "cloudhsmv2"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "cloudsearch_access_policies": {
        "fetch": {
            "all_args": [
                "DomainName",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_service_access_policies(['DomainName'])",
            "method_name": "describe_service_access_policies",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(AccessPoliciesStatus)>",
        "result_key": "AccessPolicies"
    },
    "cloudsearch_analysis_scheme_status": {
        "fetch": {
            "all_args": [
                "DomainName",
                "AnalysisSchemeNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_analysis_schemes(['DomainName'])",
            "method_name": "describe_analysis_schemes",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(AnalysisSchemeStatus)>",
        "parametrize_id_source": null,
        "result_key": "AnalysisSchemes"
    },
    "cloudsearch_analysis_schemes": {
        "fetch": {
            "all_args": [
                "DomainName",
                "AnalysisSchemeNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_analysis_schemes(['DomainName'])",
            "method_name": "describe_analysis_schemes",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<ListShape(AnalysisSchemeStatusList)>",
        "result_key": "AnalysisSchemes"
    },
    "cloudsearch_availability_options": {
        "fetch": {
            "all_args": [
                "DomainName",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_availability_options(['DomainName'])",
            "method_name": "describe_availability_options",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(AvailabilityOptionsStatus)>",
        "result_key": "AvailabilityOptions"
    },
    "cloudsearch_domain_names": {
        "fetch": {
            "all_args": [],
            "docstring": "cloudsearch.list_domain_names([])",
            "method_name": "list_domain_names",
            "required_args": [],
            "service_name": "cloudsearch"
        },
        "output_shape": "<MapShape(DomainNameMap)>",
        "result_key": "DomainNames"
    },
    "cloudsearch_domain_status": {
        "fetch": {
            "all_args": [
                "DomainNames"
            ],
            "docstring": "cloudsearch.describe_domains([])",
            "method_name": "describe_domains",
            "required_args": [],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(DomainStatus)>",
        "parametrize_id_source": [
            "DomainName"
        ],
        "result_key": "DomainStatusList"
    },
    "cloudsearch_domain_status_list": {
        "fetch": {
            "all_args": [
                "DomainNames"
            ],
            "docstring": "cloudsearch.describe_domains([])",
            "method_name": "describe_domains",
            "required_args": [],
            "service_name": "cloudsearch"
        },
        "output_shape": "<ListShape(DomainStatusList)>",
        "result_key": "DomainStatusList"
    },
    "cloudsearch_expression_status": {
        "fetch": {
            "all_args": [
                "DomainName",
                "ExpressionNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_expressions(['DomainName'])",
            "method_name": "describe_expressions",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(ExpressionStatus)>",
        "parametrize_id_source": null,
        "result_key": "Expressions"
    },
    "cloudsearch_expressions": {
        "fetch": {
            "all_args": [
                "DomainName",
                "ExpressionNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_expressions(['DomainName'])",
            "method_name": "describe_expressions",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<ListShape(ExpressionStatusList)>",
        "result_key": "Expressions"
    },
    "cloudsearch_index_field_status": {
        "fetch": {
            "all_args": [
                "DomainName",
                "FieldNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_index_fields(['DomainName'])",
            "method_name": "describe_index_fields",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(IndexFieldStatus)>",
        "parametrize_id_source": null,
        "result_key": "IndexFields"
    },
    "cloudsearch_index_fields": {
        "fetch": {
            "all_args": [
                "DomainName",
                "FieldNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_index_fields(['DomainName'])",
            "method_name": "describe_index_fields",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<ListShape(IndexFieldStatusList)>",
        "result_key": "IndexFields"
    },
    "cloudsearch_scaling_parameters": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "cloudsearch.describe_scaling_parameters(['DomainName'])",
            "method_name": "describe_scaling_parameters",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(ScalingParametersStatus)>",
        "result_key": "ScalingParameters"
    },
    "cloudsearch_suggester_status": {
        "fetch": {
            "all_args": [
                "DomainName",
                "SuggesterNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_suggesters(['DomainName'])",
            "method_name": "describe_suggesters",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<StructureShape(SuggesterStatus)>",
        "parametrize_id_source": null,
        "result_key": "Suggesters"
    },
    "cloudsearch_suggesters": {
        "fetch": {
            "all_args": [
                "DomainName",
                "SuggesterNames",
                "Deployed"
            ],
            "docstring": "cloudsearch.describe_suggesters(['DomainName'])",
            "method_name": "describe_suggesters",
            "required_args": [
                "DomainName"
            ],
            "service_name": "cloudsearch"
        },
        "output_shape": "<ListShape(SuggesterStatusList)>",
        "result_key": "Suggesters"
    },
    "cloudtrail_event_selector": {
        "fetch": {
            "all_args": [
                "TrailName"
            ],
            "docstring": "cloudtrail.get_event_selectors(['TrailName'])",
            "method_name": "get_event_selectors",
            "required_args": [
                "TrailName"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StructureShape(EventSelector)>",
        "parametrize_id_source": null,
        "result_key": "EventSelectors"
    },
    "cloudtrail_event_selectors": {
        "fetch": {
            "all_args": [
                "TrailName"
            ],
            "docstring": "cloudtrail.get_event_selectors(['TrailName'])",
            "method_name": "get_event_selectors",
            "required_args": [
                "TrailName"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<ListShape(EventSelectors)>",
        "result_key": "EventSelectors"
    },
    "cloudtrail_is_logging": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "IsLogging"
    },
    "cloudtrail_latest_cloud_watch_logs_delivery_error": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestCloudWatchLogsDeliveryError"
    },
    "cloudtrail_latest_cloud_watch_logs_delivery_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "LatestCloudWatchLogsDeliveryTime"
    },
    "cloudtrail_latest_delivery_attempt_succeeded": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestDeliveryAttemptSucceeded"
    },
    "cloudtrail_latest_delivery_attempt_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestDeliveryAttemptTime"
    },
    "cloudtrail_latest_delivery_error": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestDeliveryError"
    },
    "cloudtrail_latest_delivery_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "LatestDeliveryTime"
    },
    "cloudtrail_latest_digest_delivery_error": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestDigestDeliveryError"
    },
    "cloudtrail_latest_digest_delivery_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "LatestDigestDeliveryTime"
    },
    "cloudtrail_latest_notification_attempt_succeeded": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestNotificationAttemptSucceeded"
    },
    "cloudtrail_latest_notification_attempt_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestNotificationAttemptTime"
    },
    "cloudtrail_latest_notification_error": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LatestNotificationError"
    },
    "cloudtrail_latest_notification_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "LatestNotificationTime"
    },
    "cloudtrail_public_key": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "cloudtrail.list_public_keys([])",
            "method_name": "list_public_keys",
            "required_args": [],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StructureShape(PublicKey)>",
        "parametrize_id_source": [
            "ValidityStartTime"
        ],
        "result_key": "PublicKeyList"
    },
    "cloudtrail_public_key_list": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "cloudtrail.list_public_keys([])",
            "method_name": "list_public_keys",
            "required_args": [],
            "service_name": "cloudtrail"
        },
        "output_shape": "<ListShape(PublicKeyList)>",
        "result_key": "PublicKeyList"
    },
    "cloudtrail_resource_tag": {
        "fetch": {
            "all_args": [
                "ResourceIdList"
            ],
            "docstring": "cloudtrail.list_tags(['ResourceIdList'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceIdList"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StructureShape(ResourceTag)>",
        "parametrize_id_source": [
            "ResourceId"
        ],
        "result_key": "ResourceTagList"
    },
    "cloudtrail_resource_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceIdList"
            ],
            "docstring": "cloudtrail.list_tags(['ResourceIdList'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceIdList"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<ListShape(ResourceTagList)>",
        "result_key": "ResourceTagList"
    },
    "cloudtrail_start_logging_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "StartLoggingTime"
    },
    "cloudtrail_stop_logging_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "StopLoggingTime"
    },
    "cloudtrail_time_logging_started": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TimeLoggingStarted"
    },
    "cloudtrail_time_logging_stopped": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "cloudtrail.get_trail_status(['Name'])",
            "method_name": "get_trail_status",
            "required_args": [
                "Name"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TimeLoggingStopped"
    },
    "cloudtrail_trail": {
        "fetch": {
            "all_args": [
                "trailNameList",
                "includeShadowTrails"
            ],
            "docstring": "cloudtrail.describe_trails([])",
            "method_name": "describe_trails",
            "required_args": [],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StructureShape(Trail)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "trailList"
    },
    "cloudtrail_trail_arn": {
        "fetch": {
            "all_args": [
                "TrailName"
            ],
            "docstring": "cloudtrail.get_event_selectors(['TrailName'])",
            "method_name": "get_event_selectors",
            "required_args": [
                "TrailName"
            ],
            "service_name": "cloudtrail"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TrailARN"
    },
    "cloudtrail_trail_list": {
        "fetch": {
            "all_args": [
                "trailNameList",
                "includeShadowTrails"
            ],
            "docstring": "cloudtrail.describe_trails([])",
            "method_name": "describe_trails",
            "required_args": [],
            "service_name": "cloudtrail"
        },
        "output_shape": "<ListShape(TrailList)>",
        "result_key": "trailList"
    },
    "cloudwatch_alarm_history_item": {
        "fetch": {
            "all_args": [
                "AlarmName",
                "HistoryItemType",
                "StartDate",
                "EndDate"
            ],
            "docstring": "cloudwatch.describe_alarm_history([])",
            "method_name": "describe_alarm_history",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(AlarmHistoryItem)>",
        "parametrize_id_source": [
            "AlarmName"
        ],
        "result_key": "AlarmHistoryItems"
    },
    "cloudwatch_alarm_history_items": {
        "fetch": {
            "all_args": [
                "AlarmName",
                "HistoryItemType",
                "StartDate",
                "EndDate"
            ],
            "docstring": "cloudwatch.describe_alarm_history([])",
            "method_name": "describe_alarm_history",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(AlarmHistoryItems)>",
        "result_key": "AlarmHistoryItems"
    },
    "cloudwatch_dashboard_arn": {
        "fetch": {
            "all_args": [
                "DashboardName"
            ],
            "docstring": "cloudwatch.get_dashboard([])",
            "method_name": "get_dashboard",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StringShape(DashboardArn)>",
        "result_key": "DashboardArn"
    },
    "cloudwatch_dashboard_body": {
        "fetch": {
            "all_args": [
                "DashboardName"
            ],
            "docstring": "cloudwatch.get_dashboard([])",
            "method_name": "get_dashboard",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StringShape(DashboardBody)>",
        "result_key": "DashboardBody"
    },
    "cloudwatch_dashboard_entries": {
        "fetch": {
            "all_args": [
                "DashboardNamePrefix"
            ],
            "docstring": "cloudwatch.list_dashboards([])",
            "method_name": "list_dashboards",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(DashboardEntries)>",
        "result_key": "DashboardEntries"
    },
    "cloudwatch_dashboard_entry": {
        "fetch": {
            "all_args": [
                "DashboardNamePrefix"
            ],
            "docstring": "cloudwatch.list_dashboards([])",
            "method_name": "list_dashboards",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(DashboardEntry)>",
        "parametrize_id_source": [
            "DashboardName"
        ],
        "result_key": "DashboardEntries"
    },
    "cloudwatch_dashboard_name": {
        "fetch": {
            "all_args": [
                "DashboardName"
            ],
            "docstring": "cloudwatch.get_dashboard([])",
            "method_name": "get_dashboard",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StringShape(DashboardName)>",
        "result_key": "DashboardName"
    },
    "cloudwatch_datapoint": {
        "fetch": {
            "all_args": [
                "Namespace",
                "MetricName",
                "Dimensions",
                "StartTime",
                "EndTime",
                "Period",
                "Statistics",
                "ExtendedStatistics",
                "Unit"
            ],
            "docstring": "cloudwatch.get_metric_statistics(['Namespace', 'MetricName', 'StartTime', 'EndTime', 'Period'])",
            "method_name": "get_metric_statistics",
            "required_args": [
                "Namespace",
                "MetricName",
                "StartTime",
                "EndTime",
                "Period"
            ],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(Datapoint)>",
        "parametrize_id_source": [
            "Unit"
        ],
        "result_key": "Datapoints"
    },
    "cloudwatch_datapoints": {
        "fetch": {
            "all_args": [
                "Namespace",
                "MetricName",
                "Dimensions",
                "StartTime",
                "EndTime",
                "Period",
                "Statistics",
                "ExtendedStatistics",
                "Unit"
            ],
            "docstring": "cloudwatch.get_metric_statistics(['Namespace', 'MetricName', 'StartTime', 'EndTime', 'Period'])",
            "method_name": "get_metric_statistics",
            "required_args": [
                "Namespace",
                "MetricName",
                "StartTime",
                "EndTime",
                "Period"
            ],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(Datapoints)>",
        "result_key": "Datapoints"
    },
    "cloudwatch_label": {
        "fetch": {
            "all_args": [
                "Namespace",
                "MetricName",
                "Dimensions",
                "StartTime",
                "EndTime",
                "Period",
                "Statistics",
                "ExtendedStatistics",
                "Unit"
            ],
            "docstring": "cloudwatch.get_metric_statistics(['Namespace', 'MetricName', 'StartTime', 'EndTime', 'Period'])",
            "method_name": "get_metric_statistics",
            "required_args": [
                "Namespace",
                "MetricName",
                "StartTime",
                "EndTime",
                "Period"
            ],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StringShape(MetricLabel)>",
        "result_key": "Label"
    },
    "cloudwatch_metric": {
        "fetch": {
            "all_args": [
                "Namespace",
                "MetricName",
                "Dimensions"
            ],
            "docstring": "cloudwatch.list_metrics([])",
            "method_name": "list_metrics",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(Metric)>",
        "parametrize_id_source": [
            "Namespace"
        ],
        "result_key": "Metrics"
    },
    "cloudwatch_metric_alarm_from_describe_alarms": {
        "fetch": {
            "all_args": [
                "AlarmNames",
                "AlarmNamePrefix",
                "StateValue",
                "ActionPrefix"
            ],
            "docstring": "cloudwatch.describe_alarms([])",
            "method_name": "describe_alarms",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(MetricAlarm)>",
        "parametrize_id_source": [
            "AlarmName"
        ],
        "result_key": "MetricAlarms"
    },
    "cloudwatch_metric_alarm_from_describe_alarms_for_metric": {
        "fetch": {
            "all_args": [
                "MetricName",
                "Namespace",
                "Statistic",
                "ExtendedStatistic",
                "Dimensions",
                "Period",
                "Unit"
            ],
            "docstring": "cloudwatch.describe_alarms_for_metric(['MetricName', 'Namespace'])",
            "method_name": "describe_alarms_for_metric",
            "required_args": [
                "MetricName",
                "Namespace"
            ],
            "service_name": "cloudwatch"
        },
        "output_shape": "<StructureShape(MetricAlarm)>",
        "parametrize_id_source": [
            "MetricName"
        ],
        "result_key": "MetricAlarms"
    },
    "cloudwatch_metric_alarms_from_describe_alarms": {
        "fetch": {
            "all_args": [
                "AlarmNames",
                "AlarmNamePrefix",
                "StateValue",
                "ActionPrefix"
            ],
            "docstring": "cloudwatch.describe_alarms([])",
            "method_name": "describe_alarms",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(MetricAlarms)>",
        "result_key": "MetricAlarms"
    },
    "cloudwatch_metric_alarms_from_describe_alarms_for_metric": {
        "fetch": {
            "all_args": [
                "MetricName",
                "Namespace",
                "Statistic",
                "ExtendedStatistic",
                "Dimensions",
                "Period",
                "Unit"
            ],
            "docstring": "cloudwatch.describe_alarms_for_metric(['MetricName', 'Namespace'])",
            "method_name": "describe_alarms_for_metric",
            "required_args": [
                "MetricName",
                "Namespace"
            ],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(MetricAlarms)>",
        "result_key": "MetricAlarms"
    },
    "cloudwatch_metrics": {
        "fetch": {
            "all_args": [
                "Namespace",
                "MetricName",
                "Dimensions"
            ],
            "docstring": "cloudwatch.list_metrics([])",
            "method_name": "list_metrics",
            "required_args": [],
            "service_name": "cloudwatch"
        },
        "output_shape": "<ListShape(Metrics)>",
        "result_key": "Metrics"
    },
    "codebuild_environment_platform": {
        "fetch": {
            "all_args": [],
            "docstring": "codebuild.list_curated_environment_images([])",
            "method_name": "list_curated_environment_images",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<StructureShape(EnvironmentPlatform)>",
        "parametrize_id_source": null,
        "result_key": "platforms"
    },
    "codebuild_ids_from_list_builds": {
        "fetch": {
            "all_args": [
                "sortOrder"
            ],
            "docstring": "codebuild.list_builds([])",
            "method_name": "list_builds",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<ListShape(BuildIds)>",
        "result_key": "ids"
    },
    "codebuild_ids_from_list_builds_for_project": {
        "fetch": {
            "all_args": [
                "projectName",
                "sortOrder"
            ],
            "docstring": "codebuild.list_builds_for_project(['projectName'])",
            "method_name": "list_builds_for_project",
            "required_args": [
                "projectName"
            ],
            "service_name": "codebuild"
        },
        "output_shape": "<ListShape(BuildIds)>",
        "result_key": "ids"
    },
    "codebuild_non_empty_string_from_list_builds": {
        "fetch": {
            "all_args": [
                "sortOrder"
            ],
            "docstring": "codebuild.list_builds([])",
            "method_name": "list_builds",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<StringShape(NonEmptyString)>",
        "parametrize_id_source": [
            "NonEmptyString"
        ],
        "result_key": "ids"
    },
    "codebuild_non_empty_string_from_list_builds_for_project": {
        "fetch": {
            "all_args": [
                "projectName",
                "sortOrder"
            ],
            "docstring": "codebuild.list_builds_for_project(['projectName'])",
            "method_name": "list_builds_for_project",
            "required_args": [
                "projectName"
            ],
            "service_name": "codebuild"
        },
        "output_shape": "<StringShape(NonEmptyString)>",
        "parametrize_id_source": [
            "NonEmptyString"
        ],
        "result_key": "ids"
    },
    "codebuild_non_empty_string_from_list_projects": {
        "fetch": {
            "all_args": [
                "sortBy",
                "sortOrder"
            ],
            "docstring": "codebuild.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<StringShape(NonEmptyString)>",
        "parametrize_id_source": [
            "NonEmptyString"
        ],
        "result_key": "projects"
    },
    "codebuild_platforms": {
        "fetch": {
            "all_args": [],
            "docstring": "codebuild.list_curated_environment_images([])",
            "method_name": "list_curated_environment_images",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<ListShape(EnvironmentPlatforms)>",
        "result_key": "platforms"
    },
    "codebuild_projects": {
        "fetch": {
            "all_args": [
                "sortBy",
                "sortOrder"
            ],
            "docstring": "codebuild.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "codebuild"
        },
        "output_shape": "<ListShape(ProjectNames)>",
        "result_key": "projects"
    },
    "codecommit_branch": {
        "fetch": {
            "all_args": [
                "repositoryName",
                "branchName"
            ],
            "docstring": "codecommit.get_branch([])",
            "method_name": "get_branch",
            "required_args": [],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(BranchInfo)>",
        "result_key": "branch"
    },
    "codecommit_branch_name": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.list_branches(['repositoryName'])",
            "method_name": "list_branches",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StringShape(BranchName)>",
        "parametrize_id_source": [
            "BranchName"
        ],
        "result_key": "branches"
    },
    "codecommit_branches": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.list_branches(['repositoryName'])",
            "method_name": "list_branches",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<ListShape(BranchNameList)>",
        "result_key": "branches"
    },
    "codecommit_commit": {
        "fetch": {
            "all_args": [
                "repositoryName",
                "commitId"
            ],
            "docstring": "codecommit.get_commit(['repositoryName', 'commitId'])",
            "method_name": "get_commit",
            "required_args": [
                "repositoryName",
                "commitId"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(Commit)>",
        "result_key": "commit"
    },
    "codecommit_configuration_id": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.get_repository_triggers(['repositoryName'])",
            "method_name": "get_repository_triggers",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StringShape(RepositoryTriggersConfigurationId)>",
        "result_key": "configurationId"
    },
    "codecommit_content": {
        "fetch": {
            "all_args": [
                "repositoryName",
                "blobId"
            ],
            "docstring": "codecommit.get_blob(['repositoryName', 'blobId'])",
            "method_name": "get_blob",
            "required_args": [
                "repositoryName",
                "blobId"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<Shape(blob)>",
        "result_key": "content"
    },
    "codecommit_difference": {
        "fetch": {
            "all_args": [
                "repositoryName",
                "beforeCommitSpecifier",
                "afterCommitSpecifier",
                "beforePath",
                "afterPath"
            ],
            "docstring": "codecommit.get_differences(['repositoryName', 'afterCommitSpecifier'])",
            "method_name": "get_differences",
            "required_args": [
                "repositoryName",
                "afterCommitSpecifier"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(Difference)>",
        "parametrize_id_source": null,
        "result_key": "differences"
    },
    "codecommit_differences": {
        "fetch": {
            "all_args": [
                "repositoryName",
                "beforeCommitSpecifier",
                "afterCommitSpecifier",
                "beforePath",
                "afterPath"
            ],
            "docstring": "codecommit.get_differences(['repositoryName', 'afterCommitSpecifier'])",
            "method_name": "get_differences",
            "required_args": [
                "repositoryName",
                "afterCommitSpecifier"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<ListShape(DifferenceList)>",
        "result_key": "differences"
    },
    "codecommit_repositories": {
        "fetch": {
            "all_args": [
                "sortBy",
                "order"
            ],
            "docstring": "codecommit.list_repositories([])",
            "method_name": "list_repositories",
            "required_args": [],
            "service_name": "codecommit"
        },
        "output_shape": "<ListShape(RepositoryNameIdPairList)>",
        "result_key": "repositories"
    },
    "codecommit_repository_metadata": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.get_repository(['repositoryName'])",
            "method_name": "get_repository",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(RepositoryMetadata)>",
        "result_key": "repositoryMetadata"
    },
    "codecommit_repository_name_id_pair": {
        "fetch": {
            "all_args": [
                "sortBy",
                "order"
            ],
            "docstring": "codecommit.list_repositories([])",
            "method_name": "list_repositories",
            "required_args": [],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(RepositoryNameIdPair)>",
        "parametrize_id_source": [
            "repositoryId"
        ],
        "result_key": "repositories"
    },
    "codecommit_repository_trigger": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.get_repository_triggers(['repositoryName'])",
            "method_name": "get_repository_triggers",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<StructureShape(RepositoryTrigger)>",
        "parametrize_id_source": [
            "destinationArn"
        ],
        "result_key": "triggers"
    },
    "codecommit_triggers": {
        "fetch": {
            "all_args": [
                "repositoryName"
            ],
            "docstring": "codecommit.get_repository_triggers(['repositoryName'])",
            "method_name": "get_repository_triggers",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "codecommit"
        },
        "output_shape": "<ListShape(RepositoryTriggersList)>",
        "result_key": "triggers"
    },
    "codedeploy_application": {
        "fetch": {
            "all_args": [
                "applicationName"
            ],
            "docstring": "codedeploy.get_application(['applicationName'])",
            "method_name": "get_application",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(ApplicationInfo)>",
        "result_key": "application"
    },
    "codedeploy_application_name_from_get_application_revision": {
        "fetch": {
            "all_args": [
                "applicationName",
                "revision"
            ],
            "docstring": "codedeploy.get_application_revision(['applicationName', 'revision'])",
            "method_name": "get_application_revision",
            "required_args": [
                "applicationName",
                "revision"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(ApplicationName)>",
        "result_key": "applicationName"
    },
    "codedeploy_application_name_from_list_applications": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_applications([])",
            "method_name": "list_applications",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(ApplicationName)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "applications"
    },
    "codedeploy_application_name_from_list_deployment_groups": {
        "fetch": {
            "all_args": [
                "applicationName"
            ],
            "docstring": "codedeploy.list_deployment_groups(['applicationName'])",
            "method_name": "list_deployment_groups",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(ApplicationName)>",
        "result_key": "applicationName"
    },
    "codedeploy_applications": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_applications([])",
            "method_name": "list_applications",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(ApplicationsList)>",
        "result_key": "applications"
    },
    "codedeploy_deployment_config_info": {
        "fetch": {
            "all_args": [
                "deploymentConfigName"
            ],
            "docstring": "codedeploy.get_deployment_config(['deploymentConfigName'])",
            "method_name": "get_deployment_config",
            "required_args": [
                "deploymentConfigName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(DeploymentConfigInfo)>",
        "result_key": "deploymentConfigInfo"
    },
    "codedeploy_deployment_config_name": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_deployment_configs([])",
            "method_name": "list_deployment_configs",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(DeploymentConfigName)>",
        "parametrize_id_source": [
            "DeploymentConfigName"
        ],
        "result_key": "deploymentConfigsList"
    },
    "codedeploy_deployment_configs_list": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_deployment_configs([])",
            "method_name": "list_deployment_configs",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(DeploymentConfigsList)>",
        "result_key": "deploymentConfigsList"
    },
    "codedeploy_deployment_group_info": {
        "fetch": {
            "all_args": [
                "applicationName",
                "deploymentGroupName"
            ],
            "docstring": "codedeploy.get_deployment_group(['applicationName', 'deploymentGroupName'])",
            "method_name": "get_deployment_group",
            "required_args": [
                "applicationName",
                "deploymentGroupName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(DeploymentGroupInfo)>",
        "result_key": "deploymentGroupInfo"
    },
    "codedeploy_deployment_group_name": {
        "fetch": {
            "all_args": [
                "applicationName"
            ],
            "docstring": "codedeploy.list_deployment_groups(['applicationName'])",
            "method_name": "list_deployment_groups",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(DeploymentGroupName)>",
        "parametrize_id_source": [
            "DeploymentGroupName"
        ],
        "result_key": "deploymentGroups"
    },
    "codedeploy_deployment_groups": {
        "fetch": {
            "all_args": [
                "applicationName"
            ],
            "docstring": "codedeploy.list_deployment_groups(['applicationName'])",
            "method_name": "list_deployment_groups",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(DeploymentGroupsList)>",
        "result_key": "deploymentGroups"
    },
    "codedeploy_deployment_id": {
        "fetch": {
            "all_args": [
                "applicationName",
                "deploymentGroupName",
                "includeOnlyStatuses",
                "createTimeRange"
            ],
            "docstring": "codedeploy.list_deployments([])",
            "method_name": "list_deployments",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(DeploymentId)>",
        "parametrize_id_source": [
            "DeploymentId"
        ],
        "result_key": "deployments"
    },
    "codedeploy_deployment_info": {
        "fetch": {
            "all_args": [
                "deploymentId"
            ],
            "docstring": "codedeploy.get_deployment(['deploymentId'])",
            "method_name": "get_deployment",
            "required_args": [
                "deploymentId"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(DeploymentInfo)>",
        "result_key": "deploymentInfo"
    },
    "codedeploy_deployments": {
        "fetch": {
            "all_args": [
                "applicationName",
                "deploymentGroupName",
                "includeOnlyStatuses",
                "createTimeRange"
            ],
            "docstring": "codedeploy.list_deployments([])",
            "method_name": "list_deployments",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(DeploymentsList)>",
        "result_key": "deployments"
    },
    "codedeploy_git_hub_account_token_name": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_git_hub_account_token_names([])",
            "method_name": "list_git_hub_account_token_names",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(GitHubAccountTokenName)>",
        "parametrize_id_source": [
            "GitHubAccountTokenName"
        ],
        "result_key": "tokenNameList"
    },
    "codedeploy_instance_id": {
        "fetch": {
            "all_args": [
                "deploymentId",
                "instanceStatusFilter",
                "instanceTypeFilter"
            ],
            "docstring": "codedeploy.list_deployment_instances(['deploymentId'])",
            "method_name": "list_deployment_instances",
            "required_args": [
                "deploymentId"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(InstanceId)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "instancesList"
    },
    "codedeploy_instance_info": {
        "fetch": {
            "all_args": [
                "instanceName"
            ],
            "docstring": "codedeploy.get_on_premises_instance(['instanceName'])",
            "method_name": "get_on_premises_instance",
            "required_args": [
                "instanceName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(InstanceInfo)>",
        "result_key": "instanceInfo"
    },
    "codedeploy_instance_name": {
        "fetch": {
            "all_args": [
                "registrationStatus",
                "tagFilters"
            ],
            "docstring": "codedeploy.list_on_premises_instances([])",
            "method_name": "list_on_premises_instances",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<StringShape(InstanceName)>",
        "parametrize_id_source": [
            "InstanceName"
        ],
        "result_key": "instanceNames"
    },
    "codedeploy_instance_names": {
        "fetch": {
            "all_args": [
                "registrationStatus",
                "tagFilters"
            ],
            "docstring": "codedeploy.list_on_premises_instances([])",
            "method_name": "list_on_premises_instances",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(InstanceNameList)>",
        "result_key": "instanceNames"
    },
    "codedeploy_instance_summary": {
        "fetch": {
            "all_args": [
                "deploymentId",
                "instanceId"
            ],
            "docstring": "codedeploy.get_deployment_instance(['deploymentId', 'instanceId'])",
            "method_name": "get_deployment_instance",
            "required_args": [
                "deploymentId",
                "instanceId"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(InstanceSummary)>",
        "result_key": "instanceSummary"
    },
    "codedeploy_instances_list": {
        "fetch": {
            "all_args": [
                "deploymentId",
                "instanceStatusFilter",
                "instanceTypeFilter"
            ],
            "docstring": "codedeploy.list_deployment_instances(['deploymentId'])",
            "method_name": "list_deployment_instances",
            "required_args": [
                "deploymentId"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(InstancesList)>",
        "result_key": "instancesList"
    },
    "codedeploy_revision": {
        "fetch": {
            "all_args": [
                "applicationName",
                "revision"
            ],
            "docstring": "codedeploy.get_application_revision(['applicationName', 'revision'])",
            "method_name": "get_application_revision",
            "required_args": [
                "applicationName",
                "revision"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(RevisionLocation)>",
        "result_key": "revision"
    },
    "codedeploy_revision_info": {
        "fetch": {
            "all_args": [
                "applicationName",
                "revision"
            ],
            "docstring": "codedeploy.get_application_revision(['applicationName', 'revision'])",
            "method_name": "get_application_revision",
            "required_args": [
                "applicationName",
                "revision"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(GenericRevisionInfo)>",
        "result_key": "revisionInfo"
    },
    "codedeploy_revision_location": {
        "fetch": {
            "all_args": [
                "applicationName",
                "sortBy",
                "sortOrder",
                "s3Bucket",
                "s3KeyPrefix",
                "deployed"
            ],
            "docstring": "codedeploy.list_application_revisions(['applicationName'])",
            "method_name": "list_application_revisions",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<StructureShape(RevisionLocation)>",
        "parametrize_id_source": null,
        "result_key": "revisions"
    },
    "codedeploy_revisions": {
        "fetch": {
            "all_args": [
                "applicationName",
                "sortBy",
                "sortOrder",
                "s3Bucket",
                "s3KeyPrefix",
                "deployed"
            ],
            "docstring": "codedeploy.list_application_revisions(['applicationName'])",
            "method_name": "list_application_revisions",
            "required_args": [
                "applicationName"
            ],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(RevisionLocationList)>",
        "result_key": "revisions"
    },
    "codedeploy_token_name_list": {
        "fetch": {
            "all_args": [],
            "docstring": "codedeploy.list_git_hub_account_token_names([])",
            "method_name": "list_git_hub_account_token_names",
            "required_args": [],
            "service_name": "codedeploy"
        },
        "output_shape": "<ListShape(GitHubAccountTokenNameList)>",
        "result_key": "tokenNameList"
    },
    "codepipeline_action_type": {
        "fetch": {
            "all_args": [
                "actionOwnerFilter"
            ],
            "docstring": "codepipeline.list_action_types([])",
            "method_name": "list_action_types",
            "required_args": [],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(ActionType)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "actionTypes"
    },
    "codepipeline_action_types": {
        "fetch": {
            "all_args": [
                "actionOwnerFilter"
            ],
            "docstring": "codepipeline.list_action_types([])",
            "method_name": "list_action_types",
            "required_args": [],
            "service_name": "codepipeline"
        },
        "output_shape": "<ListShape(ActionTypeList)>",
        "result_key": "actionTypes"
    },
    "codepipeline_created": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "created"
    },
    "codepipeline_job_details_from_get_job_details": {
        "fetch": {
            "all_args": [
                "jobId"
            ],
            "docstring": "codepipeline.get_job_details(['jobId'])",
            "method_name": "get_job_details",
            "required_args": [
                "jobId"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(JobDetails)>",
        "result_key": "jobDetails"
    },
    "codepipeline_job_details_from_get_third_party_job_details": {
        "fetch": {
            "all_args": [
                "jobId",
                "clientToken"
            ],
            "docstring": "codepipeline.get_third_party_job_details(['jobId', 'clientToken'])",
            "method_name": "get_third_party_job_details",
            "required_args": [
                "jobId",
                "clientToken"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(ThirdPartyJobDetails)>",
        "result_key": "jobDetails"
    },
    "codepipeline_metadata": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "codepipeline.get_pipeline(['name'])",
            "method_name": "get_pipeline",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(PipelineMetadata)>",
        "result_key": "metadata"
    },
    "codepipeline_pipeline": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "codepipeline.get_pipeline(['name'])",
            "method_name": "get_pipeline",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(PipelineDeclaration)>",
        "result_key": "pipeline"
    },
    "codepipeline_pipeline_execution": {
        "fetch": {
            "all_args": [
                "pipelineName",
                "pipelineExecutionId"
            ],
            "docstring": "codepipeline.get_pipeline_execution(['pipelineName', 'pipelineExecutionId'])",
            "method_name": "get_pipeline_execution",
            "required_args": [
                "pipelineName",
                "pipelineExecutionId"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(PipelineExecution)>",
        "result_key": "pipelineExecution"
    },
    "codepipeline_pipeline_execution_summaries": {
        "fetch": {
            "all_args": [
                "pipelineName"
            ],
            "docstring": "codepipeline.list_pipeline_executions(['pipelineName'])",
            "method_name": "list_pipeline_executions",
            "required_args": [
                "pipelineName"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<ListShape(PipelineExecutionSummaryList)>",
        "result_key": "pipelineExecutionSummaries"
    },
    "codepipeline_pipeline_execution_summary": {
        "fetch": {
            "all_args": [
                "pipelineName"
            ],
            "docstring": "codepipeline.list_pipeline_executions(['pipelineName'])",
            "method_name": "list_pipeline_executions",
            "required_args": [
                "pipelineName"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(PipelineExecutionSummary)>",
        "parametrize_id_source": [
            "pipelineExecutionId"
        ],
        "result_key": "pipelineExecutionSummaries"
    },
    "codepipeline_pipeline_name": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StringShape(PipelineName)>",
        "result_key": "pipelineName"
    },
    "codepipeline_pipeline_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "codepipeline.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(PipelineSummary)>",
        "parametrize_id_source": null,
        "result_key": "pipelines"
    },
    "codepipeline_pipeline_version": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<Shape(PipelineVersion)>",
        "result_key": "pipelineVersion"
    },
    "codepipeline_pipelines": {
        "fetch": {
            "all_args": [],
            "docstring": "codepipeline.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "codepipeline"
        },
        "output_shape": "<ListShape(PipelineList)>",
        "result_key": "pipelines"
    },
    "codepipeline_stage_state": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<StructureShape(StageState)>",
        "parametrize_id_source": null,
        "result_key": "stageStates"
    },
    "codepipeline_stage_states": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<ListShape(StageStateList)>",
        "result_key": "stageStates"
    },
    "codepipeline_updated": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "codepipeline.get_pipeline_state(['name'])",
            "method_name": "get_pipeline_state",
            "required_args": [
                "name"
            ],
            "service_name": "codepipeline"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "updated"
    },
    "codestar_arn": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ProjectArn)>",
        "result_key": "arn"
    },
    "codestar_client_request_token": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ClientRequestToken)>",
        "result_key": "clientRequestToken"
    },
    "codestar_created_time_stamp": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<Shape(CreatedTimestamp)>",
        "result_key": "createdTimeStamp"
    },
    "codestar_created_timestamp": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<Shape(CreatedTimestamp)>",
        "result_key": "createdTimestamp"
    },
    "codestar_description": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ProjectDescription)>",
        "result_key": "description"
    },
    "codestar_display_name": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(UserProfileDisplayName)>",
        "result_key": "displayName"
    },
    "codestar_email_address": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(Email)>",
        "result_key": "emailAddress"
    },
    "codestar_id": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ProjectId)>",
        "result_key": "id"
    },
    "codestar_last_modified_timestamp": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<Shape(LastModifiedTimestamp)>",
        "result_key": "lastModifiedTimestamp"
    },
    "codestar_name": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ProjectName)>",
        "result_key": "name"
    },
    "codestar_project_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "codestar.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "codestar"
        },
        "output_shape": "<StructureShape(ProjectSummary)>",
        "parametrize_id_source": [
            "projectId"
        ],
        "result_key": "projects"
    },
    "codestar_project_template_id": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(ProjectTemplateId)>",
        "result_key": "projectTemplateId"
    },
    "codestar_projects": {
        "fetch": {
            "all_args": [],
            "docstring": "codestar.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "codestar"
        },
        "output_shape": "<ListShape(ProjectsList)>",
        "result_key": "projects"
    },
    "codestar_resource": {
        "fetch": {
            "all_args": [
                "projectId"
            ],
            "docstring": "codestar.list_resources(['projectId'])",
            "method_name": "list_resources",
            "required_args": [
                "projectId"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StructureShape(Resource)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "resources"
    },
    "codestar_resources": {
        "fetch": {
            "all_args": [
                "projectId"
            ],
            "docstring": "codestar.list_resources(['projectId'])",
            "method_name": "list_resources",
            "required_args": [
                "projectId"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<ListShape(ResourcesResult)>",
        "result_key": "resources"
    },
    "codestar_ssh_public_key": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(SshPublicKey)>",
        "result_key": "sshPublicKey"
    },
    "codestar_stack_id": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.describe_project(['id'])",
            "method_name": "describe_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(StackId)>",
        "result_key": "stackId"
    },
    "codestar_tags": {
        "fetch": {
            "all_args": [
                "id"
            ],
            "docstring": "codestar.list_tags_for_project(['id'])",
            "method_name": "list_tags_for_project",
            "required_args": [
                "id"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<MapShape(Tags)>",
        "result_key": "tags"
    },
    "codestar_team_member": {
        "fetch": {
            "all_args": [
                "projectId"
            ],
            "docstring": "codestar.list_team_members(['projectId'])",
            "method_name": "list_team_members",
            "required_args": [
                "projectId"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StructureShape(TeamMember)>",
        "parametrize_id_source": [
            "userArn"
        ],
        "result_key": "teamMembers"
    },
    "codestar_team_members": {
        "fetch": {
            "all_args": [
                "projectId"
            ],
            "docstring": "codestar.list_team_members(['projectId'])",
            "method_name": "list_team_members",
            "required_args": [
                "projectId"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<ListShape(TeamMemberResult)>",
        "result_key": "teamMembers"
    },
    "codestar_user_arn": {
        "fetch": {
            "all_args": [
                "userArn"
            ],
            "docstring": "codestar.describe_user_profile(['userArn'])",
            "method_name": "describe_user_profile",
            "required_args": [
                "userArn"
            ],
            "service_name": "codestar"
        },
        "output_shape": "<StringShape(UserArn)>",
        "result_key": "userArn"
    },
    "codestar_user_profile_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "codestar.list_user_profiles([])",
            "method_name": "list_user_profiles",
            "required_args": [],
            "service_name": "codestar"
        },
        "output_shape": "<StructureShape(UserProfileSummary)>",
        "parametrize_id_source": [
            "userArn"
        ],
        "result_key": "userProfiles"
    },
    "codestar_user_profiles": {
        "fetch": {
            "all_args": [],
            "docstring": "codestar.list_user_profiles([])",
            "method_name": "list_user_profiles",
            "required_args": [],
            "service_name": "codestar"
        },
        "output_shape": "<ListShape(UserProfilesList)>",
        "result_key": "userProfiles"
    },
    "cognito_identity_allow_unauthenticated_identities": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<Shape(IdentityPoolUnauthenticated)>",
        "result_key": "AllowUnauthenticatedIdentities"
    },
    "cognito_identity_arn_string_from_describe_identity_pool": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(ARNString)>",
        "parametrize_id_source": [
            "ARNString"
        ],
        "result_key": "SamlProviderARNs"
    },
    "cognito_identity_cognito_identity_provider": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StructureShape(CognitoIdentityProvider)>",
        "parametrize_id_source": [
            "ProviderName"
        ],
        "result_key": "CognitoIdentityProviders"
    },
    "cognito_identity_cognito_identity_providers": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(CognitoIdentityProviderList)>",
        "result_key": "CognitoIdentityProviders"
    },
    "cognito_identity_creation_date": {
        "fetch": {
            "all_args": [
                "IdentityId"
            ],
            "docstring": "cognito-identity.describe_identity(['IdentityId'])",
            "method_name": "describe_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<Shape(DateType)>",
        "result_key": "CreationDate"
    },
    "cognito_identity_credentials": {
        "fetch": {
            "all_args": [
                "IdentityId",
                "Logins",
                "CustomRoleArn"
            ],
            "docstring": "cognito-identity.get_credentials_for_identity(['IdentityId'])",
            "method_name": "get_credentials_for_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StructureShape(Credentials)>",
        "result_key": "Credentials"
    },
    "cognito_identity_developer_provider_name": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(DeveloperProviderName)>",
        "result_key": "DeveloperProviderName"
    },
    "cognito_identity_identities": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "HideDisabled"
            ],
            "docstring": "cognito-identity.list_identities(['IdentityPoolId', 'MaxResults'])",
            "method_name": "list_identities",
            "required_args": [
                "IdentityPoolId",
                "MaxResults"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(IdentitiesList)>",
        "result_key": "Identities"
    },
    "cognito_identity_identity_description": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "HideDisabled"
            ],
            "docstring": "cognito-identity.list_identities(['IdentityPoolId', 'MaxResults'])",
            "method_name": "list_identities",
            "required_args": [
                "IdentityPoolId",
                "MaxResults"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StructureShape(IdentityDescription)>",
        "parametrize_id_source": [
            "IdentityId"
        ],
        "result_key": "Identities"
    },
    "cognito_identity_identity_id_from_describe_identity": {
        "fetch": {
            "all_args": [
                "IdentityId"
            ],
            "docstring": "cognito-identity.describe_identity(['IdentityId'])",
            "method_name": "describe_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityId)>",
        "result_key": "IdentityId"
    },
    "cognito_identity_identity_id_from_get_credentials_for_identity": {
        "fetch": {
            "all_args": [
                "IdentityId",
                "Logins",
                "CustomRoleArn"
            ],
            "docstring": "cognito-identity.get_credentials_for_identity(['IdentityId'])",
            "method_name": "get_credentials_for_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityId)>",
        "result_key": "IdentityId"
    },
    "cognito_identity_identity_id_from_get_id": {
        "fetch": {
            "all_args": [
                "AccountId",
                "IdentityPoolId",
                "Logins"
            ],
            "docstring": "cognito-identity.get_id(['IdentityPoolId'])",
            "method_name": "get_id",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityId)>",
        "result_key": "IdentityId"
    },
    "cognito_identity_identity_id_from_get_open_id_token": {
        "fetch": {
            "all_args": [
                "IdentityId",
                "Logins"
            ],
            "docstring": "cognito-identity.get_open_id_token(['IdentityId'])",
            "method_name": "get_open_id_token",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityId)>",
        "result_key": "IdentityId"
    },
    "cognito_identity_identity_id_from_get_open_id_token_for_developer_identity": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "Logins",
                "TokenDuration"
            ],
            "docstring": "cognito-identity.get_open_id_token_for_developer_identity(['IdentityPoolId', 'Logins'])",
            "method_name": "get_open_id_token_for_developer_identity",
            "required_args": [
                "IdentityPoolId",
                "Logins"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityId)>",
        "result_key": "IdentityId"
    },
    "cognito_identity_identity_pool_id_from_describe_identity_pool": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityPoolId)>",
        "result_key": "IdentityPoolId"
    },
    "cognito_identity_identity_pool_id_from_get_identity_pool_roles": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.get_identity_pool_roles(['IdentityPoolId'])",
            "method_name": "get_identity_pool_roles",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityPoolId)>",
        "result_key": "IdentityPoolId"
    },
    "cognito_identity_identity_pool_id_from_list_identities": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "HideDisabled"
            ],
            "docstring": "cognito-identity.list_identities(['IdentityPoolId', 'MaxResults'])",
            "method_name": "list_identities",
            "required_args": [
                "IdentityPoolId",
                "MaxResults"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityPoolId)>",
        "result_key": "IdentityPoolId"
    },
    "cognito_identity_identity_pool_name": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityPoolName)>",
        "result_key": "IdentityPoolName"
    },
    "cognito_identity_identity_pool_short_description": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-identity.list_identity_pools(['MaxResults'])",
            "method_name": "list_identity_pools",
            "required_args": [
                "MaxResults"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StructureShape(IdentityPoolShortDescription)>",
        "parametrize_id_source": [
            "IdentityPoolId"
        ],
        "result_key": "IdentityPools"
    },
    "cognito_identity_identity_pools": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-identity.list_identity_pools(['MaxResults'])",
            "method_name": "list_identity_pools",
            "required_args": [
                "MaxResults"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(IdentityPoolsList)>",
        "result_key": "IdentityPools"
    },
    "cognito_identity_identity_provider_name": {
        "fetch": {
            "all_args": [
                "IdentityId"
            ],
            "docstring": "cognito-identity.describe_identity(['IdentityId'])",
            "method_name": "describe_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(IdentityProviderName)>",
        "parametrize_id_source": [
            "IdentityProviderName"
        ],
        "result_key": "Logins"
    },
    "cognito_identity_last_modified_date": {
        "fetch": {
            "all_args": [
                "IdentityId"
            ],
            "docstring": "cognito-identity.describe_identity(['IdentityId'])",
            "method_name": "describe_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<Shape(DateType)>",
        "result_key": "LastModifiedDate"
    },
    "cognito_identity_logins": {
        "fetch": {
            "all_args": [
                "IdentityId"
            ],
            "docstring": "cognito-identity.describe_identity(['IdentityId'])",
            "method_name": "describe_identity",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(LoginsList)>",
        "result_key": "Logins"
    },
    "cognito_identity_open_id_connect_provider_arns": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(OIDCProviderList)>",
        "result_key": "OpenIdConnectProviderARNs"
    },
    "cognito_identity_role_mappings": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.get_identity_pool_roles(['IdentityPoolId'])",
            "method_name": "get_identity_pool_roles",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<MapShape(RoleMappingMap)>",
        "result_key": "RoleMappings"
    },
    "cognito_identity_roles": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.get_identity_pool_roles(['IdentityPoolId'])",
            "method_name": "get_identity_pool_roles",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<MapShape(RolesMap)>",
        "result_key": "Roles"
    },
    "cognito_identity_saml_provider_arns": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<ListShape(SAMLProviderList)>",
        "result_key": "SamlProviderARNs"
    },
    "cognito_identity_supported_login_providers": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-identity.describe_identity_pool(['IdentityPoolId'])",
            "method_name": "describe_identity_pool",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<MapShape(IdentityProviders)>",
        "result_key": "SupportedLoginProviders"
    },
    "cognito_identity_token_from_get_open_id_token": {
        "fetch": {
            "all_args": [
                "IdentityId",
                "Logins"
            ],
            "docstring": "cognito-identity.get_open_id_token(['IdentityId'])",
            "method_name": "get_open_id_token",
            "required_args": [
                "IdentityId"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(OIDCToken)>",
        "result_key": "Token"
    },
    "cognito_identity_token_from_get_open_id_token_for_developer_identity": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "Logins",
                "TokenDuration"
            ],
            "docstring": "cognito-identity.get_open_id_token_for_developer_identity(['IdentityPoolId', 'Logins'])",
            "method_name": "get_open_id_token_for_developer_identity",
            "required_args": [
                "IdentityPoolId",
                "Logins"
            ],
            "service_name": "cognito-identity"
        },
        "output_shape": "<StringShape(OIDCToken)>",
        "result_key": "Token"
    },
    "cognito_idp_attribute_type": {
        "fetch": {
            "all_args": [
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_user(['AccessToken'])",
            "method_name": "get_user",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(AttributeType)>",
        "parametrize_id_source": null,
        "result_key": "UserAttributes"
    },
    "cognito_idp_code_delivery_details": {
        "fetch": {
            "all_args": [
                "AccessToken",
                "AttributeName"
            ],
            "docstring": "cognito-idp.get_user_attribute_verification_code(['AccessToken', 'AttributeName'])",
            "method_name": "get_user_attribute_verification_code",
            "required_args": [
                "AccessToken",
                "AttributeName"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(CodeDeliveryDetailsType)>",
        "result_key": "CodeDeliveryDetails"
    },
    "cognito_idp_csv_header": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.get_csv_header(['UserPoolId'])",
            "method_name": "get_csv_header",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(ListOfStringTypes)>",
        "result_key": "CSVHeader"
    },
    "cognito_idp_device": {
        "fetch": {
            "all_args": [
                "DeviceKey",
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_device(['DeviceKey'])",
            "method_name": "get_device",
            "required_args": [
                "DeviceKey"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(DeviceType)>",
        "result_key": "Device"
    },
    "cognito_idp_device_type": {
        "fetch": {
            "all_args": [
                "AccessToken",
                "Limit"
            ],
            "docstring": "cognito-idp.list_devices(['AccessToken'])",
            "method_name": "list_devices",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(DeviceType)>",
        "parametrize_id_source": null,
        "result_key": "Devices"
    },
    "cognito_idp_devices": {
        "fetch": {
            "all_args": [
                "AccessToken",
                "Limit"
            ],
            "docstring": "cognito-idp.list_devices(['AccessToken'])",
            "method_name": "list_devices",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(DeviceListType)>",
        "result_key": "Devices"
    },
    "cognito_idp_domain_description": {
        "fetch": {
            "all_args": [
                "Domain"
            ],
            "docstring": "cognito-idp.describe_user_pool_domain(['Domain'])",
            "method_name": "describe_user_pool_domain",
            "required_args": [
                "Domain"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(DomainDescriptionType)>",
        "result_key": "DomainDescription"
    },
    "cognito_idp_group": {
        "fetch": {
            "all_args": [
                "GroupName",
                "UserPoolId"
            ],
            "docstring": "cognito-idp.get_group(['GroupName', 'UserPoolId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupName",
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(GroupType)>",
        "result_key": "Group"
    },
    "cognito_idp_group_type": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "Limit"
            ],
            "docstring": "cognito-idp.list_groups(['UserPoolId'])",
            "method_name": "list_groups",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(GroupType)>",
        "parametrize_id_source": [
            "UserPoolId"
        ],
        "result_key": "Groups"
    },
    "cognito_idp_groups": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "Limit"
            ],
            "docstring": "cognito-idp.list_groups(['UserPoolId'])",
            "method_name": "list_groups",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(GroupListType)>",
        "result_key": "Groups"
    },
    "cognito_idp_identity_provider_from_describe_identity_provider": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "ProviderName"
            ],
            "docstring": "cognito-idp.describe_identity_provider(['UserPoolId', 'ProviderName'])",
            "method_name": "describe_identity_provider",
            "required_args": [
                "UserPoolId",
                "ProviderName"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(IdentityProviderType)>",
        "result_key": "IdentityProvider"
    },
    "cognito_idp_identity_provider_from_get_identity_provider_by_identifier": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "IdpIdentifier"
            ],
            "docstring": "cognito-idp.get_identity_provider_by_identifier(['UserPoolId', 'IdpIdentifier'])",
            "method_name": "get_identity_provider_by_identifier",
            "required_args": [
                "UserPoolId",
                "IdpIdentifier"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(IdentityProviderType)>",
        "result_key": "IdentityProvider"
    },
    "cognito_idp_mfa_option_type": {
        "fetch": {
            "all_args": [
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_user(['AccessToken'])",
            "method_name": "get_user",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(MFAOptionType)>",
        "parametrize_id_source": null,
        "result_key": "MFAOptions"
    },
    "cognito_idp_mfa_options": {
        "fetch": {
            "all_args": [
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_user(['AccessToken'])",
            "method_name": "get_user",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(MFAOptionListType)>",
        "result_key": "MFAOptions"
    },
    "cognito_idp_provider_description": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_identity_providers(['UserPoolId'])",
            "method_name": "list_identity_providers",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(ProviderDescription)>",
        "parametrize_id_source": [
            "ProviderName"
        ],
        "result_key": "Providers"
    },
    "cognito_idp_providers": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_identity_providers(['UserPoolId'])",
            "method_name": "list_identity_providers",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(ProvidersListType)>",
        "result_key": "Providers"
    },
    "cognito_idp_resource_server": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "Identifier"
            ],
            "docstring": "cognito-idp.describe_resource_server(['UserPoolId', 'Identifier'])",
            "method_name": "describe_resource_server",
            "required_args": [
                "UserPoolId",
                "Identifier"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(ResourceServerType)>",
        "result_key": "ResourceServer"
    },
    "cognito_idp_resource_server_type": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_resource_servers(['UserPoolId'])",
            "method_name": "list_resource_servers",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(ResourceServerType)>",
        "parametrize_id_source": [
            "UserPoolId"
        ],
        "result_key": "ResourceServers"
    },
    "cognito_idp_resource_servers": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_resource_servers(['UserPoolId'])",
            "method_name": "list_resource_servers",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(ResourceServersListType)>",
        "result_key": "ResourceServers"
    },
    "cognito_idp_string_type": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.get_csv_header(['UserPoolId'])",
            "method_name": "get_csv_header",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StringShape(StringType)>",
        "parametrize_id_source": [
            "StringType"
        ],
        "result_key": "CSVHeader"
    },
    "cognito_idp_ui_customization": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "ClientId"
            ],
            "docstring": "cognito-idp.get_ui_customization(['UserPoolId'])",
            "method_name": "get_ui_customization",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UICustomizationType)>",
        "result_key": "UICustomization"
    },
    "cognito_idp_user_attributes": {
        "fetch": {
            "all_args": [
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_user(['AccessToken'])",
            "method_name": "get_user",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(AttributeListType)>",
        "result_key": "UserAttributes"
    },
    "cognito_idp_user_import_job": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "JobId"
            ],
            "docstring": "cognito-idp.describe_user_import_job(['UserPoolId', 'JobId'])",
            "method_name": "describe_user_import_job",
            "required_args": [
                "UserPoolId",
                "JobId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserImportJobType)>",
        "result_key": "UserImportJob"
    },
    "cognito_idp_user_import_job_type": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_user_import_jobs(['UserPoolId', 'MaxResults'])",
            "method_name": "list_user_import_jobs",
            "required_args": [
                "UserPoolId",
                "MaxResults"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserImportJobType)>",
        "parametrize_id_source": [
            "UserPoolId"
        ],
        "result_key": "UserImportJobs"
    },
    "cognito_idp_user_import_jobs": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_user_import_jobs(['UserPoolId', 'MaxResults'])",
            "method_name": "list_user_import_jobs",
            "required_args": [
                "UserPoolId",
                "MaxResults"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(UserImportJobsListType)>",
        "result_key": "UserImportJobs"
    },
    "cognito_idp_user_pool": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.describe_user_pool(['UserPoolId'])",
            "method_name": "describe_user_pool",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserPoolType)>",
        "result_key": "UserPool"
    },
    "cognito_idp_user_pool_client": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "ClientId"
            ],
            "docstring": "cognito-idp.describe_user_pool_client(['UserPoolId', 'ClientId'])",
            "method_name": "describe_user_pool_client",
            "required_args": [
                "UserPoolId",
                "ClientId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserPoolClientType)>",
        "result_key": "UserPoolClient"
    },
    "cognito_idp_user_pool_client_description": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_user_pool_clients(['UserPoolId'])",
            "method_name": "list_user_pool_clients",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserPoolClientDescription)>",
        "parametrize_id_source": [
            "UserPoolId"
        ],
        "result_key": "UserPoolClients"
    },
    "cognito_idp_user_pool_clients": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.list_user_pool_clients(['UserPoolId'])",
            "method_name": "list_user_pool_clients",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(UserPoolClientListType)>",
        "result_key": "UserPoolClients"
    },
    "cognito_idp_user_pool_description_type": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-idp.list_user_pools(['MaxResults'])",
            "method_name": "list_user_pools",
            "required_args": [
                "MaxResults"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserPoolDescriptionType)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "UserPools"
    },
    "cognito_idp_user_pool_id": {
        "fetch": {
            "all_args": [
                "UserPoolId"
            ],
            "docstring": "cognito-idp.get_csv_header(['UserPoolId'])",
            "method_name": "get_csv_header",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StringShape(UserPoolIdType)>",
        "result_key": "UserPoolId"
    },
    "cognito_idp_user_pools": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-idp.list_user_pools(['MaxResults'])",
            "method_name": "list_user_pools",
            "required_args": [
                "MaxResults"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(UserPoolListType)>",
        "result_key": "UserPools"
    },
    "cognito_idp_user_type_from_list_users": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "AttributesToGet",
                "Limit",
                "Filter"
            ],
            "docstring": "cognito-idp.list_users(['UserPoolId'])",
            "method_name": "list_users",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserType)>",
        "parametrize_id_source": [
            "Attributes"
        ],
        "result_key": "Users"
    },
    "cognito_idp_user_type_from_list_users_in_group": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "GroupName",
                "Limit"
            ],
            "docstring": "cognito-idp.list_users_in_group(['UserPoolId', 'GroupName'])",
            "method_name": "list_users_in_group",
            "required_args": [
                "UserPoolId",
                "GroupName"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StructureShape(UserType)>",
        "parametrize_id_source": null,
        "result_key": "Users"
    },
    "cognito_idp_username": {
        "fetch": {
            "all_args": [
                "AccessToken"
            ],
            "docstring": "cognito-idp.get_user(['AccessToken'])",
            "method_name": "get_user",
            "required_args": [
                "AccessToken"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<StringShape(UsernameType)>",
        "result_key": "Username"
    },
    "cognito_idp_users_from_list_users": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "AttributesToGet",
                "Limit",
                "Filter"
            ],
            "docstring": "cognito-idp.list_users(['UserPoolId'])",
            "method_name": "list_users",
            "required_args": [
                "UserPoolId"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(UsersListType)>",
        "result_key": "Users"
    },
    "cognito_idp_users_from_list_users_in_group": {
        "fetch": {
            "all_args": [
                "UserPoolId",
                "GroupName",
                "Limit"
            ],
            "docstring": "cognito-idp.list_users_in_group(['UserPoolId', 'GroupName'])",
            "method_name": "list_users_in_group",
            "required_args": [
                "UserPoolId",
                "GroupName"
            ],
            "service_name": "cognito-idp"
        },
        "output_shape": "<ListShape(UsersListType)>",
        "result_key": "Users"
    },
    "cognito_sync_bulk_publish_complete_time": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_bulk_publish_details(['IdentityPoolId'])",
            "method_name": "get_bulk_publish_details",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "BulkPublishCompleteTime"
    },
    "cognito_sync_bulk_publish_start_time": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_bulk_publish_details(['IdentityPoolId'])",
            "method_name": "get_bulk_publish_details",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "BulkPublishStartTime"
    },
    "cognito_sync_bulk_publish_status": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_bulk_publish_details(['IdentityPoolId'])",
            "method_name": "get_bulk_publish_details",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(BulkPublishStatus)>",
        "result_key": "BulkPublishStatus"
    },
    "cognito_sync_cognito_streams": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_identity_pool_configuration(['IdentityPoolId'])",
            "method_name": "get_identity_pool_configuration",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(CognitoStreams)>",
        "result_key": "CognitoStreams"
    },
    "cognito_sync_count_from_list_datasets": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId"
            ],
            "docstring": "cognito-sync.list_datasets(['IdentityId', 'IdentityPoolId'])",
            "method_name": "list_datasets",
            "required_args": [
                "IdentityId",
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "Count"
    },
    "cognito_sync_count_from_list_identity_pool_usage": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-sync.list_identity_pool_usage([])",
            "method_name": "list_identity_pool_usage",
            "required_args": [],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "Count"
    },
    "cognito_sync_count_from_list_records": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "Count"
    },
    "cognito_sync_dataset_deleted_after_requested_sync_count": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "DatasetDeletedAfterRequestedSyncCount"
    },
    "cognito_sync_dataset_exists": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "DatasetExists"
    },
    "cognito_sync_dataset_from_describe_dataset": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "docstring": "cognito-sync.describe_dataset(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "describe_dataset",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(Dataset)>",
        "result_key": "Dataset"
    },
    "cognito_sync_dataset_from_list_datasets": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId"
            ],
            "docstring": "cognito-sync.list_datasets(['IdentityId', 'IdentityPoolId'])",
            "method_name": "list_datasets",
            "required_args": [
                "IdentityId",
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(Dataset)>",
        "parametrize_id_source": [
            "IdentityId"
        ],
        "result_key": "Datasets"
    },
    "cognito_sync_dataset_sync_count": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "DatasetSyncCount"
    },
    "cognito_sync_datasets": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId"
            ],
            "docstring": "cognito-sync.list_datasets(['IdentityId', 'IdentityPoolId'])",
            "method_name": "list_datasets",
            "required_args": [
                "IdentityId",
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<ListShape(DatasetList)>",
        "result_key": "Datasets"
    },
    "cognito_sync_events": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_cognito_events(['IdentityPoolId'])",
            "method_name": "get_cognito_events",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<MapShape(Events)>",
        "result_key": "Events"
    },
    "cognito_sync_failure_message": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_bulk_publish_details(['IdentityPoolId'])",
            "method_name": "get_bulk_publish_details",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "FailureMessage"
    },
    "cognito_sync_identity_pool_id_from_get_bulk_publish_details": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_bulk_publish_details(['IdentityPoolId'])",
            "method_name": "get_bulk_publish_details",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(IdentityPoolId)>",
        "result_key": "IdentityPoolId"
    },
    "cognito_sync_identity_pool_id_from_get_identity_pool_configuration": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_identity_pool_configuration(['IdentityPoolId'])",
            "method_name": "get_identity_pool_configuration",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(IdentityPoolId)>",
        "result_key": "IdentityPoolId"
    },
    "cognito_sync_identity_pool_usage_from_describe_identity_pool_usage": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.describe_identity_pool_usage(['IdentityPoolId'])",
            "method_name": "describe_identity_pool_usage",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(IdentityPoolUsage)>",
        "result_key": "IdentityPoolUsage"
    },
    "cognito_sync_identity_pool_usage_from_list_identity_pool_usage": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-sync.list_identity_pool_usage([])",
            "method_name": "list_identity_pool_usage",
            "required_args": [],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(IdentityPoolUsage)>",
        "parametrize_id_source": [
            "IdentityPoolId"
        ],
        "result_key": "IdentityPoolUsages"
    },
    "cognito_sync_identity_pool_usages": {
        "fetch": {
            "all_args": [],
            "docstring": "cognito-sync.list_identity_pool_usage([])",
            "method_name": "list_identity_pool_usage",
            "required_args": [],
            "service_name": "cognito-sync"
        },
        "output_shape": "<ListShape(IdentityPoolUsageList)>",
        "result_key": "IdentityPoolUsages"
    },
    "cognito_sync_identity_usage": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId"
            ],
            "docstring": "cognito-sync.describe_identity_usage(['IdentityPoolId', 'IdentityId'])",
            "method_name": "describe_identity_usage",
            "required_args": [
                "IdentityPoolId",
                "IdentityId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(IdentityUsage)>",
        "result_key": "IdentityUsage"
    },
    "cognito_sync_last_modified_by": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LastModifiedBy"
    },
    "cognito_sync_merged_dataset_names": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<ListShape(MergedDatasetNameList)>",
        "result_key": "MergedDatasetNames"
    },
    "cognito_sync_push_sync": {
        "fetch": {
            "all_args": [
                "IdentityPoolId"
            ],
            "docstring": "cognito-sync.get_identity_pool_configuration(['IdentityPoolId'])",
            "method_name": "get_identity_pool_configuration",
            "required_args": [
                "IdentityPoolId"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(PushSync)>",
        "result_key": "PushSync"
    },
    "cognito_sync_record": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StructureShape(Record)>",
        "parametrize_id_source": [
            "SyncCount"
        ],
        "result_key": "Records"
    },
    "cognito_sync_records": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<ListShape(RecordList)>",
        "result_key": "Records"
    },
    "cognito_sync_string": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "MergedDatasetNames"
    },
    "cognito_sync_sync_session_token": {
        "fetch": {
            "all_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName",
                "LastSyncCount",
                "SyncSessionToken"
            ],
            "docstring": "cognito-sync.list_records(['IdentityPoolId', 'IdentityId', 'DatasetName'])",
            "method_name": "list_records",
            "required_args": [
                "IdentityPoolId",
                "IdentityId",
                "DatasetName"
            ],
            "service_name": "cognito-sync"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SyncSessionToken"
    },
    "config_compliance_by_config_rule": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames",
                "ComplianceTypes"
            ],
            "docstring": "config.describe_compliance_by_config_rule([])",
            "method_name": "describe_compliance_by_config_rule",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ComplianceByConfigRule)>",
        "parametrize_id_source": [
            "ConfigRuleName"
        ],
        "result_key": "ComplianceByConfigRules"
    },
    "config_compliance_by_config_rules": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames",
                "ComplianceTypes"
            ],
            "docstring": "config.describe_compliance_by_config_rule([])",
            "method_name": "describe_compliance_by_config_rule",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ComplianceByConfigRules)>",
        "result_key": "ComplianceByConfigRules"
    },
    "config_compliance_by_resource": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId",
                "ComplianceTypes",
                "Limit"
            ],
            "docstring": "config.describe_compliance_by_resource([])",
            "method_name": "describe_compliance_by_resource",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ComplianceByResource)>",
        "parametrize_id_source": [
            "ResourceType"
        ],
        "result_key": "ComplianceByResources"
    },
    "config_compliance_by_resources": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId",
                "ComplianceTypes",
                "Limit"
            ],
            "docstring": "config.describe_compliance_by_resource([])",
            "method_name": "describe_compliance_by_resource",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ComplianceByResources)>",
        "result_key": "ComplianceByResources"
    },
    "config_compliance_summaries_by_resource_type": {
        "fetch": {
            "all_args": [
                "ResourceTypes"
            ],
            "docstring": "config.get_compliance_summary_by_resource_type([])",
            "method_name": "get_compliance_summary_by_resource_type",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ComplianceSummariesByResourceType)>",
        "result_key": "ComplianceSummariesByResourceType"
    },
    "config_compliance_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "config.get_compliance_summary_by_config_rule([])",
            "method_name": "get_compliance_summary_by_config_rule",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ComplianceSummary)>",
        "result_key": "ComplianceSummary"
    },
    "config_compliance_summary_by_resource_type": {
        "fetch": {
            "all_args": [
                "ResourceTypes"
            ],
            "docstring": "config.get_compliance_summary_by_resource_type([])",
            "method_name": "get_compliance_summary_by_resource_type",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ComplianceSummaryByResourceType)>",
        "parametrize_id_source": [
            "ResourceType"
        ],
        "result_key": "ComplianceSummariesByResourceType"
    },
    "config_config_rule": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames"
            ],
            "docstring": "config.describe_config_rules([])",
            "method_name": "describe_config_rules",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ConfigRule)>",
        "parametrize_id_source": [
            "ConfigRuleName"
        ],
        "result_key": "ConfigRules"
    },
    "config_config_rule_evaluation_status": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames",
                "Limit"
            ],
            "docstring": "config.describe_config_rule_evaluation_status([])",
            "method_name": "describe_config_rule_evaluation_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ConfigRuleEvaluationStatus)>",
        "parametrize_id_source": [
            "ConfigRuleName"
        ],
        "result_key": "ConfigRulesEvaluationStatus"
    },
    "config_config_rules": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames"
            ],
            "docstring": "config.describe_config_rules([])",
            "method_name": "describe_config_rules",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ConfigRules)>",
        "result_key": "ConfigRules"
    },
    "config_config_rules_evaluation_status": {
        "fetch": {
            "all_args": [
                "ConfigRuleNames",
                "Limit"
            ],
            "docstring": "config.describe_config_rule_evaluation_status([])",
            "method_name": "describe_config_rule_evaluation_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ConfigRuleEvaluationStatusList)>",
        "result_key": "ConfigRulesEvaluationStatus"
    },
    "config_configuration_item": {
        "fetch": {
            "all_args": [
                "resourceType",
                "resourceId",
                "laterTime",
                "earlierTime",
                "chronologicalOrder",
                "limit"
            ],
            "docstring": "config.get_resource_config_history(['resourceType', 'resourceId'])",
            "method_name": "get_resource_config_history",
            "required_args": [
                "resourceType",
                "resourceId"
            ],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ConfigurationItem)>",
        "parametrize_id_source": [
            "resourceType"
        ],
        "result_key": "configurationItems"
    },
    "config_configuration_items": {
        "fetch": {
            "all_args": [
                "resourceType",
                "resourceId",
                "laterTime",
                "earlierTime",
                "chronologicalOrder",
                "limit"
            ],
            "docstring": "config.get_resource_config_history(['resourceType', 'resourceId'])",
            "method_name": "get_resource_config_history",
            "required_args": [
                "resourceType",
                "resourceId"
            ],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ConfigurationItemList)>",
        "result_key": "configurationItems"
    },
    "config_configuration_recorder": {
        "fetch": {
            "all_args": [
                "ConfigurationRecorderNames"
            ],
            "docstring": "config.describe_configuration_recorders([])",
            "method_name": "describe_configuration_recorders",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ConfigurationRecorder)>",
        "parametrize_id_source": [
            "roleARN"
        ],
        "result_key": "ConfigurationRecorders"
    },
    "config_configuration_recorder_status": {
        "fetch": {
            "all_args": [
                "ConfigurationRecorderNames"
            ],
            "docstring": "config.describe_configuration_recorder_status([])",
            "method_name": "describe_configuration_recorder_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ConfigurationRecorderStatus)>",
        "parametrize_id_source": null,
        "result_key": "ConfigurationRecordersStatus"
    },
    "config_configuration_recorders": {
        "fetch": {
            "all_args": [
                "ConfigurationRecorderNames"
            ],
            "docstring": "config.describe_configuration_recorders([])",
            "method_name": "describe_configuration_recorders",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ConfigurationRecorderList)>",
        "result_key": "ConfigurationRecorders"
    },
    "config_configuration_recorders_status": {
        "fetch": {
            "all_args": [
                "ConfigurationRecorderNames"
            ],
            "docstring": "config.describe_configuration_recorder_status([])",
            "method_name": "describe_configuration_recorder_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ConfigurationRecorderStatusList)>",
        "result_key": "ConfigurationRecordersStatus"
    },
    "config_delivery_channel": {
        "fetch": {
            "all_args": [
                "DeliveryChannelNames"
            ],
            "docstring": "config.describe_delivery_channels([])",
            "method_name": "describe_delivery_channels",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(DeliveryChannel)>",
        "parametrize_id_source": [
            "snsTopicARN"
        ],
        "result_key": "DeliveryChannels"
    },
    "config_delivery_channel_status": {
        "fetch": {
            "all_args": [
                "DeliveryChannelNames"
            ],
            "docstring": "config.describe_delivery_channel_status([])",
            "method_name": "describe_delivery_channel_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(DeliveryChannelStatus)>",
        "parametrize_id_source": null,
        "result_key": "DeliveryChannelsStatus"
    },
    "config_delivery_channels": {
        "fetch": {
            "all_args": [
                "DeliveryChannelNames"
            ],
            "docstring": "config.describe_delivery_channels([])",
            "method_name": "describe_delivery_channels",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(DeliveryChannelList)>",
        "result_key": "DeliveryChannels"
    },
    "config_delivery_channels_status": {
        "fetch": {
            "all_args": [
                "DeliveryChannelNames"
            ],
            "docstring": "config.describe_delivery_channel_status([])",
            "method_name": "describe_delivery_channel_status",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(DeliveryChannelStatusList)>",
        "result_key": "DeliveryChannelsStatus"
    },
    "config_evaluation_result_from_get_compliance_details_by_config_rule": {
        "fetch": {
            "all_args": [
                "ConfigRuleName",
                "ComplianceTypes",
                "Limit"
            ],
            "docstring": "config.get_compliance_details_by_config_rule(['ConfigRuleName'])",
            "method_name": "get_compliance_details_by_config_rule",
            "required_args": [
                "ConfigRuleName"
            ],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(EvaluationResult)>",
        "parametrize_id_source": [
            "ComplianceType"
        ],
        "result_key": "EvaluationResults"
    },
    "config_evaluation_result_from_get_compliance_details_by_resource": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId",
                "ComplianceTypes"
            ],
            "docstring": "config.get_compliance_details_by_resource(['ResourceType', 'ResourceId'])",
            "method_name": "get_compliance_details_by_resource",
            "required_args": [
                "ResourceType",
                "ResourceId"
            ],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(EvaluationResult)>",
        "parametrize_id_source": [
            "ComplianceType"
        ],
        "result_key": "EvaluationResults"
    },
    "config_evaluation_results_from_get_compliance_details_by_config_rule": {
        "fetch": {
            "all_args": [
                "ConfigRuleName",
                "ComplianceTypes",
                "Limit"
            ],
            "docstring": "config.get_compliance_details_by_config_rule(['ConfigRuleName'])",
            "method_name": "get_compliance_details_by_config_rule",
            "required_args": [
                "ConfigRuleName"
            ],
            "service_name": "config"
        },
        "output_shape": "<ListShape(EvaluationResults)>",
        "result_key": "EvaluationResults"
    },
    "config_evaluation_results_from_get_compliance_details_by_resource": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId",
                "ComplianceTypes"
            ],
            "docstring": "config.get_compliance_details_by_resource(['ResourceType', 'ResourceId'])",
            "method_name": "get_compliance_details_by_resource",
            "required_args": [
                "ResourceType",
                "ResourceId"
            ],
            "service_name": "config"
        },
        "output_shape": "<ListShape(EvaluationResults)>",
        "result_key": "EvaluationResults"
    },
    "config_resource_count": {
        "fetch": {
            "all_args": [
                "resourceTypes",
                "limit"
            ],
            "docstring": "config.get_discovered_resource_counts([])",
            "method_name": "get_discovered_resource_counts",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ResourceCount)>",
        "parametrize_id_source": [
            "resourceType"
        ],
        "result_key": "resourceCounts"
    },
    "config_resource_counts": {
        "fetch": {
            "all_args": [
                "resourceTypes",
                "limit"
            ],
            "docstring": "config.get_discovered_resource_counts([])",
            "method_name": "get_discovered_resource_counts",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ResourceCounts)>",
        "result_key": "resourceCounts"
    },
    "config_resource_identifier": {
        "fetch": {
            "all_args": [
                "resourceType",
                "resourceIds",
                "resourceName",
                "limit",
                "includeDeletedResources"
            ],
            "docstring": "config.list_discovered_resources(['resourceType'])",
            "method_name": "list_discovered_resources",
            "required_args": [
                "resourceType"
            ],
            "service_name": "config"
        },
        "output_shape": "<StructureShape(ResourceIdentifier)>",
        "parametrize_id_source": [
            "resourceType"
        ],
        "result_key": "resourceIdentifiers"
    },
    "config_resource_identifiers": {
        "fetch": {
            "all_args": [
                "resourceType",
                "resourceIds",
                "resourceName",
                "limit",
                "includeDeletedResources"
            ],
            "docstring": "config.list_discovered_resources(['resourceType'])",
            "method_name": "list_discovered_resources",
            "required_args": [
                "resourceType"
            ],
            "service_name": "config"
        },
        "output_shape": "<ListShape(ResourceIdentifierList)>",
        "result_key": "resourceIdentifiers"
    },
    "config_total_discovered_resources": {
        "fetch": {
            "all_args": [
                "resourceTypes",
                "limit"
            ],
            "docstring": "config.get_discovered_resource_counts([])",
            "method_name": "get_discovered_resource_counts",
            "required_args": [],
            "service_name": "config"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "totalDiscoveredResources"
    },
    "cur_report_definition": {
        "fetch": {
            "all_args": [],
            "docstring": "cur.describe_report_definitions([])",
            "method_name": "describe_report_definitions",
            "required_args": [],
            "service_name": "cur"
        },
        "output_shape": "<StructureShape(ReportDefinition)>",
        "parametrize_id_source": null,
        "result_key": "ReportDefinitions"
    },
    "cur_report_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "cur.describe_report_definitions([])",
            "method_name": "describe_report_definitions",
            "required_args": [],
            "service_name": "cur"
        },
        "output_shape": "<ListShape(ReportDefinitionList)>",
        "result_key": "ReportDefinitions"
    },
    "datapipeline_parameter_object": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(ParameterObject)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "parameterObjects"
    },
    "datapipeline_parameter_objects": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(ParameterObjectList)>",
        "result_key": "parameterObjects"
    },
    "datapipeline_parameter_value": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(ParameterValue)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "parameterValues"
    },
    "datapipeline_parameter_values": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(ParameterValueList)>",
        "result_key": "parameterValues"
    },
    "datapipeline_pipeline_description": {
        "fetch": {
            "all_args": [
                "pipelineIds"
            ],
            "docstring": "datapipeline.describe_pipelines(['pipelineIds'])",
            "method_name": "describe_pipelines",
            "required_args": [
                "pipelineIds"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(PipelineDescription)>",
        "parametrize_id_source": [
            "pipelineId"
        ],
        "result_key": "pipelineDescriptionList"
    },
    "datapipeline_pipeline_description_list": {
        "fetch": {
            "all_args": [
                "pipelineIds"
            ],
            "docstring": "datapipeline.describe_pipelines(['pipelineIds'])",
            "method_name": "describe_pipelines",
            "required_args": [
                "pipelineIds"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(PipelineDescriptionList)>",
        "result_key": "pipelineDescriptionList"
    },
    "datapipeline_pipeline_id_list": {
        "fetch": {
            "all_args": [],
            "docstring": "datapipeline.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(pipelineList)>",
        "result_key": "pipelineIdList"
    },
    "datapipeline_pipeline_id_name": {
        "fetch": {
            "all_args": [],
            "docstring": "datapipeline.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(PipelineIdName)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "pipelineIdList"
    },
    "datapipeline_pipeline_object_from_describe_objects": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "objectIds",
                "evaluateExpressions"
            ],
            "docstring": "datapipeline.describe_objects(['pipelineId', 'objectIds'])",
            "method_name": "describe_objects",
            "required_args": [
                "pipelineId",
                "objectIds"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(PipelineObject)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "pipelineObjects"
    },
    "datapipeline_pipeline_object_from_get_pipeline_definition": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<StructureShape(PipelineObject)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "pipelineObjects"
    },
    "datapipeline_pipeline_objects_from_describe_objects": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "objectIds",
                "evaluateExpressions"
            ],
            "docstring": "datapipeline.describe_objects(['pipelineId', 'objectIds'])",
            "method_name": "describe_objects",
            "required_args": [
                "pipelineId",
                "objectIds"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(PipelineObjectList)>",
        "result_key": "pipelineObjects"
    },
    "datapipeline_pipeline_objects_from_get_pipeline_definition": {
        "fetch": {
            "all_args": [
                "pipelineId",
                "version"
            ],
            "docstring": "datapipeline.get_pipeline_definition(['pipelineId'])",
            "method_name": "get_pipeline_definition",
            "required_args": [
                "pipelineId"
            ],
            "service_name": "datapipeline"
        },
        "output_shape": "<ListShape(PipelineObjectList)>",
        "result_key": "pipelineObjects"
    },
    "dax_cluster": {
        "fetch": {
            "all_args": [
                "ClusterNames"
            ],
            "docstring": "dax.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(Cluster)>",
        "parametrize_id_source": [
            "ClusterName"
        ],
        "result_key": "Clusters"
    },
    "dax_clusters": {
        "fetch": {
            "all_args": [
                "ClusterNames"
            ],
            "docstring": "dax.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(ClusterList)>",
        "result_key": "Clusters"
    },
    "dax_event": {
        "fetch": {
            "all_args": [
                "SourceName",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "dax.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "SourceName"
        ],
        "result_key": "Events"
    },
    "dax_events": {
        "fetch": {
            "all_args": [
                "SourceName",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "dax.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "dax_parameter_from_describe_default_parameters": {
        "fetch": {
            "all_args": [],
            "docstring": "dax.describe_default_parameters([])",
            "method_name": "describe_default_parameters",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": null,
        "result_key": "Parameters"
    },
    "dax_parameter_from_describe_parameters": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "Source"
            ],
            "docstring": "dax.describe_parameters(['ParameterGroupName'])",
            "method_name": "describe_parameters",
            "required_args": [
                "ParameterGroupName"
            ],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "Parameters"
    },
    "dax_parameter_group": {
        "fetch": {
            "all_args": [
                "ParameterGroupNames"
            ],
            "docstring": "dax.describe_parameter_groups([])",
            "method_name": "describe_parameter_groups",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(ParameterGroup)>",
        "parametrize_id_source": [
            "ParameterGroupName"
        ],
        "result_key": "ParameterGroups"
    },
    "dax_parameter_groups": {
        "fetch": {
            "all_args": [
                "ParameterGroupNames"
            ],
            "docstring": "dax.describe_parameter_groups([])",
            "method_name": "describe_parameter_groups",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(ParameterGroupList)>",
        "result_key": "ParameterGroups"
    },
    "dax_parameters_from_describe_default_parameters": {
        "fetch": {
            "all_args": [],
            "docstring": "dax.describe_default_parameters([])",
            "method_name": "describe_default_parameters",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(ParameterList)>",
        "result_key": "Parameters"
    },
    "dax_parameters_from_describe_parameters": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "Source"
            ],
            "docstring": "dax.describe_parameters(['ParameterGroupName'])",
            "method_name": "describe_parameters",
            "required_args": [
                "ParameterGroupName"
            ],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(ParameterList)>",
        "result_key": "Parameters"
    },
    "dax_subnet_group": {
        "fetch": {
            "all_args": [
                "SubnetGroupNames"
            ],
            "docstring": "dax.describe_subnet_groups([])",
            "method_name": "describe_subnet_groups",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(SubnetGroup)>",
        "parametrize_id_source": [
            "SubnetGroupName"
        ],
        "result_key": "SubnetGroups"
    },
    "dax_subnet_groups": {
        "fetch": {
            "all_args": [
                "SubnetGroupNames"
            ],
            "docstring": "dax.describe_subnet_groups([])",
            "method_name": "describe_subnet_groups",
            "required_args": [],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(SubnetGroupList)>",
        "result_key": "SubnetGroups"
    },
    "dax_tag": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "dax.list_tags(['ResourceName'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "dax"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "dax_tags": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "dax.list_tags(['ResourceName'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "dax"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "devicefarm_account_settings": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.get_account_settings([])",
            "method_name": "get_account_settings",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(AccountSettings)>",
        "result_key": "accountSettings"
    },
    "devicefarm_artifact": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_artifacts(['arn', 'type'])",
            "method_name": "list_artifacts",
            "required_args": [
                "arn",
                "type"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Artifact)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "artifacts"
    },
    "devicefarm_artifacts": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_artifacts(['arn', 'type'])",
            "method_name": "list_artifacts",
            "required_args": [
                "arn",
                "type"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Artifacts)>",
        "result_key": "artifacts"
    },
    "devicefarm_compatible_devices": {
        "fetch": {
            "all_args": [
                "devicePoolArn",
                "appArn",
                "testType",
                "test"
            ],
            "docstring": "devicefarm.get_device_pool_compatibility(['devicePoolArn'])",
            "method_name": "get_device_pool_compatibility",
            "required_args": [
                "devicePoolArn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(DevicePoolCompatibilityResults)>",
        "result_key": "compatibleDevices"
    },
    "devicefarm_current": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.get_offering_status([])",
            "method_name": "get_offering_status",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<MapShape(OfferingStatusMap)>",
        "result_key": "current"
    },
    "devicefarm_device_from_get_device": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_device(['arn'])",
            "method_name": "get_device",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Device)>",
        "result_key": "device"
    },
    "devicefarm_device_from_list_devices": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_devices([])",
            "method_name": "list_devices",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Device)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "devices"
    },
    "devicefarm_device_pool_compatibility_result_from_get_device_pool_compatibility": {
        "fetch": {
            "all_args": [
                "devicePoolArn",
                "appArn",
                "testType",
                "test"
            ],
            "docstring": "devicefarm.get_device_pool_compatibility(['devicePoolArn'])",
            "method_name": "get_device_pool_compatibility",
            "required_args": [
                "devicePoolArn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(DevicePoolCompatibilityResult)>",
        "parametrize_id_source": [
            "device"
        ],
        "result_key": "incompatibleDevices"
    },
    "devicefarm_device_pool_from_get_device_pool": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_device_pool(['arn'])",
            "method_name": "get_device_pool",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(DevicePool)>",
        "result_key": "devicePool"
    },
    "devicefarm_device_pool_from_list_device_pools": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_device_pools(['arn'])",
            "method_name": "list_device_pools",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(DevicePool)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "devicePools"
    },
    "devicefarm_device_pools": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_device_pools(['arn'])",
            "method_name": "list_device_pools",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(DevicePools)>",
        "result_key": "devicePools"
    },
    "devicefarm_devices": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_devices([])",
            "method_name": "list_devices",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Devices)>",
        "result_key": "devices"
    },
    "devicefarm_incompatible_devices": {
        "fetch": {
            "all_args": [
                "devicePoolArn",
                "appArn",
                "testType",
                "test"
            ],
            "docstring": "devicefarm.get_device_pool_compatibility(['devicePoolArn'])",
            "method_name": "get_device_pool_compatibility",
            "required_args": [
                "devicePoolArn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(DevicePoolCompatibilityResults)>",
        "result_key": "incompatibleDevices"
    },
    "devicefarm_job_from_get_job": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_job(['arn'])",
            "method_name": "get_job",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Job)>",
        "result_key": "job"
    },
    "devicefarm_job_from_list_jobs": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_jobs(['arn'])",
            "method_name": "list_jobs",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Job)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "jobs"
    },
    "devicefarm_jobs": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_jobs(['arn'])",
            "method_name": "list_jobs",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Jobs)>",
        "result_key": "jobs"
    },
    "devicefarm_network_profile_from_get_network_profile": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_network_profile(['arn'])",
            "method_name": "get_network_profile",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(NetworkProfile)>",
        "result_key": "networkProfile"
    },
    "devicefarm_network_profile_from_list_network_profiles": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_network_profiles(['arn'])",
            "method_name": "list_network_profiles",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(NetworkProfile)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "networkProfiles"
    },
    "devicefarm_network_profiles": {
        "fetch": {
            "all_args": [
                "arn",
                "type"
            ],
            "docstring": "devicefarm.list_network_profiles(['arn'])",
            "method_name": "list_network_profiles",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(NetworkProfiles)>",
        "result_key": "networkProfiles"
    },
    "devicefarm_next_period": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.get_offering_status([])",
            "method_name": "get_offering_status",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<MapShape(OfferingStatusMap)>",
        "result_key": "nextPeriod"
    },
    "devicefarm_offering": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offerings([])",
            "method_name": "list_offerings",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Offering)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "offerings"
    },
    "devicefarm_offering_promotion": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offering_promotions([])",
            "method_name": "list_offering_promotions",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(OfferingPromotion)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "offeringPromotions"
    },
    "devicefarm_offering_promotions": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offering_promotions([])",
            "method_name": "list_offering_promotions",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(OfferingPromotions)>",
        "result_key": "offeringPromotions"
    },
    "devicefarm_offering_transaction": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offering_transactions([])",
            "method_name": "list_offering_transactions",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(OfferingTransaction)>",
        "parametrize_id_source": [
            "transactionId"
        ],
        "result_key": "offeringTransactions"
    },
    "devicefarm_offering_transactions": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offering_transactions([])",
            "method_name": "list_offering_transactions",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(OfferingTransactions)>",
        "result_key": "offeringTransactions"
    },
    "devicefarm_offerings": {
        "fetch": {
            "all_args": [],
            "docstring": "devicefarm.list_offerings([])",
            "method_name": "list_offerings",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Offerings)>",
        "result_key": "offerings"
    },
    "devicefarm_project_from_get_project": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_project(['arn'])",
            "method_name": "get_project",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Project)>",
        "result_key": "project"
    },
    "devicefarm_project_from_list_projects": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Project)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "projects"
    },
    "devicefarm_projects": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Projects)>",
        "result_key": "projects"
    },
    "devicefarm_remote_access_session_from_get_remote_access_session": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_remote_access_session(['arn'])",
            "method_name": "get_remote_access_session",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(RemoteAccessSession)>",
        "result_key": "remoteAccessSession"
    },
    "devicefarm_remote_access_session_from_list_remote_access_sessions": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_remote_access_sessions(['arn'])",
            "method_name": "list_remote_access_sessions",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(RemoteAccessSession)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "remoteAccessSessions"
    },
    "devicefarm_remote_access_sessions": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_remote_access_sessions(['arn'])",
            "method_name": "list_remote_access_sessions",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(RemoteAccessSessions)>",
        "result_key": "remoteAccessSessions"
    },
    "devicefarm_run_from_get_run": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_run(['arn'])",
            "method_name": "get_run",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Run)>",
        "result_key": "run"
    },
    "devicefarm_run_from_list_runs": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_runs(['arn'])",
            "method_name": "list_runs",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Run)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "runs"
    },
    "devicefarm_runs": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_runs(['arn'])",
            "method_name": "list_runs",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Runs)>",
        "result_key": "runs"
    },
    "devicefarm_sample": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_samples(['arn'])",
            "method_name": "list_samples",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Sample)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "samples"
    },
    "devicefarm_samples": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_samples(['arn'])",
            "method_name": "list_samples",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Samples)>",
        "result_key": "samples"
    },
    "devicefarm_suite_from_get_suite": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_suite(['arn'])",
            "method_name": "get_suite",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Suite)>",
        "result_key": "suite"
    },
    "devicefarm_suite_from_list_suites": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_suites(['arn'])",
            "method_name": "list_suites",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Suite)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "suites"
    },
    "devicefarm_suites": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_suites(['arn'])",
            "method_name": "list_suites",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Suites)>",
        "result_key": "suites"
    },
    "devicefarm_test_from_get_test": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_test(['arn'])",
            "method_name": "get_test",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Test)>",
        "result_key": "test"
    },
    "devicefarm_test_from_list_tests": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_tests(['arn'])",
            "method_name": "list_tests",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Test)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "tests"
    },
    "devicefarm_tests": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_tests(['arn'])",
            "method_name": "list_tests",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Tests)>",
        "result_key": "tests"
    },
    "devicefarm_unique_problems": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_unique_problems(['arn'])",
            "method_name": "list_unique_problems",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<MapShape(UniqueProblemsByExecutionResultMap)>",
        "result_key": "uniqueProblems"
    },
    "devicefarm_upload_from_get_upload": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.get_upload(['arn'])",
            "method_name": "get_upload",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Upload)>",
        "result_key": "upload"
    },
    "devicefarm_upload_from_list_uploads": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_uploads(['arn'])",
            "method_name": "list_uploads",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<StructureShape(Upload)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "uploads"
    },
    "devicefarm_uploads": {
        "fetch": {
            "all_args": [
                "arn"
            ],
            "docstring": "devicefarm.list_uploads(['arn'])",
            "method_name": "list_uploads",
            "required_args": [
                "arn"
            ],
            "service_name": "devicefarm"
        },
        "output_shape": "<ListShape(Uploads)>",
        "result_key": "uploads"
    },
    "directconnect_connection_from_describe_connections": {
        "fetch": {
            "all_args": [
                "connectionId"
            ],
            "docstring": "directconnect.describe_connections([])",
            "method_name": "describe_connections",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Connection)>",
        "parametrize_id_source": [
            "connectionId"
        ],
        "result_key": "connections"
    },
    "directconnect_connection_from_describe_connections_on_interconnect": {
        "fetch": {
            "all_args": [
                "interconnectId"
            ],
            "docstring": "directconnect.describe_connections_on_interconnect(['interconnectId'])",
            "method_name": "describe_connections_on_interconnect",
            "required_args": [
                "interconnectId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Connection)>",
        "parametrize_id_source": [
            "connectionId"
        ],
        "result_key": "connections"
    },
    "directconnect_connection_from_describe_hosted_connections": {
        "fetch": {
            "all_args": [
                "connectionId"
            ],
            "docstring": "directconnect.describe_hosted_connections(['connectionId'])",
            "method_name": "describe_hosted_connections",
            "required_args": [
                "connectionId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Connection)>",
        "parametrize_id_source": [
            "connectionId"
        ],
        "result_key": "connections"
    },
    "directconnect_connections_from_describe_connections": {
        "fetch": {
            "all_args": [
                "connectionId"
            ],
            "docstring": "directconnect.describe_connections([])",
            "method_name": "describe_connections",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(ConnectionList)>",
        "result_key": "connections"
    },
    "directconnect_connections_from_describe_connections_on_interconnect": {
        "fetch": {
            "all_args": [
                "interconnectId"
            ],
            "docstring": "directconnect.describe_connections_on_interconnect(['interconnectId'])",
            "method_name": "describe_connections_on_interconnect",
            "required_args": [
                "interconnectId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(ConnectionList)>",
        "result_key": "connections"
    },
    "directconnect_connections_from_describe_hosted_connections": {
        "fetch": {
            "all_args": [
                "connectionId"
            ],
            "docstring": "directconnect.describe_hosted_connections(['connectionId'])",
            "method_name": "describe_hosted_connections",
            "required_args": [
                "connectionId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(ConnectionList)>",
        "result_key": "connections"
    },
    "directconnect_interconnect": {
        "fetch": {
            "all_args": [
                "interconnectId"
            ],
            "docstring": "directconnect.describe_interconnects([])",
            "method_name": "describe_interconnects",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Interconnect)>",
        "parametrize_id_source": [
            "interconnectId"
        ],
        "result_key": "interconnects"
    },
    "directconnect_interconnects": {
        "fetch": {
            "all_args": [
                "interconnectId"
            ],
            "docstring": "directconnect.describe_interconnects([])",
            "method_name": "describe_interconnects",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(InterconnectList)>",
        "result_key": "interconnects"
    },
    "directconnect_lag": {
        "fetch": {
            "all_args": [
                "lagId"
            ],
            "docstring": "directconnect.describe_lags([])",
            "method_name": "describe_lags",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Lag)>",
        "parametrize_id_source": [
            "lagId"
        ],
        "result_key": "lags"
    },
    "directconnect_lags": {
        "fetch": {
            "all_args": [
                "lagId"
            ],
            "docstring": "directconnect.describe_lags([])",
            "method_name": "describe_lags",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(LagList)>",
        "result_key": "lags"
    },
    "directconnect_loa_content": {
        "fetch": {
            "all_args": [
                "connectionId",
                "providerName",
                "loaContentType"
            ],
            "docstring": "directconnect.describe_loa(['connectionId'])",
            "method_name": "describe_loa",
            "required_args": [
                "connectionId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<Shape(LoaContent)>",
        "result_key": "loaContent"
    },
    "directconnect_loa_content_type": {
        "fetch": {
            "all_args": [
                "connectionId",
                "providerName",
                "loaContentType"
            ],
            "docstring": "directconnect.describe_loa(['connectionId'])",
            "method_name": "describe_loa",
            "required_args": [
                "connectionId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StringShape(LoaContentType)>",
        "result_key": "loaContentType"
    },
    "directconnect_loa_from_describe_connection_loa": {
        "fetch": {
            "all_args": [
                "connectionId",
                "providerName",
                "loaContentType"
            ],
            "docstring": "directconnect.describe_connection_loa(['connectionId'])",
            "method_name": "describe_connection_loa",
            "required_args": [
                "connectionId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Loa)>",
        "result_key": "loa"
    },
    "directconnect_loa_from_describe_interconnect_loa": {
        "fetch": {
            "all_args": [
                "interconnectId",
                "providerName",
                "loaContentType"
            ],
            "docstring": "directconnect.describe_interconnect_loa(['interconnectId'])",
            "method_name": "describe_interconnect_loa",
            "required_args": [
                "interconnectId"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Loa)>",
        "result_key": "loa"
    },
    "directconnect_location": {
        "fetch": {
            "all_args": [],
            "docstring": "directconnect.describe_locations([])",
            "method_name": "describe_locations",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(Location)>",
        "parametrize_id_source": null,
        "result_key": "locations"
    },
    "directconnect_locations": {
        "fetch": {
            "all_args": [],
            "docstring": "directconnect.describe_locations([])",
            "method_name": "describe_locations",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(LocationList)>",
        "result_key": "locations"
    },
    "directconnect_resource_tag": {
        "fetch": {
            "all_args": [
                "resourceArns"
            ],
            "docstring": "directconnect.describe_tags(['resourceArns'])",
            "method_name": "describe_tags",
            "required_args": [
                "resourceArns"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(ResourceTag)>",
        "parametrize_id_source": [
            "resourceArn"
        ],
        "result_key": "resourceTags"
    },
    "directconnect_resource_tags": {
        "fetch": {
            "all_args": [
                "resourceArns"
            ],
            "docstring": "directconnect.describe_tags(['resourceArns'])",
            "method_name": "describe_tags",
            "required_args": [
                "resourceArns"
            ],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(ResourceTagList)>",
        "result_key": "resourceTags"
    },
    "directconnect_virtual_gateway": {
        "fetch": {
            "all_args": [],
            "docstring": "directconnect.describe_virtual_gateways([])",
            "method_name": "describe_virtual_gateways",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(VirtualGateway)>",
        "parametrize_id_source": [
            "virtualGatewayId"
        ],
        "result_key": "virtualGateways"
    },
    "directconnect_virtual_gateways": {
        "fetch": {
            "all_args": [],
            "docstring": "directconnect.describe_virtual_gateways([])",
            "method_name": "describe_virtual_gateways",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(VirtualGatewayList)>",
        "result_key": "virtualGateways"
    },
    "directconnect_virtual_interface": {
        "fetch": {
            "all_args": [
                "connectionId",
                "virtualInterfaceId"
            ],
            "docstring": "directconnect.describe_virtual_interfaces([])",
            "method_name": "describe_virtual_interfaces",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<StructureShape(VirtualInterface)>",
        "parametrize_id_source": [
            "virtualInterfaceId"
        ],
        "result_key": "virtualInterfaces"
    },
    "directconnect_virtual_interfaces": {
        "fetch": {
            "all_args": [
                "connectionId",
                "virtualInterfaceId"
            ],
            "docstring": "directconnect.describe_virtual_interfaces([])",
            "method_name": "describe_virtual_interfaces",
            "required_args": [],
            "service_name": "directconnect"
        },
        "output_shape": "<ListShape(VirtualInterfaceList)>",
        "result_key": "virtualInterfaces"
    },
    "discovery_agent_info": {
        "fetch": {
            "all_args": [
                "agentIds",
                "filters"
            ],
            "docstring": "discovery.describe_agents([])",
            "method_name": "describe_agents",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(AgentInfo)>",
        "parametrize_id_source": [
            "agentId"
        ],
        "result_key": "agentsInfo"
    },
    "discovery_agent_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(CustomerAgentInfo)>",
        "result_key": "agentSummary"
    },
    "discovery_agents_info": {
        "fetch": {
            "all_args": [
                "agentIds",
                "filters"
            ],
            "docstring": "discovery.describe_agents([])",
            "method_name": "describe_agents",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(AgentsInfo)>",
        "result_key": "agentsInfo"
    },
    "discovery_applications": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "applications"
    },
    "discovery_configuration": {
        "fetch": {
            "all_args": [
                "configurationType",
                "filters",
                "orderBy"
            ],
            "docstring": "discovery.list_configurations(['configurationType'])",
            "method_name": "list_configurations",
            "required_args": [
                "configurationType"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<MapShape(Configuration)>",
        "parametrize_id_source": null,
        "result_key": "configurations"
    },
    "discovery_configuration_tag": {
        "fetch": {
            "all_args": [
                "filters"
            ],
            "docstring": "discovery.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(ConfigurationTag)>",
        "parametrize_id_source": [
            "configurationId"
        ],
        "result_key": "tags"
    },
    "discovery_configurations_from_describe_configurations": {
        "fetch": {
            "all_args": [
                "configurationIds"
            ],
            "docstring": "discovery.describe_configurations(['configurationIds'])",
            "method_name": "describe_configurations",
            "required_args": [
                "configurationIds"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(DescribeConfigurationsAttributes)>",
        "result_key": "configurations"
    },
    "discovery_configurations_from_list_configurations": {
        "fetch": {
            "all_args": [
                "configurationType",
                "filters",
                "orderBy"
            ],
            "docstring": "discovery.list_configurations(['configurationType'])",
            "method_name": "list_configurations",
            "required_args": [
                "configurationType"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(Configurations)>",
        "result_key": "configurations"
    },
    "discovery_connector_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(CustomerConnectorInfo)>",
        "result_key": "connectorSummary"
    },
    "discovery_describe_configurations_attribute": {
        "fetch": {
            "all_args": [
                "configurationIds"
            ],
            "docstring": "discovery.describe_configurations(['configurationIds'])",
            "method_name": "describe_configurations",
            "required_args": [
                "configurationIds"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<MapShape(DescribeConfigurationsAttribute)>",
        "parametrize_id_source": null,
        "result_key": "configurations"
    },
    "discovery_export_info_from_describe_export_configurations": {
        "fetch": {
            "all_args": [
                "exportIds"
            ],
            "docstring": "discovery.describe_export_configurations([])",
            "method_name": "describe_export_configurations",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(ExportInfo)>",
        "parametrize_id_source": [
            "exportId"
        ],
        "result_key": "exportsInfo"
    },
    "discovery_export_info_from_describe_export_tasks": {
        "fetch": {
            "all_args": [
                "exportIds",
                "filters"
            ],
            "docstring": "discovery.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(ExportInfo)>",
        "parametrize_id_source": [
            "exportId"
        ],
        "result_key": "exportsInfo"
    },
    "discovery_exports_info_from_describe_export_configurations": {
        "fetch": {
            "all_args": [
                "exportIds"
            ],
            "docstring": "discovery.describe_export_configurations([])",
            "method_name": "describe_export_configurations",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(ExportsInfo)>",
        "result_key": "exportsInfo"
    },
    "discovery_exports_info_from_describe_export_tasks": {
        "fetch": {
            "all_args": [
                "exportIds",
                "filters"
            ],
            "docstring": "discovery.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(ExportsInfo)>",
        "result_key": "exportsInfo"
    },
    "discovery_known_dependency_count": {
        "fetch": {
            "all_args": [
                "configurationId",
                "portInformationNeeded",
                "neighborConfigurationIds"
            ],
            "docstring": "discovery.list_server_neighbors(['configurationId'])",
            "method_name": "list_server_neighbors",
            "required_args": [
                "configurationId"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "knownDependencyCount"
    },
    "discovery_neighbor_connection_detail": {
        "fetch": {
            "all_args": [
                "configurationId",
                "portInformationNeeded",
                "neighborConfigurationIds"
            ],
            "docstring": "discovery.list_server_neighbors(['configurationId'])",
            "method_name": "list_server_neighbors",
            "required_args": [
                "configurationId"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<StructureShape(NeighborConnectionDetail)>",
        "parametrize_id_source": [
            "sourceServerId"
        ],
        "result_key": "neighbors"
    },
    "discovery_neighbors": {
        "fetch": {
            "all_args": [
                "configurationId",
                "portInformationNeeded",
                "neighborConfigurationIds"
            ],
            "docstring": "discovery.list_server_neighbors(['configurationId'])",
            "method_name": "list_server_neighbors",
            "required_args": [
                "configurationId"
            ],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(NeighborDetailsList)>",
        "result_key": "neighbors"
    },
    "discovery_servers": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "servers"
    },
    "discovery_servers_mapped_to_applications": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "serversMappedToApplications"
    },
    "discovery_servers_mappedto_tags": {
        "fetch": {
            "all_args": [],
            "docstring": "discovery.get_discovery_summary([])",
            "method_name": "get_discovery_summary",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "serversMappedtoTags"
    },
    "discovery_tags": {
        "fetch": {
            "all_args": [
                "filters"
            ],
            "docstring": "discovery.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "discovery"
        },
        "output_shape": "<ListShape(ConfigurationTagSet)>",
        "result_key": "tags"
    },
    "dms_account_quota": {
        "fetch": {
            "all_args": [],
            "docstring": "dms.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(AccountQuota)>",
        "parametrize_id_source": null,
        "result_key": "AccountQuotas"
    },
    "dms_account_quotas": {
        "fetch": {
            "all_args": [],
            "docstring": "dms.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(AccountQuotaList)>",
        "result_key": "AccountQuotas"
    },
    "dms_certificate": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_certificates([])",
            "method_name": "describe_certificates",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(Certificate)>",
        "parametrize_id_source": [
            "CertificateIdentifier"
        ],
        "result_key": "Certificates"
    },
    "dms_certificates": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_certificates([])",
            "method_name": "describe_certificates",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(CertificateList)>",
        "result_key": "Certificates"
    },
    "dms_connection": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_connections([])",
            "method_name": "describe_connections",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(Connection)>",
        "parametrize_id_source": [
            "EndpointIdentifier"
        ],
        "result_key": "Connections"
    },
    "dms_connections": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_connections([])",
            "method_name": "describe_connections",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(ConnectionList)>",
        "result_key": "Connections"
    },
    "dms_endpoint": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_endpoints([])",
            "method_name": "describe_endpoints",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(Endpoint)>",
        "parametrize_id_source": [
            "EndpointIdentifier"
        ],
        "result_key": "Endpoints"
    },
    "dms_endpoints": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_endpoints([])",
            "method_name": "describe_endpoints",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(EndpointList)>",
        "result_key": "Endpoints"
    },
    "dms_event": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration",
                "EventCategories",
                "Filters"
            ],
            "docstring": "dms.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "SourceIdentifier"
        ],
        "result_key": "Events"
    },
    "dms_event_category_group": {
        "fetch": {
            "all_args": [
                "SourceType",
                "Filters"
            ],
            "docstring": "dms.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(EventCategoryGroup)>",
        "parametrize_id_source": [
            "SourceType"
        ],
        "result_key": "EventCategoryGroupList"
    },
    "dms_event_category_group_list": {
        "fetch": {
            "all_args": [
                "SourceType",
                "Filters"
            ],
            "docstring": "dms.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(EventCategoryGroupList)>",
        "result_key": "EventCategoryGroupList"
    },
    "dms_event_subscription": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "Filters"
            ],
            "docstring": "dms.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(EventSubscription)>",
        "parametrize_id_source": [
            "CustomerAwsId"
        ],
        "result_key": "EventSubscriptionsList"
    },
    "dms_event_subscriptions_list": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "Filters"
            ],
            "docstring": "dms.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(EventSubscriptionsList)>",
        "result_key": "EventSubscriptionsList"
    },
    "dms_events": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration",
                "EventCategories",
                "Filters"
            ],
            "docstring": "dms.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "dms_orderable_replication_instance": {
        "fetch": {
            "all_args": [],
            "docstring": "dms.describe_orderable_replication_instances([])",
            "method_name": "describe_orderable_replication_instances",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(OrderableReplicationInstance)>",
        "parametrize_id_source": null,
        "result_key": "OrderableReplicationInstances"
    },
    "dms_orderable_replication_instances": {
        "fetch": {
            "all_args": [],
            "docstring": "dms.describe_orderable_replication_instances([])",
            "method_name": "describe_orderable_replication_instances",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(OrderableReplicationInstanceList)>",
        "result_key": "OrderableReplicationInstances"
    },
    "dms_refresh_schemas_status": {
        "fetch": {
            "all_args": [
                "EndpointArn"
            ],
            "docstring": "dms.describe_refresh_schemas_status(['EndpointArn'])",
            "method_name": "describe_refresh_schemas_status",
            "required_args": [
                "EndpointArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(RefreshSchemasStatus)>",
        "result_key": "RefreshSchemasStatus"
    },
    "dms_replication_instance": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_instances([])",
            "method_name": "describe_replication_instances",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(ReplicationInstance)>",
        "parametrize_id_source": [
            "ReplicationInstanceIdentifier"
        ],
        "result_key": "ReplicationInstances"
    },
    "dms_replication_instances": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_instances([])",
            "method_name": "describe_replication_instances",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(ReplicationInstanceList)>",
        "result_key": "ReplicationInstances"
    },
    "dms_replication_subnet_group": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_subnet_groups([])",
            "method_name": "describe_replication_subnet_groups",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(ReplicationSubnetGroup)>",
        "parametrize_id_source": [
            "ReplicationSubnetGroupIdentifier"
        ],
        "result_key": "ReplicationSubnetGroups"
    },
    "dms_replication_subnet_groups": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_subnet_groups([])",
            "method_name": "describe_replication_subnet_groups",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(ReplicationSubnetGroups)>",
        "result_key": "ReplicationSubnetGroups"
    },
    "dms_replication_task": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_tasks([])",
            "method_name": "describe_replication_tasks",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(ReplicationTask)>",
        "parametrize_id_source": [
            "ReplicationTaskIdentifier"
        ],
        "result_key": "ReplicationTasks"
    },
    "dms_replication_task_arn": {
        "fetch": {
            "all_args": [
                "ReplicationTaskArn",
                "Filters"
            ],
            "docstring": "dms.describe_table_statistics(['ReplicationTaskArn'])",
            "method_name": "describe_table_statistics",
            "required_args": [
                "ReplicationTaskArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ReplicationTaskArn"
    },
    "dms_replication_tasks": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_replication_tasks([])",
            "method_name": "describe_replication_tasks",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(ReplicationTaskList)>",
        "result_key": "ReplicationTasks"
    },
    "dms_schemas": {
        "fetch": {
            "all_args": [
                "EndpointArn"
            ],
            "docstring": "dms.describe_schemas(['EndpointArn'])",
            "method_name": "describe_schemas",
            "required_args": [
                "EndpointArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(SchemaList)>",
        "result_key": "Schemas"
    },
    "dms_string": {
        "fetch": {
            "all_args": [
                "EndpointArn"
            ],
            "docstring": "dms.describe_schemas(['EndpointArn'])",
            "method_name": "describe_schemas",
            "required_args": [
                "EndpointArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "Schemas"
    },
    "dms_supported_endpoint_type": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_endpoint_types([])",
            "method_name": "describe_endpoint_types",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(SupportedEndpointType)>",
        "parametrize_id_source": null,
        "result_key": "SupportedEndpointTypes"
    },
    "dms_supported_endpoint_types": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "dms.describe_endpoint_types([])",
            "method_name": "describe_endpoint_types",
            "required_args": [],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(SupportedEndpointTypeList)>",
        "result_key": "SupportedEndpointTypes"
    },
    "dms_table_statistics_from_describe_table_statistics": {
        "fetch": {
            "all_args": [
                "ReplicationTaskArn",
                "Filters"
            ],
            "docstring": "dms.describe_table_statistics(['ReplicationTaskArn'])",
            "method_name": "describe_table_statistics",
            "required_args": [
                "ReplicationTaskArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(TableStatistics)>",
        "parametrize_id_source": null,
        "result_key": "TableStatistics"
    },
    "dms_tag": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "dms.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "dms_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "dms.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "dms"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "ds_conditional_forwarder": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "RemoteDomainNames"
            ],
            "docstring": "ds.describe_conditional_forwarders(['DirectoryId'])",
            "method_name": "describe_conditional_forwarders",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(ConditionalForwarder)>",
        "parametrize_id_source": [
            "RemoteDomainName"
        ],
        "result_key": "ConditionalForwarders"
    },
    "ds_conditional_forwarders": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "RemoteDomainNames"
            ],
            "docstring": "ds.describe_conditional_forwarders(['DirectoryId'])",
            "method_name": "describe_conditional_forwarders",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(ConditionalForwarders)>",
        "result_key": "ConditionalForwarders"
    },
    "ds_directory_description": {
        "fetch": {
            "all_args": [
                "DirectoryIds",
                "Limit"
            ],
            "docstring": "ds.describe_directories([])",
            "method_name": "describe_directories",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(DirectoryDescription)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "DirectoryDescriptions"
    },
    "ds_directory_descriptions": {
        "fetch": {
            "all_args": [
                "DirectoryIds",
                "Limit"
            ],
            "docstring": "ds.describe_directories([])",
            "method_name": "describe_directories",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(DirectoryDescriptions)>",
        "result_key": "DirectoryDescriptions"
    },
    "ds_directory_limits": {
        "fetch": {
            "all_args": [],
            "docstring": "ds.get_directory_limits([])",
            "method_name": "get_directory_limits",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(DirectoryLimits)>",
        "result_key": "DirectoryLimits"
    },
    "ds_domain_controller": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "DomainControllerIds",
                "Limit"
            ],
            "docstring": "ds.describe_domain_controllers(['DirectoryId'])",
            "method_name": "describe_domain_controllers",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(DomainController)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "DomainControllers"
    },
    "ds_domain_controllers": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "DomainControllerIds",
                "Limit"
            ],
            "docstring": "ds.describe_domain_controllers(['DirectoryId'])",
            "method_name": "describe_domain_controllers",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(DomainControllers)>",
        "result_key": "DomainControllers"
    },
    "ds_event_topic": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "TopicNames"
            ],
            "docstring": "ds.describe_event_topics([])",
            "method_name": "describe_event_topics",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(EventTopic)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "EventTopics"
    },
    "ds_event_topics": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "TopicNames"
            ],
            "docstring": "ds.describe_event_topics([])",
            "method_name": "describe_event_topics",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(EventTopics)>",
        "result_key": "EventTopics"
    },
    "ds_ip_route_info": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "Limit"
            ],
            "docstring": "ds.list_ip_routes(['DirectoryId'])",
            "method_name": "list_ip_routes",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(IpRouteInfo)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "IpRoutesInfo"
    },
    "ds_ip_routes_info": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "Limit"
            ],
            "docstring": "ds.list_ip_routes(['DirectoryId'])",
            "method_name": "list_ip_routes",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(IpRoutesInfo)>",
        "result_key": "IpRoutesInfo"
    },
    "ds_schema_extension_info": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "Limit"
            ],
            "docstring": "ds.list_schema_extensions(['DirectoryId'])",
            "method_name": "list_schema_extensions",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(SchemaExtensionInfo)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "SchemaExtensionsInfo"
    },
    "ds_schema_extensions_info": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "Limit"
            ],
            "docstring": "ds.list_schema_extensions(['DirectoryId'])",
            "method_name": "list_schema_extensions",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(SchemaExtensionsInfo)>",
        "result_key": "SchemaExtensionsInfo"
    },
    "ds_snapshot": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "SnapshotIds",
                "Limit"
            ],
            "docstring": "ds.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(Snapshot)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "Snapshots"
    },
    "ds_snapshot_limits": {
        "fetch": {
            "all_args": [
                "DirectoryId"
            ],
            "docstring": "ds.get_snapshot_limits(['DirectoryId'])",
            "method_name": "get_snapshot_limits",
            "required_args": [
                "DirectoryId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(SnapshotLimits)>",
        "result_key": "SnapshotLimits"
    },
    "ds_snapshots": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "SnapshotIds",
                "Limit"
            ],
            "docstring": "ds.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(Snapshots)>",
        "result_key": "Snapshots"
    },
    "ds_tag": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "Limit"
            ],
            "docstring": "ds.list_tags_for_resource(['ResourceId'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "ds_tags": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "Limit"
            ],
            "docstring": "ds.list_tags_for_resource(['ResourceId'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "ds_trust": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "TrustIds",
                "Limit"
            ],
            "docstring": "ds.describe_trusts([])",
            "method_name": "describe_trusts",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<StructureShape(Trust)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "Trusts"
    },
    "ds_trusts": {
        "fetch": {
            "all_args": [
                "DirectoryId",
                "TrustIds",
                "Limit"
            ],
            "docstring": "ds.describe_trusts([])",
            "method_name": "describe_trusts",
            "required_args": [],
            "service_name": "ds"
        },
        "output_shape": "<ListShape(Trusts)>",
        "result_key": "Trusts"
    },
    "dynamodb_account_max_read_capacity_units": {
        "fetch": {
            "all_args": [],
            "docstring": "dynamodb.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<Shape(PositiveLongObject)>",
        "result_key": "AccountMaxReadCapacityUnits"
    },
    "dynamodb_account_max_write_capacity_units": {
        "fetch": {
            "all_args": [],
            "docstring": "dynamodb.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<Shape(PositiveLongObject)>",
        "result_key": "AccountMaxWriteCapacityUnits"
    },
    "dynamodb_consumed_capacity": {
        "fetch": {
            "all_args": [
                "TableName",
                "Key",
                "AttributesToGet",
                "ConsistentRead",
                "ReturnConsumedCapacity",
                "ProjectionExpression",
                "ExpressionAttributeNames"
            ],
            "docstring": "dynamodb.get_item(['TableName', 'Key'])",
            "method_name": "get_item",
            "required_args": [
                "TableName",
                "Key"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<StructureShape(ConsumedCapacity)>",
        "result_key": "ConsumedCapacity"
    },
    "dynamodb_item": {
        "fetch": {
            "all_args": [
                "TableName",
                "Key",
                "AttributesToGet",
                "ConsistentRead",
                "ReturnConsumedCapacity",
                "ProjectionExpression",
                "ExpressionAttributeNames"
            ],
            "docstring": "dynamodb.get_item(['TableName', 'Key'])",
            "method_name": "get_item",
            "required_args": [
                "TableName",
                "Key"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<MapShape(AttributeMap)>",
        "result_key": "Item"
    },
    "dynamodb_last_evaluated_table_name": {
        "fetch": {
            "all_args": [
                "ExclusiveStartTableName",
                "Limit"
            ],
            "docstring": "dynamodb.list_tables([])",
            "method_name": "list_tables",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<StringShape(TableName)>",
        "result_key": "LastEvaluatedTableName"
    },
    "dynamodb_table": {
        "fetch": {
            "all_args": [
                "TableName"
            ],
            "docstring": "dynamodb.describe_table(['TableName'])",
            "method_name": "describe_table",
            "required_args": [
                "TableName"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<StructureShape(TableDescription)>",
        "result_key": "Table"
    },
    "dynamodb_table_max_read_capacity_units": {
        "fetch": {
            "all_args": [],
            "docstring": "dynamodb.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<Shape(PositiveLongObject)>",
        "result_key": "TableMaxReadCapacityUnits"
    },
    "dynamodb_table_max_write_capacity_units": {
        "fetch": {
            "all_args": [],
            "docstring": "dynamodb.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<Shape(PositiveLongObject)>",
        "result_key": "TableMaxWriteCapacityUnits"
    },
    "dynamodb_table_name": {
        "fetch": {
            "all_args": [
                "ExclusiveStartTableName",
                "Limit"
            ],
            "docstring": "dynamodb.list_tables([])",
            "method_name": "list_tables",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<StringShape(TableName)>",
        "parametrize_id_source": [
            "TableName"
        ],
        "result_key": "TableNames"
    },
    "dynamodb_table_names": {
        "fetch": {
            "all_args": [
                "ExclusiveStartTableName",
                "Limit"
            ],
            "docstring": "dynamodb.list_tables([])",
            "method_name": "list_tables",
            "required_args": [],
            "service_name": "dynamodb"
        },
        "output_shape": "<ListShape(TableNameList)>",
        "result_key": "TableNames"
    },
    "dynamodb_tag": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "dynamodb.list_tags_of_resource(['ResourceArn'])",
            "method_name": "list_tags_of_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "dynamodb_tags": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "dynamodb.list_tags_of_resource(['ResourceArn'])",
            "method_name": "list_tags_of_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "dynamodb_time_to_live_description": {
        "fetch": {
            "all_args": [
                "TableName"
            ],
            "docstring": "dynamodb.describe_time_to_live(['TableName'])",
            "method_name": "describe_time_to_live",
            "required_args": [
                "TableName"
            ],
            "service_name": "dynamodb"
        },
        "output_shape": "<StructureShape(TimeToLiveDescription)>",
        "result_key": "TimeToLiveDescription"
    },
    "dynamodbstreams_last_evaluated_stream_arn": {
        "fetch": {
            "all_args": [
                "TableName",
                "Limit",
                "ExclusiveStartStreamArn"
            ],
            "docstring": "dynamodbstreams.list_streams([])",
            "method_name": "list_streams",
            "required_args": [],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StringShape(StreamArn)>",
        "result_key": "LastEvaluatedStreamArn"
    },
    "dynamodbstreams_next_shard_iterator": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "dynamodbstreams.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StringShape(ShardIterator)>",
        "result_key": "NextShardIterator"
    },
    "dynamodbstreams_record": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "dynamodbstreams.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StructureShape(Record)>",
        "parametrize_id_source": [
            "eventID"
        ],
        "result_key": "Records"
    },
    "dynamodbstreams_records": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "dynamodbstreams.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<ListShape(RecordList)>",
        "result_key": "Records"
    },
    "dynamodbstreams_shard_iterator": {
        "fetch": {
            "all_args": [
                "StreamArn",
                "ShardId",
                "ShardIteratorType",
                "SequenceNumber"
            ],
            "docstring": "dynamodbstreams.get_shard_iterator(['StreamArn', 'ShardId', 'ShardIteratorType'])",
            "method_name": "get_shard_iterator",
            "required_args": [
                "StreamArn",
                "ShardId",
                "ShardIteratorType"
            ],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StringShape(ShardIterator)>",
        "result_key": "ShardIterator"
    },
    "dynamodbstreams_stream": {
        "fetch": {
            "all_args": [
                "TableName",
                "Limit",
                "ExclusiveStartStreamArn"
            ],
            "docstring": "dynamodbstreams.list_streams([])",
            "method_name": "list_streams",
            "required_args": [],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StructureShape(Stream)>",
        "parametrize_id_source": [
            "StreamArn"
        ],
        "result_key": "Streams"
    },
    "dynamodbstreams_stream_description": {
        "fetch": {
            "all_args": [
                "StreamArn",
                "Limit",
                "ExclusiveStartShardId"
            ],
            "docstring": "dynamodbstreams.describe_stream(['StreamArn'])",
            "method_name": "describe_stream",
            "required_args": [
                "StreamArn"
            ],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<StructureShape(StreamDescription)>",
        "result_key": "StreamDescription"
    },
    "dynamodbstreams_streams": {
        "fetch": {
            "all_args": [
                "TableName",
                "Limit",
                "ExclusiveStartStreamArn"
            ],
            "docstring": "dynamodbstreams.list_streams([])",
            "method_name": "list_streams",
            "required_args": [],
            "service_name": "dynamodbstreams"
        },
        "output_shape": "<ListShape(StreamList)>",
        "result_key": "Streams"
    },
    "ec2_account_attribute": {
        "fetch": {
            "all_args": [
                "AttributeNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AccountAttribute)>",
        "parametrize_id_source": [
            "AttributeName"
        ],
        "result_key": "AccountAttributes"
    },
    "ec2_account_attributes": {
        "fetch": {
            "all_args": [
                "AttributeNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(AccountAttributeList)>",
        "result_key": "AccountAttributes"
    },
    "ec2_active_instance": {
        "fetch": {
            "all_args": [
                "DryRun",
                "SpotFleetRequestId"
            ],
            "docstring": "ec2.describe_spot_fleet_instances(['SpotFleetRequestId'])",
            "method_name": "describe_spot_fleet_instances",
            "required_args": [
                "SpotFleetRequestId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ActiveInstance)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "ActiveInstances"
    },
    "ec2_active_instances": {
        "fetch": {
            "all_args": [
                "DryRun",
                "SpotFleetRequestId"
            ],
            "docstring": "ec2.describe_spot_fleet_instances(['SpotFleetRequestId'])",
            "method_name": "describe_spot_fleet_instances",
            "required_args": [
                "SpotFleetRequestId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ActiveInstanceSet)>",
        "result_key": "ActiveInstances"
    },
    "ec2_address": {
        "fetch": {
            "all_args": [
                "Filters",
                "PublicIps",
                "AllocationIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_addresses([])",
            "method_name": "describe_addresses",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Address)>",
        "parametrize_id_source": [
            "PublicIp"
        ],
        "result_key": "Addresses"
    },
    "ec2_addresses": {
        "fetch": {
            "all_args": [
                "Filters",
                "PublicIps",
                "AllocationIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_addresses([])",
            "method_name": "describe_addresses",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(AddressList)>",
        "result_key": "Addresses"
    },
    "ec2_attachment": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(NetworkInterfaceAttachment)>",
        "result_key": "Attachment"
    },
    "ec2_auto_enable_io": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VolumeId",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_attribute(['VolumeId'])",
            "method_name": "describe_volume_attribute",
            "required_args": [
                "VolumeId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "AutoEnableIO"
    },
    "ec2_availability_zone": {
        "fetch": {
            "all_args": [
                "Filters",
                "ZoneNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_availability_zones([])",
            "method_name": "describe_availability_zones",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AvailabilityZone)>",
        "parametrize_id_source": [
            "ZoneName"
        ],
        "result_key": "AvailabilityZones"
    },
    "ec2_availability_zones": {
        "fetch": {
            "all_args": [
                "Filters",
                "ZoneNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_availability_zones([])",
            "method_name": "describe_availability_zones",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(AvailabilityZoneList)>",
        "result_key": "AvailabilityZones"
    },
    "ec2_block_device_mapping": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(BlockDeviceMapping)>",
        "parametrize_id_source": null,
        "result_key": "BlockDeviceMappings"
    },
    "ec2_block_device_mappings_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(BlockDeviceMappingList)>",
        "result_key": "BlockDeviceMappings"
    },
    "ec2_block_device_mappings_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(InstanceBlockDeviceMappingList)>",
        "result_key": "BlockDeviceMappings"
    },
    "ec2_bundle_task": {
        "fetch": {
            "all_args": [
                "BundleIds",
                "Filters",
                "DryRun"
            ],
            "docstring": "ec2.describe_bundle_tasks([])",
            "method_name": "describe_bundle_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(BundleTask)>",
        "parametrize_id_source": [
            "BundleId"
        ],
        "result_key": "BundleTasks"
    },
    "ec2_bundle_tasks": {
        "fetch": {
            "all_args": [
                "BundleIds",
                "Filters",
                "DryRun"
            ],
            "docstring": "ec2.describe_bundle_tasks([])",
            "method_name": "describe_bundle_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(BundleTaskList)>",
        "result_key": "BundleTasks"
    },
    "ec2_classic_link_dns_support": {
        "fetch": {
            "all_args": [
                "VpcIds"
            ],
            "docstring": "ec2.describe_vpc_classic_link_dns_support([])",
            "method_name": "describe_vpc_classic_link_dns_support",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ClassicLinkDnsSupport)>",
        "parametrize_id_source": [
            "VpcId"
        ],
        "result_key": "Vpcs"
    },
    "ec2_classic_link_instance": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "InstanceIds"
            ],
            "docstring": "ec2.describe_classic_link_instances([])",
            "method_name": "describe_classic_link_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ClassicLinkInstance)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "Instances"
    },
    "ec2_conversion_task": {
        "fetch": {
            "all_args": [
                "ConversionTaskIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_conversion_tasks([])",
            "method_name": "describe_conversion_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ConversionTask)>",
        "parametrize_id_source": [
            "ConversionTaskId"
        ],
        "result_key": "ConversionTasks"
    },
    "ec2_conversion_tasks": {
        "fetch": {
            "all_args": [
                "ConversionTaskIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_conversion_tasks([])",
            "method_name": "describe_conversion_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(DescribeConversionTaskList)>",
        "result_key": "ConversionTasks"
    },
    "ec2_create_volume_permission": {
        "fetch": {
            "all_args": [
                "Attribute",
                "SnapshotId",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshot_attribute(['Attribute', 'SnapshotId'])",
            "method_name": "describe_snapshot_attribute",
            "required_args": [
                "Attribute",
                "SnapshotId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(CreateVolumePermission)>",
        "parametrize_id_source": [
            "UserId"
        ],
        "result_key": "CreateVolumePermissions"
    },
    "ec2_create_volume_permissions": {
        "fetch": {
            "all_args": [
                "Attribute",
                "SnapshotId",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshot_attribute(['Attribute', 'SnapshotId'])",
            "method_name": "describe_snapshot_attribute",
            "required_args": [
                "Attribute",
                "SnapshotId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(CreateVolumePermissionList)>",
        "result_key": "CreateVolumePermissions"
    },
    "ec2_currency_code_from_get_host_reservation_purchase_preview": {
        "fetch": {
            "all_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "docstring": "ec2.get_host_reservation_purchase_preview(['HostIdSet', 'OfferingId'])",
            "method_name": "get_host_reservation_purchase_preview",
            "required_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(CurrencyCodeValues)>",
        "result_key": "CurrencyCode"
    },
    "ec2_currency_code_from_get_reserved_instances_exchange_quote": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "CurrencyCode"
    },
    "ec2_customer_gateway": {
        "fetch": {
            "all_args": [
                "CustomerGatewayIds",
                "Filters",
                "DryRun"
            ],
            "docstring": "ec2.describe_customer_gateways([])",
            "method_name": "describe_customer_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(CustomerGateway)>",
        "parametrize_id_source": [
            "CustomerGatewayId"
        ],
        "result_key": "CustomerGateways"
    },
    "ec2_customer_gateways": {
        "fetch": {
            "all_args": [
                "CustomerGatewayIds",
                "Filters",
                "DryRun"
            ],
            "docstring": "ec2.describe_customer_gateways([])",
            "method_name": "describe_customer_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(CustomerGatewayList)>",
        "result_key": "CustomerGateways"
    },
    "ec2_description_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "Description"
    },
    "ec2_description_from_describe_network_interface_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "Description"
    },
    "ec2_dhcp_options_from_describe_dhcp_options": {
        "fetch": {
            "all_args": [
                "DhcpOptionsIds",
                "Filters",
                "DryRun"
            ],
            "docstring": "ec2.describe_dhcp_options([])",
            "method_name": "describe_dhcp_options",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(DhcpOptions)>",
        "parametrize_id_source": [
            "DhcpOptionsId"
        ],
        "result_key": "DhcpOptions"
    },
    "ec2_disable_api_termination": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "DisableApiTermination"
    },
    "ec2_ebs_optimized": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "EbsOptimized"
    },
    "ec2_egress_only_internet_gateway": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EgressOnlyInternetGatewayIds"
            ],
            "docstring": "ec2.describe_egress_only_internet_gateways([])",
            "method_name": "describe_egress_only_internet_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(EgressOnlyInternetGateway)>",
        "parametrize_id_source": [
            "EgressOnlyInternetGatewayId"
        ],
        "result_key": "EgressOnlyInternetGateways"
    },
    "ec2_egress_only_internet_gateways": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EgressOnlyInternetGatewayIds"
            ],
            "docstring": "ec2.describe_egress_only_internet_gateways([])",
            "method_name": "describe_egress_only_internet_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(EgressOnlyInternetGatewayList)>",
        "result_key": "EgressOnlyInternetGateways"
    },
    "ec2_elastic_gpu_set": {
        "fetch": {
            "all_args": [
                "ElasticGpuIds",
                "DryRun",
                "Filters"
            ],
            "docstring": "ec2.describe_elastic_gpus([])",
            "method_name": "describe_elastic_gpus",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ElasticGpuSet)>",
        "result_key": "ElasticGpuSet"
    },
    "ec2_elastic_gpus": {
        "fetch": {
            "all_args": [
                "ElasticGpuIds",
                "DryRun",
                "Filters"
            ],
            "docstring": "ec2.describe_elastic_gpus([])",
            "method_name": "describe_elastic_gpus",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ElasticGpus)>",
        "parametrize_id_source": [
            "ElasticGpuId"
        ],
        "result_key": "ElasticGpuSet"
    },
    "ec2_ena_support": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "EnaSupport"
    },
    "ec2_enable_dns_hostnames": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VpcId",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpc_attribute(['Attribute', 'VpcId'])",
            "method_name": "describe_vpc_attribute",
            "required_args": [
                "Attribute",
                "VpcId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "EnableDnsHostnames"
    },
    "ec2_enable_dns_support": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VpcId",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpc_attribute(['Attribute', 'VpcId'])",
            "method_name": "describe_vpc_attribute",
            "required_args": [
                "Attribute",
                "VpcId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "EnableDnsSupport"
    },
    "ec2_export_task": {
        "fetch": {
            "all_args": [
                "ExportTaskIds"
            ],
            "docstring": "ec2.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ExportTask)>",
        "parametrize_id_source": [
            "ExportTaskId"
        ],
        "result_key": "ExportTasks"
    },
    "ec2_export_tasks": {
        "fetch": {
            "all_args": [
                "ExportTaskIds"
            ],
            "docstring": "ec2.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ExportTaskList)>",
        "result_key": "ExportTasks"
    },
    "ec2_flow_log": {
        "fetch": {
            "all_args": [
                "Filter",
                "FlowLogIds"
            ],
            "docstring": "ec2.describe_flow_logs([])",
            "method_name": "describe_flow_logs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(FlowLog)>",
        "parametrize_id_source": [
            "FlowLogId"
        ],
        "result_key": "FlowLogs"
    },
    "ec2_flow_logs": {
        "fetch": {
            "all_args": [
                "Filter",
                "FlowLogIds"
            ],
            "docstring": "ec2.describe_flow_logs([])",
            "method_name": "describe_flow_logs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(FlowLogSet)>",
        "result_key": "FlowLogs"
    },
    "ec2_fpga_image": {
        "fetch": {
            "all_args": [
                "DryRun",
                "FpgaImageIds",
                "Owners",
                "Filters"
            ],
            "docstring": "ec2.describe_fpga_images([])",
            "method_name": "describe_fpga_images",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(FpgaImage)>",
        "parametrize_id_source": [
            "FpgaImageId"
        ],
        "result_key": "FpgaImages"
    },
    "ec2_fpga_image_attribute": {
        "fetch": {
            "all_args": [
                "DryRun",
                "FpgaImageId",
                "Attribute"
            ],
            "docstring": "ec2.describe_fpga_image_attribute(['FpgaImageId', 'Attribute'])",
            "method_name": "describe_fpga_image_attribute",
            "required_args": [
                "FpgaImageId",
                "Attribute"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(FpgaImageAttribute)>",
        "result_key": "FpgaImageAttribute"
    },
    "ec2_fpga_images": {
        "fetch": {
            "all_args": [
                "DryRun",
                "FpgaImageIds",
                "Owners",
                "Filters"
            ],
            "docstring": "ec2.describe_fpga_images([])",
            "method_name": "describe_fpga_images",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(FpgaImageList)>",
        "result_key": "FpgaImages"
    },
    "ec2_group_identifier_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(GroupIdentifier)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "Groups"
    },
    "ec2_group_identifier_from_describe_network_interface_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(GroupIdentifier)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "Groups"
    },
    "ec2_groups_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(GroupIdentifierList)>",
        "result_key": "Groups"
    },
    "ec2_groups_from_describe_network_interface_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(GroupIdentifierList)>",
        "result_key": "Groups"
    },
    "ec2_history_record": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EventType",
                "SpotFleetRequestId",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_fleet_request_history(['SpotFleetRequestId', 'StartTime'])",
            "method_name": "describe_spot_fleet_request_history",
            "required_args": [
                "SpotFleetRequestId",
                "StartTime"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(HistoryRecord)>",
        "parametrize_id_source": [
            "EventType"
        ],
        "result_key": "HistoryRecords"
    },
    "ec2_history_records": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EventType",
                "SpotFleetRequestId",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_fleet_request_history(['SpotFleetRequestId', 'StartTime'])",
            "method_name": "describe_spot_fleet_request_history",
            "required_args": [
                "SpotFleetRequestId",
                "StartTime"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(HistoryRecords)>",
        "result_key": "HistoryRecords"
    },
    "ec2_host": {
        "fetch": {
            "all_args": [
                "Filter",
                "HostIds"
            ],
            "docstring": "ec2.describe_hosts([])",
            "method_name": "describe_hosts",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Host)>",
        "parametrize_id_source": [
            "HostId"
        ],
        "result_key": "Hosts"
    },
    "ec2_host_offering": {
        "fetch": {
            "all_args": [
                "Filter",
                "MinDuration",
                "OfferingId"
            ],
            "docstring": "ec2.describe_host_reservation_offerings([])",
            "method_name": "describe_host_reservation_offerings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(HostOffering)>",
        "parametrize_id_source": [
            "Duration"
        ],
        "result_key": "OfferingSet"
    },
    "ec2_host_reservation": {
        "fetch": {
            "all_args": [
                "Filter",
                "HostReservationIdSet"
            ],
            "docstring": "ec2.describe_host_reservations([])",
            "method_name": "describe_host_reservations",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(HostReservation)>",
        "parametrize_id_source": [
            "HostReservationId"
        ],
        "result_key": "HostReservationSet"
    },
    "ec2_host_reservation_set": {
        "fetch": {
            "all_args": [
                "Filter",
                "HostReservationIdSet"
            ],
            "docstring": "ec2.describe_host_reservations([])",
            "method_name": "describe_host_reservations",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(HostReservationSet)>",
        "result_key": "HostReservationSet"
    },
    "ec2_hosts": {
        "fetch": {
            "all_args": [
                "Filter",
                "HostIds"
            ],
            "docstring": "ec2.describe_hosts([])",
            "method_name": "describe_hosts",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(HostList)>",
        "result_key": "Hosts"
    },
    "ec2_iam_instance_profile_association": {
        "fetch": {
            "all_args": [
                "AssociationIds",
                "Filters"
            ],
            "docstring": "ec2.describe_iam_instance_profile_associations([])",
            "method_name": "describe_iam_instance_profile_associations",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(IamInstanceProfileAssociation)>",
        "parametrize_id_source": [
            "AssociationId"
        ],
        "result_key": "IamInstanceProfileAssociations"
    },
    "ec2_iam_instance_profile_associations": {
        "fetch": {
            "all_args": [
                "AssociationIds",
                "Filters"
            ],
            "docstring": "ec2.describe_iam_instance_profile_associations([])",
            "method_name": "describe_iam_instance_profile_associations",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(IamInstanceProfileAssociationSet)>",
        "result_key": "IamInstanceProfileAssociations"
    },
    "ec2_id_format_from_describe_id_format": {
        "fetch": {
            "all_args": [
                "Resource"
            ],
            "docstring": "ec2.describe_id_format([])",
            "method_name": "describe_id_format",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(IdFormat)>",
        "parametrize_id_source": [
            "Resource"
        ],
        "result_key": "Statuses"
    },
    "ec2_id_format_from_describe_identity_id_format": {
        "fetch": {
            "all_args": [
                "PrincipalArn",
                "Resource"
            ],
            "docstring": "ec2.describe_identity_id_format(['PrincipalArn'])",
            "method_name": "describe_identity_id_format",
            "required_args": [
                "PrincipalArn"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(IdFormat)>",
        "parametrize_id_source": [
            "Resource"
        ],
        "result_key": "Statuses"
    },
    "ec2_image": {
        "fetch": {
            "all_args": [
                "ExecutableUsers",
                "Filters",
                "ImageIds",
                "Owners",
                "DryRun"
            ],
            "docstring": "ec2.describe_images([])",
            "method_name": "describe_images",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Image)>",
        "parametrize_id_source": [
            "ImageId"
        ],
        "result_key": "Images"
    },
    "ec2_image_data": {
        "fetch": {
            "all_args": [
                "DryRun",
                "InstanceId",
                "WakeUp"
            ],
            "docstring": "ec2.get_console_screenshot(['InstanceId'])",
            "method_name": "get_console_screenshot",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ImageData"
    },
    "ec2_image_id": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ImageId"
    },
    "ec2_images": {
        "fetch": {
            "all_args": [
                "ExecutableUsers",
                "Filters",
                "ImageIds",
                "Owners",
                "DryRun"
            ],
            "docstring": "ec2.describe_images([])",
            "method_name": "describe_images",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ImageList)>",
        "result_key": "Images"
    },
    "ec2_import_image_task": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ImportTaskIds"
            ],
            "docstring": "ec2.describe_import_image_tasks([])",
            "method_name": "describe_import_image_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ImportImageTask)>",
        "parametrize_id_source": [
            "ImportTaskId"
        ],
        "result_key": "ImportImageTasks"
    },
    "ec2_import_image_tasks": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ImportTaskIds"
            ],
            "docstring": "ec2.describe_import_image_tasks([])",
            "method_name": "describe_import_image_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ImportImageTaskList)>",
        "result_key": "ImportImageTasks"
    },
    "ec2_import_snapshot_task": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ImportTaskIds"
            ],
            "docstring": "ec2.describe_import_snapshot_tasks([])",
            "method_name": "describe_import_snapshot_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ImportSnapshotTask)>",
        "parametrize_id_source": [
            "ImportTaskId"
        ],
        "result_key": "ImportSnapshotTasks"
    },
    "ec2_import_snapshot_tasks": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ImportTaskIds"
            ],
            "docstring": "ec2.describe_import_snapshot_tasks([])",
            "method_name": "describe_import_snapshot_tasks",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ImportSnapshotTaskList)>",
        "result_key": "ImportSnapshotTasks"
    },
    "ec2_instance_block_device_mapping": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(InstanceBlockDeviceMapping)>",
        "parametrize_id_source": null,
        "result_key": "BlockDeviceMappings"
    },
    "ec2_instance_id_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "InstanceId"
    },
    "ec2_instance_id_from_get_console_output": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_console_output(['InstanceId'])",
            "method_name": "get_console_output",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "InstanceId"
    },
    "ec2_instance_id_from_get_console_screenshot": {
        "fetch": {
            "all_args": [
                "DryRun",
                "InstanceId",
                "WakeUp"
            ],
            "docstring": "ec2.get_console_screenshot(['InstanceId'])",
            "method_name": "get_console_screenshot",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "InstanceId"
    },
    "ec2_instance_id_from_get_password_data": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_password_data(['InstanceId'])",
            "method_name": "get_password_data",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "InstanceId"
    },
    "ec2_instance_initiated_shutdown_behavior": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "InstanceInitiatedShutdownBehavior"
    },
    "ec2_instance_status": {
        "fetch": {
            "all_args": [
                "Filters",
                "InstanceIds",
                "DryRun",
                "IncludeAllInstances"
            ],
            "docstring": "ec2.describe_instance_status([])",
            "method_name": "describe_instance_status",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(InstanceStatus)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstanceStatuses"
    },
    "ec2_instance_statuses": {
        "fetch": {
            "all_args": [
                "Filters",
                "InstanceIds",
                "DryRun",
                "IncludeAllInstances"
            ],
            "docstring": "ec2.describe_instance_status([])",
            "method_name": "describe_instance_status",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(InstanceStatusList)>",
        "result_key": "InstanceStatuses"
    },
    "ec2_instance_type": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "InstanceType"
    },
    "ec2_instances": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "InstanceIds"
            ],
            "docstring": "ec2.describe_classic_link_instances([])",
            "method_name": "describe_classic_link_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ClassicLinkInstanceList)>",
        "result_key": "Instances"
    },
    "ec2_internet_gateway": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "InternetGatewayIds"
            ],
            "docstring": "ec2.describe_internet_gateways([])",
            "method_name": "describe_internet_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(InternetGateway)>",
        "parametrize_id_source": [
            "InternetGatewayId"
        ],
        "result_key": "InternetGateways"
    },
    "ec2_internet_gateways": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "InternetGatewayIds"
            ],
            "docstring": "ec2.describe_internet_gateways([])",
            "method_name": "describe_internet_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(InternetGatewayList)>",
        "result_key": "InternetGateways"
    },
    "ec2_is_valid_exchange": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "IsValidExchange"
    },
    "ec2_kernel_id_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "KernelId"
    },
    "ec2_kernel_id_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "KernelId"
    },
    "ec2_key_pair_info": {
        "fetch": {
            "all_args": [
                "Filters",
                "KeyNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_key_pairs([])",
            "method_name": "describe_key_pairs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(KeyPairInfo)>",
        "parametrize_id_source": [
            "KeyName"
        ],
        "result_key": "KeyPairs"
    },
    "ec2_key_pairs": {
        "fetch": {
            "all_args": [
                "Filters",
                "KeyNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_key_pairs([])",
            "method_name": "describe_key_pairs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(KeyPairList)>",
        "result_key": "KeyPairs"
    },
    "ec2_last_evaluated_time": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EventType",
                "SpotFleetRequestId",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_fleet_request_history(['SpotFleetRequestId', 'StartTime'])",
            "method_name": "describe_spot_fleet_request_history",
            "required_args": [
                "SpotFleetRequestId",
                "StartTime"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "LastEvaluatedTime"
    },
    "ec2_launch_permission": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(LaunchPermission)>",
        "parametrize_id_source": [
            "UserId"
        ],
        "result_key": "LaunchPermissions"
    },
    "ec2_launch_permissions": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(LaunchPermissionList)>",
        "result_key": "LaunchPermissions"
    },
    "ec2_moving_address_status": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "PublicIps"
            ],
            "docstring": "ec2.describe_moving_addresses([])",
            "method_name": "describe_moving_addresses",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(MovingAddressStatus)>",
        "parametrize_id_source": [
            "PublicIp"
        ],
        "result_key": "MovingAddressStatuses"
    },
    "ec2_moving_address_statuses": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "PublicIps"
            ],
            "docstring": "ec2.describe_moving_addresses([])",
            "method_name": "describe_moving_addresses",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(MovingAddressStatusSet)>",
        "result_key": "MovingAddressStatuses"
    },
    "ec2_nat_gateway": {
        "fetch": {
            "all_args": [
                "Filter",
                "NatGatewayIds"
            ],
            "docstring": "ec2.describe_nat_gateways([])",
            "method_name": "describe_nat_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(NatGateway)>",
        "parametrize_id_source": [
            "NatGatewayId"
        ],
        "result_key": "NatGateways"
    },
    "ec2_nat_gateways": {
        "fetch": {
            "all_args": [
                "Filter",
                "NatGatewayIds"
            ],
            "docstring": "ec2.describe_nat_gateways([])",
            "method_name": "describe_nat_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(NatGatewayList)>",
        "result_key": "NatGateways"
    },
    "ec2_network_acl": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "NetworkAclIds"
            ],
            "docstring": "ec2.describe_network_acls([])",
            "method_name": "describe_network_acls",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(NetworkAcl)>",
        "parametrize_id_source": [
            "NetworkAclId"
        ],
        "result_key": "NetworkAcls"
    },
    "ec2_network_acls": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "NetworkAclIds"
            ],
            "docstring": "ec2.describe_network_acls([])",
            "method_name": "describe_network_acls",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(NetworkAclList)>",
        "result_key": "NetworkAcls"
    },
    "ec2_network_interface": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "NetworkInterfaceIds"
            ],
            "docstring": "ec2.describe_network_interfaces([])",
            "method_name": "describe_network_interfaces",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(NetworkInterface)>",
        "parametrize_id_source": [
            "NetworkInterfaceId"
        ],
        "result_key": "NetworkInterfaces"
    },
    "ec2_network_interface_id": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "NetworkInterfaceId"
    },
    "ec2_network_interface_permission": {
        "fetch": {
            "all_args": [
                "NetworkInterfacePermissionIds",
                "Filters"
            ],
            "docstring": "ec2.describe_network_interface_permissions([])",
            "method_name": "describe_network_interface_permissions",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(NetworkInterfacePermission)>",
        "parametrize_id_source": [
            "NetworkInterfacePermissionId"
        ],
        "result_key": "NetworkInterfacePermissions"
    },
    "ec2_network_interface_permissions": {
        "fetch": {
            "all_args": [
                "NetworkInterfacePermissionIds",
                "Filters"
            ],
            "docstring": "ec2.describe_network_interface_permissions([])",
            "method_name": "describe_network_interface_permissions",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(NetworkInterfacePermissionList)>",
        "result_key": "NetworkInterfacePermissions"
    },
    "ec2_network_interfaces": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "NetworkInterfaceIds"
            ],
            "docstring": "ec2.describe_network_interfaces([])",
            "method_name": "describe_network_interfaces",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(NetworkInterfaceList)>",
        "result_key": "NetworkInterfaces"
    },
    "ec2_offering_set": {
        "fetch": {
            "all_args": [
                "Filter",
                "MinDuration",
                "OfferingId"
            ],
            "docstring": "ec2.describe_host_reservation_offerings([])",
            "method_name": "describe_host_reservation_offerings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(HostOfferingSet)>",
        "result_key": "OfferingSet"
    },
    "ec2_output": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_console_output(['InstanceId'])",
            "method_name": "get_console_output",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Output"
    },
    "ec2_output_reserved_instances_will_expire_at": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "OutputReservedInstancesWillExpireAt"
    },
    "ec2_password_data": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_password_data(['InstanceId'])",
            "method_name": "get_password_data",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "PasswordData"
    },
    "ec2_payment_due": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "PaymentDue"
    },
    "ec2_placement_group": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "GroupNames"
            ],
            "docstring": "ec2.describe_placement_groups([])",
            "method_name": "describe_placement_groups",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(PlacementGroup)>",
        "parametrize_id_source": [
            "GroupName"
        ],
        "result_key": "PlacementGroups"
    },
    "ec2_placement_groups": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "GroupNames"
            ],
            "docstring": "ec2.describe_placement_groups([])",
            "method_name": "describe_placement_groups",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(PlacementGroupList)>",
        "result_key": "PlacementGroups"
    },
    "ec2_prefix_list": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "PrefixListIds"
            ],
            "docstring": "ec2.describe_prefix_lists([])",
            "method_name": "describe_prefix_lists",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(PrefixList)>",
        "parametrize_id_source": [
            "PrefixListId"
        ],
        "result_key": "PrefixLists"
    },
    "ec2_prefix_lists": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "PrefixListIds"
            ],
            "docstring": "ec2.describe_prefix_lists([])",
            "method_name": "describe_prefix_lists",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(PrefixListSet)>",
        "result_key": "PrefixLists"
    },
    "ec2_product_code_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ProductCode)>",
        "parametrize_id_source": [
            "ProductCodeId"
        ],
        "result_key": "ProductCodes"
    },
    "ec2_product_code_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ProductCode)>",
        "parametrize_id_source": [
            "ProductCodeId"
        ],
        "result_key": "ProductCodes"
    },
    "ec2_product_code_from_describe_snapshot_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "SnapshotId",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshot_attribute(['Attribute', 'SnapshotId'])",
            "method_name": "describe_snapshot_attribute",
            "required_args": [
                "Attribute",
                "SnapshotId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ProductCode)>",
        "parametrize_id_source": [
            "ProductCodeId"
        ],
        "result_key": "ProductCodes"
    },
    "ec2_product_code_from_describe_volume_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VolumeId",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_attribute(['VolumeId'])",
            "method_name": "describe_volume_attribute",
            "required_args": [
                "VolumeId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ProductCode)>",
        "parametrize_id_source": [
            "ProductCodeId"
        ],
        "result_key": "ProductCodes"
    },
    "ec2_product_codes_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ProductCodeList)>",
        "result_key": "ProductCodes"
    },
    "ec2_product_codes_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ProductCodeList)>",
        "result_key": "ProductCodes"
    },
    "ec2_product_codes_from_describe_snapshot_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "SnapshotId",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshot_attribute(['Attribute', 'SnapshotId'])",
            "method_name": "describe_snapshot_attribute",
            "required_args": [
                "Attribute",
                "SnapshotId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ProductCodeList)>",
        "result_key": "ProductCodes"
    },
    "ec2_product_codes_from_describe_volume_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VolumeId",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_attribute(['VolumeId'])",
            "method_name": "describe_volume_attribute",
            "required_args": [
                "VolumeId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ProductCodeList)>",
        "result_key": "ProductCodes"
    },
    "ec2_purchase_from_get_host_reservation_purchase_preview": {
        "fetch": {
            "all_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "docstring": "ec2.get_host_reservation_purchase_preview(['HostIdSet', 'OfferingId'])",
            "method_name": "get_host_reservation_purchase_preview",
            "required_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Purchase)>",
        "parametrize_id_source": [
            "HostIdSet"
        ],
        "result_key": "Purchase"
    },
    "ec2_ramdisk_id_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "RamdiskId"
    },
    "ec2_ramdisk_id_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "RamdiskId"
    },
    "ec2_region": {
        "fetch": {
            "all_args": [
                "Filters",
                "RegionNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_regions([])",
            "method_name": "describe_regions",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Region)>",
        "parametrize_id_source": [
            "RegionName"
        ],
        "result_key": "Regions"
    },
    "ec2_regions": {
        "fetch": {
            "all_args": [
                "Filters",
                "RegionNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_regions([])",
            "method_name": "describe_regions",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(RegionList)>",
        "result_key": "Regions"
    },
    "ec2_reservation": {
        "fetch": {
            "all_args": [
                "Filters",
                "InstanceIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_instances([])",
            "method_name": "describe_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Reservation)>",
        "parametrize_id_source": [
            "OwnerId"
        ],
        "result_key": "Reservations"
    },
    "ec2_reservations": {
        "fetch": {
            "all_args": [
                "Filters",
                "InstanceIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_instances([])",
            "method_name": "describe_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ReservationList)>",
        "result_key": "Reservations"
    },
    "ec2_reserved_instance_reservation_value": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservedInstanceReservationValue)>",
        "parametrize_id_source": [
            "ReservedInstanceId"
        ],
        "result_key": "ReservedInstanceValueSet"
    },
    "ec2_reserved_instance_value_rollup": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservationValue)>",
        "result_key": "ReservedInstanceValueRollup"
    },
    "ec2_reserved_instance_value_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ReservedInstanceReservationValueSet)>",
        "result_key": "ReservedInstanceValueSet"
    },
    "ec2_reserved_instances_from_describe_reserved_instances": {
        "fetch": {
            "all_args": [
                "Filters",
                "OfferingClass",
                "ReservedInstancesIds",
                "DryRun",
                "OfferingType"
            ],
            "docstring": "ec2.describe_reserved_instances([])",
            "method_name": "describe_reserved_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservedInstances)>",
        "parametrize_id_source": [
            "ReservedInstancesId"
        ],
        "result_key": "ReservedInstances"
    },
    "ec2_reserved_instances_listing": {
        "fetch": {
            "all_args": [
                "Filters",
                "ReservedInstancesId",
                "ReservedInstancesListingId"
            ],
            "docstring": "ec2.describe_reserved_instances_listings([])",
            "method_name": "describe_reserved_instances_listings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservedInstancesListing)>",
        "parametrize_id_source": [
            "ReservedInstancesId"
        ],
        "result_key": "ReservedInstancesListings"
    },
    "ec2_reserved_instances_listings": {
        "fetch": {
            "all_args": [
                "Filters",
                "ReservedInstancesId",
                "ReservedInstancesListingId"
            ],
            "docstring": "ec2.describe_reserved_instances_listings([])",
            "method_name": "describe_reserved_instances_listings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ReservedInstancesListingList)>",
        "result_key": "ReservedInstancesListings"
    },
    "ec2_reserved_instances_modification": {
        "fetch": {
            "all_args": [
                "Filters",
                "ReservedInstancesModificationIds"
            ],
            "docstring": "ec2.describe_reserved_instances_modifications([])",
            "method_name": "describe_reserved_instances_modifications",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservedInstancesModification)>",
        "parametrize_id_source": [
            "ReservedInstancesModificationId"
        ],
        "result_key": "ReservedInstancesModifications"
    },
    "ec2_reserved_instances_modifications": {
        "fetch": {
            "all_args": [
                "Filters",
                "ReservedInstancesModificationIds"
            ],
            "docstring": "ec2.describe_reserved_instances_modifications([])",
            "method_name": "describe_reserved_instances_modifications",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ReservedInstancesModificationList)>",
        "result_key": "ReservedInstancesModifications"
    },
    "ec2_reserved_instances_offering": {
        "fetch": {
            "all_args": [
                "AvailabilityZone",
                "Filters",
                "IncludeMarketplace",
                "InstanceType",
                "MinDuration",
                "OfferingClass",
                "ProductDescription",
                "ReservedInstancesOfferingIds",
                "DryRun",
                "InstanceTenancy",
                "OfferingType"
            ],
            "docstring": "ec2.describe_reserved_instances_offerings([])",
            "method_name": "describe_reserved_instances_offerings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservedInstancesOffering)>",
        "parametrize_id_source": [
            "AvailabilityZone"
        ],
        "result_key": "ReservedInstancesOfferings"
    },
    "ec2_reserved_instances_offerings": {
        "fetch": {
            "all_args": [
                "AvailabilityZone",
                "Filters",
                "IncludeMarketplace",
                "InstanceType",
                "MinDuration",
                "OfferingClass",
                "ProductDescription",
                "ReservedInstancesOfferingIds",
                "DryRun",
                "InstanceTenancy",
                "OfferingType"
            ],
            "docstring": "ec2.describe_reserved_instances_offerings([])",
            "method_name": "describe_reserved_instances_offerings",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ReservedInstancesOfferingList)>",
        "result_key": "ReservedInstancesOfferings"
    },
    "ec2_root_device_name": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "RootDeviceName"
    },
    "ec2_route_table": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "RouteTableIds"
            ],
            "docstring": "ec2.describe_route_tables([])",
            "method_name": "describe_route_tables",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(RouteTable)>",
        "parametrize_id_source": [
            "RouteTableId"
        ],
        "result_key": "RouteTables"
    },
    "ec2_route_tables": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "RouteTableIds"
            ],
            "docstring": "ec2.describe_route_tables([])",
            "method_name": "describe_route_tables",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(RouteTableList)>",
        "result_key": "RouteTables"
    },
    "ec2_scheduled_instance": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ScheduledInstanceIds",
                "SlotStartTimeRange"
            ],
            "docstring": "ec2.describe_scheduled_instances([])",
            "method_name": "describe_scheduled_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ScheduledInstance)>",
        "parametrize_id_source": [
            "ScheduledInstanceId"
        ],
        "result_key": "ScheduledInstanceSet"
    },
    "ec2_scheduled_instance_availability": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "FirstSlotStartTimeRange",
                "MinSlotDurationInHours",
                "Recurrence"
            ],
            "docstring": "ec2.describe_scheduled_instance_availability(['FirstSlotStartTimeRange', 'Recurrence'])",
            "method_name": "describe_scheduled_instance_availability",
            "required_args": [
                "FirstSlotStartTimeRange",
                "Recurrence"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ScheduledInstanceAvailability)>",
        "parametrize_id_source": [
            "FirstSlotStartTime"
        ],
        "result_key": "ScheduledInstanceAvailabilitySet"
    },
    "ec2_scheduled_instance_availability_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "FirstSlotStartTimeRange",
                "MinSlotDurationInHours",
                "Recurrence"
            ],
            "docstring": "ec2.describe_scheduled_instance_availability(['FirstSlotStartTimeRange', 'Recurrence'])",
            "method_name": "describe_scheduled_instance_availability",
            "required_args": [
                "FirstSlotStartTimeRange",
                "Recurrence"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ScheduledInstanceAvailabilitySet)>",
        "result_key": "ScheduledInstanceAvailabilitySet"
    },
    "ec2_scheduled_instance_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "ScheduledInstanceIds",
                "SlotStartTimeRange"
            ],
            "docstring": "ec2.describe_scheduled_instances([])",
            "method_name": "describe_scheduled_instances",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ScheduledInstanceSet)>",
        "result_key": "ScheduledInstanceSet"
    },
    "ec2_security_group": {
        "fetch": {
            "all_args": [
                "Filters",
                "GroupIds",
                "GroupNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_security_groups([])",
            "method_name": "describe_security_groups",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SecurityGroup)>",
        "parametrize_id_source": [
            "GroupName"
        ],
        "result_key": "SecurityGroups"
    },
    "ec2_security_group_reference": {
        "fetch": {
            "all_args": [
                "DryRun",
                "GroupId"
            ],
            "docstring": "ec2.describe_security_group_references(['GroupId'])",
            "method_name": "describe_security_group_references",
            "required_args": [
                "GroupId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SecurityGroupReference)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "SecurityGroupReferenceSet"
    },
    "ec2_security_group_reference_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "GroupId"
            ],
            "docstring": "ec2.describe_security_group_references(['GroupId'])",
            "method_name": "describe_security_group_references",
            "required_args": [
                "GroupId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SecurityGroupReferences)>",
        "result_key": "SecurityGroupReferenceSet"
    },
    "ec2_security_groups": {
        "fetch": {
            "all_args": [
                "Filters",
                "GroupIds",
                "GroupNames",
                "DryRun"
            ],
            "docstring": "ec2.describe_security_groups([])",
            "method_name": "describe_security_groups",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SecurityGroupList)>",
        "result_key": "SecurityGroups"
    },
    "ec2_service_names": {
        "fetch": {
            "all_args": [
                "DryRun"
            ],
            "docstring": "ec2.describe_vpc_endpoint_services([])",
            "method_name": "describe_vpc_endpoint_services",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ValueStringList)>",
        "result_key": "ServiceNames"
    },
    "ec2_snapshot": {
        "fetch": {
            "all_args": [
                "Filters",
                "OwnerIds",
                "RestorableByUserIds",
                "SnapshotIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Snapshot)>",
        "parametrize_id_source": [
            "OwnerId"
        ],
        "result_key": "Snapshots"
    },
    "ec2_snapshot_id": {
        "fetch": {
            "all_args": [
                "Attribute",
                "SnapshotId",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshot_attribute(['Attribute', 'SnapshotId'])",
            "method_name": "describe_snapshot_attribute",
            "required_args": [
                "Attribute",
                "SnapshotId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SnapshotId"
    },
    "ec2_snapshots": {
        "fetch": {
            "all_args": [
                "Filters",
                "OwnerIds",
                "RestorableByUserIds",
                "SnapshotIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SnapshotList)>",
        "result_key": "Snapshots"
    },
    "ec2_source_dest_check_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "SourceDestCheck"
    },
    "ec2_source_dest_check_from_describe_network_interface_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "NetworkInterfaceId"
            ],
            "docstring": "ec2.describe_network_interface_attribute(['NetworkInterfaceId'])",
            "method_name": "describe_network_interface_attribute",
            "required_args": [
                "NetworkInterfaceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeBooleanValue)>",
        "result_key": "SourceDestCheck"
    },
    "ec2_spot_datafeed_subscription": {
        "fetch": {
            "all_args": [
                "DryRun"
            ],
            "docstring": "ec2.describe_spot_datafeed_subscription([])",
            "method_name": "describe_spot_datafeed_subscription",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SpotDatafeedSubscription)>",
        "result_key": "SpotDatafeedSubscription"
    },
    "ec2_spot_fleet_request_config": {
        "fetch": {
            "all_args": [
                "DryRun",
                "SpotFleetRequestIds"
            ],
            "docstring": "ec2.describe_spot_fleet_requests([])",
            "method_name": "describe_spot_fleet_requests",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SpotFleetRequestConfig)>",
        "parametrize_id_source": [
            "SpotFleetRequestId"
        ],
        "result_key": "SpotFleetRequestConfigs"
    },
    "ec2_spot_fleet_request_configs": {
        "fetch": {
            "all_args": [
                "DryRun",
                "SpotFleetRequestIds"
            ],
            "docstring": "ec2.describe_spot_fleet_requests([])",
            "method_name": "describe_spot_fleet_requests",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SpotFleetRequestConfigSet)>",
        "result_key": "SpotFleetRequestConfigs"
    },
    "ec2_spot_fleet_request_id_from_describe_spot_fleet_instances": {
        "fetch": {
            "all_args": [
                "DryRun",
                "SpotFleetRequestId"
            ],
            "docstring": "ec2.describe_spot_fleet_instances(['SpotFleetRequestId'])",
            "method_name": "describe_spot_fleet_instances",
            "required_args": [
                "SpotFleetRequestId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SpotFleetRequestId"
    },
    "ec2_spot_fleet_request_id_from_describe_spot_fleet_request_history": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EventType",
                "SpotFleetRequestId",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_fleet_request_history(['SpotFleetRequestId', 'StartTime'])",
            "method_name": "describe_spot_fleet_request_history",
            "required_args": [
                "SpotFleetRequestId",
                "StartTime"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SpotFleetRequestId"
    },
    "ec2_spot_instance_request": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "SpotInstanceRequestIds"
            ],
            "docstring": "ec2.describe_spot_instance_requests([])",
            "method_name": "describe_spot_instance_requests",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SpotInstanceRequest)>",
        "parametrize_id_source": [
            "SpotInstanceRequestId"
        ],
        "result_key": "SpotInstanceRequests"
    },
    "ec2_spot_instance_requests": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "SpotInstanceRequestIds"
            ],
            "docstring": "ec2.describe_spot_instance_requests([])",
            "method_name": "describe_spot_instance_requests",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SpotInstanceRequestList)>",
        "result_key": "SpotInstanceRequests"
    },
    "ec2_spot_price": {
        "fetch": {
            "all_args": [
                "Filters",
                "AvailabilityZone",
                "DryRun",
                "EndTime",
                "InstanceTypes",
                "ProductDescriptions",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_price_history([])",
            "method_name": "describe_spot_price_history",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(SpotPrice)>",
        "parametrize_id_source": [
            "AvailabilityZone"
        ],
        "result_key": "SpotPriceHistory"
    },
    "ec2_spot_price_history": {
        "fetch": {
            "all_args": [
                "Filters",
                "AvailabilityZone",
                "DryRun",
                "EndTime",
                "InstanceTypes",
                "ProductDescriptions",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_price_history([])",
            "method_name": "describe_spot_price_history",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SpotPriceHistoryList)>",
        "result_key": "SpotPriceHistory"
    },
    "ec2_sriov_net_support_from_describe_image_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "ImageId",
                "DryRun"
            ],
            "docstring": "ec2.describe_image_attribute(['Attribute', 'ImageId'])",
            "method_name": "describe_image_attribute",
            "required_args": [
                "Attribute",
                "ImageId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "SriovNetSupport"
    },
    "ec2_sriov_net_support_from_describe_instance_attribute": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "SriovNetSupport"
    },
    "ec2_stale_security_group": {
        "fetch": {
            "all_args": [
                "DryRun",
                "VpcId"
            ],
            "docstring": "ec2.describe_stale_security_groups(['VpcId'])",
            "method_name": "describe_stale_security_groups",
            "required_args": [
                "VpcId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(StaleSecurityGroup)>",
        "parametrize_id_source": [
            "VpcId"
        ],
        "result_key": "StaleSecurityGroupSet"
    },
    "ec2_stale_security_group_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "VpcId"
            ],
            "docstring": "ec2.describe_stale_security_groups(['VpcId'])",
            "method_name": "describe_stale_security_groups",
            "required_args": [
                "VpcId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(StaleSecurityGroupSet)>",
        "result_key": "StaleSecurityGroupSet"
    },
    "ec2_start_time": {
        "fetch": {
            "all_args": [
                "DryRun",
                "EventType",
                "SpotFleetRequestId",
                "StartTime"
            ],
            "docstring": "ec2.describe_spot_fleet_request_history(['SpotFleetRequestId', 'StartTime'])",
            "method_name": "describe_spot_fleet_request_history",
            "required_args": [
                "SpotFleetRequestId",
                "StartTime"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "StartTime"
    },
    "ec2_statuses_from_describe_id_format": {
        "fetch": {
            "all_args": [
                "Resource"
            ],
            "docstring": "ec2.describe_id_format([])",
            "method_name": "describe_id_format",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(IdFormatList)>",
        "result_key": "Statuses"
    },
    "ec2_statuses_from_describe_identity_id_format": {
        "fetch": {
            "all_args": [
                "PrincipalArn",
                "Resource"
            ],
            "docstring": "ec2.describe_identity_id_format(['PrincipalArn'])",
            "method_name": "describe_identity_id_format",
            "required_args": [
                "PrincipalArn"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(IdFormatList)>",
        "result_key": "Statuses"
    },
    "ec2_string": {
        "fetch": {
            "all_args": [
                "DryRun"
            ],
            "docstring": "ec2.describe_vpc_endpoint_services([])",
            "method_name": "describe_vpc_endpoint_services",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "ServiceNames"
    },
    "ec2_subnet": {
        "fetch": {
            "all_args": [
                "Filters",
                "SubnetIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_subnets([])",
            "method_name": "describe_subnets",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Subnet)>",
        "parametrize_id_source": [
            "SubnetId"
        ],
        "result_key": "Subnets"
    },
    "ec2_subnets": {
        "fetch": {
            "all_args": [
                "Filters",
                "SubnetIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_subnets([])",
            "method_name": "describe_subnets",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(SubnetList)>",
        "result_key": "Subnets"
    },
    "ec2_tag_description": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters"
            ],
            "docstring": "ec2.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(TagDescription)>",
        "parametrize_id_source": [
            "ResourceId"
        ],
        "result_key": "Tags"
    },
    "ec2_tags": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters"
            ],
            "docstring": "ec2.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(TagDescriptionList)>",
        "result_key": "Tags"
    },
    "ec2_target_configuration_value_rollup": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(ReservationValue)>",
        "result_key": "TargetConfigurationValueRollup"
    },
    "ec2_target_configuration_value_set": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(TargetReservationValueSet)>",
        "result_key": "TargetConfigurationValueSet"
    },
    "ec2_target_reservation_value": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(TargetReservationValue)>",
        "parametrize_id_source": [
            "TargetConfiguration"
        ],
        "result_key": "TargetConfigurationValueSet"
    },
    "ec2_timestamp_from_get_console_output": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_console_output(['InstanceId'])",
            "method_name": "get_console_output",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "Timestamp"
    },
    "ec2_timestamp_from_get_password_data": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "DryRun"
            ],
            "docstring": "ec2.get_password_data(['InstanceId'])",
            "method_name": "get_password_data",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "Timestamp"
    },
    "ec2_total_hourly_price": {
        "fetch": {
            "all_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "docstring": "ec2.get_host_reservation_purchase_preview(['HostIdSet', 'OfferingId'])",
            "method_name": "get_host_reservation_purchase_preview",
            "required_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TotalHourlyPrice"
    },
    "ec2_total_upfront_price": {
        "fetch": {
            "all_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "docstring": "ec2.get_host_reservation_purchase_preview(['HostIdSet', 'OfferingId'])",
            "method_name": "get_host_reservation_purchase_preview",
            "required_args": [
                "HostIdSet",
                "OfferingId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TotalUpfrontPrice"
    },
    "ec2_user_data": {
        "fetch": {
            "all_args": [
                "Attribute",
                "DryRun",
                "InstanceId"
            ],
            "docstring": "ec2.describe_instance_attribute(['Attribute', 'InstanceId'])",
            "method_name": "describe_instance_attribute",
            "required_args": [
                "Attribute",
                "InstanceId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(AttributeValue)>",
        "result_key": "UserData"
    },
    "ec2_validation_failure_reason": {
        "fetch": {
            "all_args": [
                "DryRun",
                "ReservedInstanceIds",
                "TargetConfigurations"
            ],
            "docstring": "ec2.get_reserved_instances_exchange_quote(['ReservedInstanceIds'])",
            "method_name": "get_reserved_instances_exchange_quote",
            "required_args": [
                "ReservedInstanceIds"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ValidationFailureReason"
    },
    "ec2_volume": {
        "fetch": {
            "all_args": [
                "Filters",
                "VolumeIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_volumes([])",
            "method_name": "describe_volumes",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Volume)>",
        "parametrize_id_source": [
            "VolumeId"
        ],
        "result_key": "Volumes"
    },
    "ec2_volume_id": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VolumeId",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_attribute(['VolumeId'])",
            "method_name": "describe_volume_attribute",
            "required_args": [
                "VolumeId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "VolumeId"
    },
    "ec2_volume_modification": {
        "fetch": {
            "all_args": [
                "DryRun",
                "VolumeIds",
                "Filters"
            ],
            "docstring": "ec2.describe_volumes_modifications([])",
            "method_name": "describe_volumes_modifications",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VolumeModification)>",
        "parametrize_id_source": [
            "VolumeId"
        ],
        "result_key": "VolumesModifications"
    },
    "ec2_volume_status_item": {
        "fetch": {
            "all_args": [
                "Filters",
                "VolumeIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_status([])",
            "method_name": "describe_volume_status",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VolumeStatusItem)>",
        "parametrize_id_source": [
            "VolumeId"
        ],
        "result_key": "VolumeStatuses"
    },
    "ec2_volume_statuses": {
        "fetch": {
            "all_args": [
                "Filters",
                "VolumeIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_volume_status([])",
            "method_name": "describe_volume_status",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VolumeStatusList)>",
        "result_key": "VolumeStatuses"
    },
    "ec2_volumes": {
        "fetch": {
            "all_args": [
                "Filters",
                "VolumeIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_volumes([])",
            "method_name": "describe_volumes",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VolumeList)>",
        "result_key": "Volumes"
    },
    "ec2_volumes_modifications": {
        "fetch": {
            "all_args": [
                "DryRun",
                "VolumeIds",
                "Filters"
            ],
            "docstring": "ec2.describe_volumes_modifications([])",
            "method_name": "describe_volumes_modifications",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VolumeModificationList)>",
        "result_key": "VolumesModifications"
    },
    "ec2_vpc": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpcIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpcs([])",
            "method_name": "describe_vpcs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(Vpc)>",
        "parametrize_id_source": [
            "VpcId"
        ],
        "result_key": "Vpcs"
    },
    "ec2_vpc_classic_link": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "VpcIds"
            ],
            "docstring": "ec2.describe_vpc_classic_link([])",
            "method_name": "describe_vpc_classic_link",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VpcClassicLink)>",
        "parametrize_id_source": [
            "VpcId"
        ],
        "result_key": "Vpcs"
    },
    "ec2_vpc_endpoint": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "VpcEndpointIds"
            ],
            "docstring": "ec2.describe_vpc_endpoints([])",
            "method_name": "describe_vpc_endpoints",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VpcEndpoint)>",
        "parametrize_id_source": [
            "VpcEndpointId"
        ],
        "result_key": "VpcEndpoints"
    },
    "ec2_vpc_endpoints": {
        "fetch": {
            "all_args": [
                "DryRun",
                "Filters",
                "VpcEndpointIds"
            ],
            "docstring": "ec2.describe_vpc_endpoints([])",
            "method_name": "describe_vpc_endpoints",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpcEndpointSet)>",
        "result_key": "VpcEndpoints"
    },
    "ec2_vpc_id": {
        "fetch": {
            "all_args": [
                "Attribute",
                "VpcId",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpc_attribute(['Attribute', 'VpcId'])",
            "method_name": "describe_vpc_attribute",
            "required_args": [
                "Attribute",
                "VpcId"
            ],
            "service_name": "ec2"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "VpcId"
    },
    "ec2_vpc_peering_connection": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "VpcPeeringConnectionIds"
            ],
            "docstring": "ec2.describe_vpc_peering_connections([])",
            "method_name": "describe_vpc_peering_connections",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VpcPeeringConnection)>",
        "parametrize_id_source": [
            "VpcPeeringConnectionId"
        ],
        "result_key": "VpcPeeringConnections"
    },
    "ec2_vpc_peering_connections": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "VpcPeeringConnectionIds"
            ],
            "docstring": "ec2.describe_vpc_peering_connections([])",
            "method_name": "describe_vpc_peering_connections",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpcPeeringConnectionList)>",
        "result_key": "VpcPeeringConnections"
    },
    "ec2_vpcs_from_describe_vpc_classic_link": {
        "fetch": {
            "all_args": [
                "Filters",
                "DryRun",
                "VpcIds"
            ],
            "docstring": "ec2.describe_vpc_classic_link([])",
            "method_name": "describe_vpc_classic_link",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpcClassicLinkList)>",
        "result_key": "Vpcs"
    },
    "ec2_vpcs_from_describe_vpc_classic_link_dns_support": {
        "fetch": {
            "all_args": [
                "VpcIds"
            ],
            "docstring": "ec2.describe_vpc_classic_link_dns_support([])",
            "method_name": "describe_vpc_classic_link_dns_support",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(ClassicLinkDnsSupportList)>",
        "result_key": "Vpcs"
    },
    "ec2_vpcs_from_describe_vpcs": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpcIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpcs([])",
            "method_name": "describe_vpcs",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpcList)>",
        "result_key": "Vpcs"
    },
    "ec2_vpn_connection": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpnConnectionIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpn_connections([])",
            "method_name": "describe_vpn_connections",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VpnConnection)>",
        "parametrize_id_source": [
            "VpnConnectionId"
        ],
        "result_key": "VpnConnections"
    },
    "ec2_vpn_connections": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpnConnectionIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpn_connections([])",
            "method_name": "describe_vpn_connections",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpnConnectionList)>",
        "result_key": "VpnConnections"
    },
    "ec2_vpn_gateway": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpnGatewayIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpn_gateways([])",
            "method_name": "describe_vpn_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<StructureShape(VpnGateway)>",
        "parametrize_id_source": [
            "VpnGatewayId"
        ],
        "result_key": "VpnGateways"
    },
    "ec2_vpn_gateways": {
        "fetch": {
            "all_args": [
                "Filters",
                "VpnGatewayIds",
                "DryRun"
            ],
            "docstring": "ec2.describe_vpn_gateways([])",
            "method_name": "describe_vpn_gateways",
            "required_args": [],
            "service_name": "ec2"
        },
        "output_shape": "<ListShape(VpnGatewayList)>",
        "result_key": "VpnGateways"
    },
    "ecr_authorization_data_from_get_authorization_token": {
        "fetch": {
            "all_args": [
                "registryIds"
            ],
            "docstring": "ecr.get_authorization_token([])",
            "method_name": "get_authorization_token",
            "required_args": [],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(AuthorizationData)>",
        "parametrize_id_source": null,
        "result_key": "authorizationData"
    },
    "ecr_download_url": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "layerDigest"
            ],
            "docstring": "ecr.get_download_url_for_layer(['repositoryName', 'layerDigest'])",
            "method_name": "get_download_url_for_layer",
            "required_args": [
                "repositoryName",
                "layerDigest"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(Url)>",
        "result_key": "downloadUrl"
    },
    "ecr_image_detail": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.describe_images(['repositoryName'])",
            "method_name": "describe_images",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(ImageDetail)>",
        "parametrize_id_source": [
            "repositoryName"
        ],
        "result_key": "imageDetails"
    },
    "ecr_image_details": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.describe_images(['repositoryName'])",
            "method_name": "describe_images",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<ListShape(ImageDetailList)>",
        "result_key": "imageDetails"
    },
    "ecr_image_identifier": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "filter"
            ],
            "docstring": "ecr.list_images(['repositoryName'])",
            "method_name": "list_images",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(ImageIdentifier)>",
        "parametrize_id_source": null,
        "result_key": "imageIds"
    },
    "ecr_image_ids": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "filter"
            ],
            "docstring": "ecr.list_images(['repositoryName'])",
            "method_name": "list_images",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<ListShape(ImageIdentifierList)>",
        "result_key": "imageIds"
    },
    "ecr_last_evaluated_at": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_lifecycle_policy(['repositoryName'])",
            "method_name": "get_lifecycle_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<Shape(EvaluationTimestamp)>",
        "result_key": "lastEvaluatedAt"
    },
    "ecr_layer_digest": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "layerDigest"
            ],
            "docstring": "ecr.get_download_url_for_layer(['repositoryName', 'layerDigest'])",
            "method_name": "get_download_url_for_layer",
            "required_args": [
                "repositoryName",
                "layerDigest"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(LayerDigest)>",
        "result_key": "layerDigest"
    },
    "ecr_lifecycle_policy_preview_result": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(LifecyclePolicyPreviewResult)>",
        "parametrize_id_source": null,
        "result_key": "previewResults"
    },
    "ecr_lifecycle_policy_text_from_get_lifecycle_policy": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_lifecycle_policy(['repositoryName'])",
            "method_name": "get_lifecycle_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(LifecyclePolicyText)>",
        "result_key": "lifecyclePolicyText"
    },
    "ecr_lifecycle_policy_text_from_get_lifecycle_policy_preview": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(LifecyclePolicyText)>",
        "result_key": "lifecyclePolicyText"
    },
    "ecr_policy_text": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_repository_policy(['repositoryName'])",
            "method_name": "get_repository_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RepositoryPolicyText)>",
        "result_key": "policyText"
    },
    "ecr_preview_results": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<ListShape(LifecyclePolicyPreviewResultList)>",
        "result_key": "previewResults"
    },
    "ecr_registry_id_from_get_lifecycle_policy": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_lifecycle_policy(['repositoryName'])",
            "method_name": "get_lifecycle_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RegistryId)>",
        "result_key": "registryId"
    },
    "ecr_registry_id_from_get_lifecycle_policy_preview": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RegistryId)>",
        "result_key": "registryId"
    },
    "ecr_registry_id_from_get_repository_policy": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_repository_policy(['repositoryName'])",
            "method_name": "get_repository_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RegistryId)>",
        "result_key": "registryId"
    },
    "ecr_repositories": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryNames"
            ],
            "docstring": "ecr.describe_repositories([])",
            "method_name": "describe_repositories",
            "required_args": [],
            "service_name": "ecr"
        },
        "output_shape": "<ListShape(RepositoryList)>",
        "result_key": "repositories"
    },
    "ecr_repository": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryNames"
            ],
            "docstring": "ecr.describe_repositories([])",
            "method_name": "describe_repositories",
            "required_args": [],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(Repository)>",
        "parametrize_id_source": [
            "registryId"
        ],
        "result_key": "repositories"
    },
    "ecr_repository_name_from_get_lifecycle_policy": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_lifecycle_policy(['repositoryName'])",
            "method_name": "get_lifecycle_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RepositoryName)>",
        "result_key": "repositoryName"
    },
    "ecr_repository_name_from_get_lifecycle_policy_preview": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RepositoryName)>",
        "result_key": "repositoryName"
    },
    "ecr_repository_name_from_get_repository_policy": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName"
            ],
            "docstring": "ecr.get_repository_policy(['repositoryName'])",
            "method_name": "get_repository_policy",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(RepositoryName)>",
        "result_key": "repositoryName"
    },
    "ecr_status": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StringShape(LifecyclePolicyPreviewStatus)>",
        "result_key": "status"
    },
    "ecr_summary": {
        "fetch": {
            "all_args": [
                "registryId",
                "repositoryName",
                "imageIds",
                "filter"
            ],
            "docstring": "ecr.get_lifecycle_policy_preview(['repositoryName'])",
            "method_name": "get_lifecycle_policy_preview",
            "required_args": [
                "repositoryName"
            ],
            "service_name": "ecr"
        },
        "output_shape": "<StructureShape(LifecyclePolicyPreviewSummary)>",
        "result_key": "summary"
    },
    "ecs_attribute": {
        "fetch": {
            "all_args": [
                "cluster",
                "targetType",
                "attributeName",
                "attributeValue"
            ],
            "docstring": "ecs.list_attributes(['targetType'])",
            "method_name": "list_attributes",
            "required_args": [
                "targetType"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Attribute)>",
        "parametrize_id_source": [
            "targetType"
        ],
        "result_key": "attributes"
    },
    "ecs_attributes": {
        "fetch": {
            "all_args": [
                "cluster",
                "targetType",
                "attributeName",
                "attributeValue"
            ],
            "docstring": "ecs.list_attributes(['targetType'])",
            "method_name": "list_attributes",
            "required_args": [
                "targetType"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Attributes)>",
        "result_key": "attributes"
    },
    "ecs_cluster": {
        "fetch": {
            "all_args": [
                "clusters"
            ],
            "docstring": "ecs.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Cluster)>",
        "parametrize_id_source": [
            "clusterArn"
        ],
        "result_key": "clusters"
    },
    "ecs_cluster_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "ecs.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "clusterArns"
    },
    "ecs_clusters": {
        "fetch": {
            "all_args": [
                "clusters"
            ],
            "docstring": "ecs.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Clusters)>",
        "result_key": "clusters"
    },
    "ecs_container_instance": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstances"
            ],
            "docstring": "ecs.describe_container_instances(['containerInstances'])",
            "method_name": "describe_container_instances",
            "required_args": [
                "containerInstances"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(ContainerInstance)>",
        "parametrize_id_source": [
            "ec2InstanceId"
        ],
        "result_key": "containerInstances"
    },
    "ecs_container_instance_arns": {
        "fetch": {
            "all_args": [
                "cluster",
                "filter",
                "status"
            ],
            "docstring": "ecs.list_container_instances([])",
            "method_name": "list_container_instances",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "containerInstanceArns"
    },
    "ecs_container_instances": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstances"
            ],
            "docstring": "ecs.describe_container_instances(['containerInstances'])",
            "method_name": "describe_container_instances",
            "required_args": [
                "containerInstances"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(ContainerInstances)>",
        "result_key": "containerInstances"
    },
    "ecs_failure_from_describe_clusters": {
        "fetch": {
            "all_args": [
                "clusters"
            ],
            "docstring": "ecs.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Failure)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "failures"
    },
    "ecs_failure_from_describe_container_instances": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstances"
            ],
            "docstring": "ecs.describe_container_instances(['containerInstances'])",
            "method_name": "describe_container_instances",
            "required_args": [
                "containerInstances"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Failure)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "failures"
    },
    "ecs_failure_from_describe_services": {
        "fetch": {
            "all_args": [
                "cluster",
                "services"
            ],
            "docstring": "ecs.describe_services(['services'])",
            "method_name": "describe_services",
            "required_args": [
                "services"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Failure)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "failures"
    },
    "ecs_failure_from_describe_tasks": {
        "fetch": {
            "all_args": [
                "cluster",
                "tasks"
            ],
            "docstring": "ecs.describe_tasks(['tasks'])",
            "method_name": "describe_tasks",
            "required_args": [
                "tasks"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Failure)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "failures"
    },
    "ecs_failures_from_describe_clusters": {
        "fetch": {
            "all_args": [
                "clusters"
            ],
            "docstring": "ecs.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Failures)>",
        "result_key": "failures"
    },
    "ecs_failures_from_describe_container_instances": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstances"
            ],
            "docstring": "ecs.describe_container_instances(['containerInstances'])",
            "method_name": "describe_container_instances",
            "required_args": [
                "containerInstances"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Failures)>",
        "result_key": "failures"
    },
    "ecs_failures_from_describe_services": {
        "fetch": {
            "all_args": [
                "cluster",
                "services"
            ],
            "docstring": "ecs.describe_services(['services'])",
            "method_name": "describe_services",
            "required_args": [
                "services"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Failures)>",
        "result_key": "failures"
    },
    "ecs_failures_from_describe_tasks": {
        "fetch": {
            "all_args": [
                "cluster",
                "tasks"
            ],
            "docstring": "ecs.describe_tasks(['tasks'])",
            "method_name": "describe_tasks",
            "required_args": [
                "tasks"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Failures)>",
        "result_key": "failures"
    },
    "ecs_families": {
        "fetch": {
            "all_args": [
                "familyPrefix",
                "status"
            ],
            "docstring": "ecs.list_task_definition_families([])",
            "method_name": "list_task_definition_families",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "families"
    },
    "ecs_service": {
        "fetch": {
            "all_args": [
                "cluster",
                "services"
            ],
            "docstring": "ecs.describe_services(['services'])",
            "method_name": "describe_services",
            "required_args": [
                "services"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Service)>",
        "parametrize_id_source": [
            "serviceArn"
        ],
        "result_key": "services"
    },
    "ecs_service_arns": {
        "fetch": {
            "all_args": [
                "cluster"
            ],
            "docstring": "ecs.list_services([])",
            "method_name": "list_services",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "serviceArns"
    },
    "ecs_services": {
        "fetch": {
            "all_args": [
                "cluster",
                "services"
            ],
            "docstring": "ecs.describe_services(['services'])",
            "method_name": "describe_services",
            "required_args": [
                "services"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Services)>",
        "result_key": "services"
    },
    "ecs_string_from_list_clusters": {
        "fetch": {
            "all_args": [],
            "docstring": "ecs.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "clusterArns"
    },
    "ecs_string_from_list_container_instances": {
        "fetch": {
            "all_args": [
                "cluster",
                "filter",
                "status"
            ],
            "docstring": "ecs.list_container_instances([])",
            "method_name": "list_container_instances",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "containerInstanceArns"
    },
    "ecs_string_from_list_services": {
        "fetch": {
            "all_args": [
                "cluster"
            ],
            "docstring": "ecs.list_services([])",
            "method_name": "list_services",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "serviceArns"
    },
    "ecs_string_from_list_task_definition_families": {
        "fetch": {
            "all_args": [
                "familyPrefix",
                "status"
            ],
            "docstring": "ecs.list_task_definition_families([])",
            "method_name": "list_task_definition_families",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "families"
    },
    "ecs_string_from_list_task_definitions": {
        "fetch": {
            "all_args": [
                "familyPrefix",
                "status",
                "sort"
            ],
            "docstring": "ecs.list_task_definitions([])",
            "method_name": "list_task_definitions",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "taskDefinitionArns"
    },
    "ecs_string_from_list_tasks": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstance",
                "family",
                "startedBy",
                "serviceName",
                "desiredStatus"
            ],
            "docstring": "ecs.list_tasks([])",
            "method_name": "list_tasks",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "taskArns"
    },
    "ecs_task": {
        "fetch": {
            "all_args": [
                "cluster",
                "tasks"
            ],
            "docstring": "ecs.describe_tasks(['tasks'])",
            "method_name": "describe_tasks",
            "required_args": [
                "tasks"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(Task)>",
        "parametrize_id_source": [
            "overrides"
        ],
        "result_key": "tasks"
    },
    "ecs_task_arns": {
        "fetch": {
            "all_args": [
                "cluster",
                "containerInstance",
                "family",
                "startedBy",
                "serviceName",
                "desiredStatus"
            ],
            "docstring": "ecs.list_tasks([])",
            "method_name": "list_tasks",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "taskArns"
    },
    "ecs_task_definition": {
        "fetch": {
            "all_args": [
                "taskDefinition"
            ],
            "docstring": "ecs.describe_task_definition(['taskDefinition'])",
            "method_name": "describe_task_definition",
            "required_args": [
                "taskDefinition"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<StructureShape(TaskDefinition)>",
        "result_key": "taskDefinition"
    },
    "ecs_task_definition_arns": {
        "fetch": {
            "all_args": [
                "familyPrefix",
                "status",
                "sort"
            ],
            "docstring": "ecs.list_task_definitions([])",
            "method_name": "list_task_definitions",
            "required_args": [],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "taskDefinitionArns"
    },
    "ecs_tasks": {
        "fetch": {
            "all_args": [
                "cluster",
                "tasks"
            ],
            "docstring": "ecs.describe_tasks(['tasks'])",
            "method_name": "describe_tasks",
            "required_args": [
                "tasks"
            ],
            "service_name": "ecs"
        },
        "output_shape": "<ListShape(Tasks)>",
        "result_key": "tasks"
    },
    "efs_file_system_description": {
        "fetch": {
            "all_args": [
                "CreationToken",
                "FileSystemId"
            ],
            "docstring": "efs.describe_file_systems([])",
            "method_name": "describe_file_systems",
            "required_args": [],
            "service_name": "efs"
        },
        "output_shape": "<StructureShape(FileSystemDescription)>",
        "parametrize_id_source": [
            "CreationToken"
        ],
        "result_key": "FileSystems"
    },
    "efs_file_systems": {
        "fetch": {
            "all_args": [
                "CreationToken",
                "FileSystemId"
            ],
            "docstring": "efs.describe_file_systems([])",
            "method_name": "describe_file_systems",
            "required_args": [],
            "service_name": "efs"
        },
        "output_shape": "<ListShape(FileSystemDescriptions)>",
        "result_key": "FileSystems"
    },
    "efs_mount_target_description": {
        "fetch": {
            "all_args": [
                "FileSystemId",
                "MountTargetId"
            ],
            "docstring": "efs.describe_mount_targets([])",
            "method_name": "describe_mount_targets",
            "required_args": [],
            "service_name": "efs"
        },
        "output_shape": "<StructureShape(MountTargetDescription)>",
        "parametrize_id_source": [
            "MountTargetId"
        ],
        "result_key": "MountTargets"
    },
    "efs_mount_targets": {
        "fetch": {
            "all_args": [
                "FileSystemId",
                "MountTargetId"
            ],
            "docstring": "efs.describe_mount_targets([])",
            "method_name": "describe_mount_targets",
            "required_args": [],
            "service_name": "efs"
        },
        "output_shape": "<ListShape(MountTargetDescriptions)>",
        "result_key": "MountTargets"
    },
    "efs_security_group": {
        "fetch": {
            "all_args": [
                "MountTargetId"
            ],
            "docstring": "efs.describe_mount_target_security_groups(['MountTargetId'])",
            "method_name": "describe_mount_target_security_groups",
            "required_args": [
                "MountTargetId"
            ],
            "service_name": "efs"
        },
        "output_shape": "<StringShape(SecurityGroup)>",
        "parametrize_id_source": [
            "SecurityGroup"
        ],
        "result_key": "SecurityGroups"
    },
    "efs_security_groups": {
        "fetch": {
            "all_args": [
                "MountTargetId"
            ],
            "docstring": "efs.describe_mount_target_security_groups(['MountTargetId'])",
            "method_name": "describe_mount_target_security_groups",
            "required_args": [
                "MountTargetId"
            ],
            "service_name": "efs"
        },
        "output_shape": "<ListShape(SecurityGroups)>",
        "result_key": "SecurityGroups"
    },
    "efs_tag": {
        "fetch": {
            "all_args": [
                "FileSystemId"
            ],
            "docstring": "efs.describe_tags(['FileSystemId'])",
            "method_name": "describe_tags",
            "required_args": [
                "FileSystemId"
            ],
            "service_name": "efs"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "efs_tags": {
        "fetch": {
            "all_args": [
                "FileSystemId"
            ],
            "docstring": "efs.describe_tags(['FileSystemId'])",
            "method_name": "describe_tags",
            "required_args": [
                "FileSystemId"
            ],
            "service_name": "efs"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "elasticache_cache_cluster": {
        "fetch": {
            "all_args": [
                "CacheClusterId",
                "ShowCacheNodeInfo",
                "ShowCacheClustersNotInReplicationGroups"
            ],
            "docstring": "elasticache.describe_cache_clusters([])",
            "method_name": "describe_cache_clusters",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheCluster)>",
        "parametrize_id_source": [
            "CacheClusterId"
        ],
        "result_key": "CacheClusters"
    },
    "elasticache_cache_clusters": {
        "fetch": {
            "all_args": [
                "CacheClusterId",
                "ShowCacheNodeInfo",
                "ShowCacheClustersNotInReplicationGroups"
            ],
            "docstring": "elasticache.describe_cache_clusters([])",
            "method_name": "describe_cache_clusters",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheClusterList)>",
        "result_key": "CacheClusters"
    },
    "elasticache_cache_engine_version": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "CacheParameterGroupFamily",
                "DefaultOnly"
            ],
            "docstring": "elasticache.describe_cache_engine_versions([])",
            "method_name": "describe_cache_engine_versions",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheEngineVersion)>",
        "parametrize_id_source": [
            "Engine"
        ],
        "result_key": "CacheEngineVersions"
    },
    "elasticache_cache_engine_versions": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "CacheParameterGroupFamily",
                "DefaultOnly"
            ],
            "docstring": "elasticache.describe_cache_engine_versions([])",
            "method_name": "describe_cache_engine_versions",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheEngineVersionList)>",
        "result_key": "CacheEngineVersions"
    },
    "elasticache_cache_node_type_specific_parameter": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName",
                "Source"
            ],
            "docstring": "elasticache.describe_cache_parameters(['CacheParameterGroupName'])",
            "method_name": "describe_cache_parameters",
            "required_args": [
                "CacheParameterGroupName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheNodeTypeSpecificParameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "CacheNodeTypeSpecificParameters"
    },
    "elasticache_cache_node_type_specific_parameters": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName",
                "Source"
            ],
            "docstring": "elasticache.describe_cache_parameters(['CacheParameterGroupName'])",
            "method_name": "describe_cache_parameters",
            "required_args": [
                "CacheParameterGroupName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheNodeTypeSpecificParametersList)>",
        "result_key": "CacheNodeTypeSpecificParameters"
    },
    "elasticache_cache_parameter_group": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName"
            ],
            "docstring": "elasticache.describe_cache_parameter_groups([])",
            "method_name": "describe_cache_parameter_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheParameterGroup)>",
        "parametrize_id_source": [
            "CacheParameterGroupName"
        ],
        "result_key": "CacheParameterGroups"
    },
    "elasticache_cache_parameter_groups": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName"
            ],
            "docstring": "elasticache.describe_cache_parameter_groups([])",
            "method_name": "describe_cache_parameter_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheParameterGroupList)>",
        "result_key": "CacheParameterGroups"
    },
    "elasticache_cache_security_group": {
        "fetch": {
            "all_args": [
                "CacheSecurityGroupName"
            ],
            "docstring": "elasticache.describe_cache_security_groups([])",
            "method_name": "describe_cache_security_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheSecurityGroup)>",
        "parametrize_id_source": [
            "CacheSecurityGroupName"
        ],
        "result_key": "CacheSecurityGroups"
    },
    "elasticache_cache_security_groups": {
        "fetch": {
            "all_args": [
                "CacheSecurityGroupName"
            ],
            "docstring": "elasticache.describe_cache_security_groups([])",
            "method_name": "describe_cache_security_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheSecurityGroups)>",
        "result_key": "CacheSecurityGroups"
    },
    "elasticache_cache_subnet_group": {
        "fetch": {
            "all_args": [
                "CacheSubnetGroupName"
            ],
            "docstring": "elasticache.describe_cache_subnet_groups([])",
            "method_name": "describe_cache_subnet_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(CacheSubnetGroup)>",
        "parametrize_id_source": [
            "CacheSubnetGroupName"
        ],
        "result_key": "CacheSubnetGroups"
    },
    "elasticache_cache_subnet_groups": {
        "fetch": {
            "all_args": [
                "CacheSubnetGroupName"
            ],
            "docstring": "elasticache.describe_cache_subnet_groups([])",
            "method_name": "describe_cache_subnet_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(CacheSubnetGroups)>",
        "result_key": "CacheSubnetGroups"
    },
    "elasticache_engine_defaults": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupFamily"
            ],
            "docstring": "elasticache.describe_engine_default_parameters(['CacheParameterGroupFamily'])",
            "method_name": "describe_engine_default_parameters",
            "required_args": [
                "CacheParameterGroupFamily"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(EngineDefaults)>",
        "result_key": "EngineDefaults"
    },
    "elasticache_event": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "elasticache.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "SourceIdentifier"
        ],
        "result_key": "Events"
    },
    "elasticache_events": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "elasticache.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "elasticache_parameter": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName",
                "Source"
            ],
            "docstring": "elasticache.describe_cache_parameters(['CacheParameterGroupName'])",
            "method_name": "describe_cache_parameters",
            "required_args": [
                "CacheParameterGroupName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "Parameters"
    },
    "elasticache_parameters": {
        "fetch": {
            "all_args": [
                "CacheParameterGroupName",
                "Source"
            ],
            "docstring": "elasticache.describe_cache_parameters(['CacheParameterGroupName'])",
            "method_name": "describe_cache_parameters",
            "required_args": [
                "CacheParameterGroupName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(ParametersList)>",
        "result_key": "Parameters"
    },
    "elasticache_replication_group": {
        "fetch": {
            "all_args": [
                "ReplicationGroupId"
            ],
            "docstring": "elasticache.describe_replication_groups([])",
            "method_name": "describe_replication_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(ReplicationGroup)>",
        "parametrize_id_source": [
            "ReplicationGroupId"
        ],
        "result_key": "ReplicationGroups"
    },
    "elasticache_replication_groups": {
        "fetch": {
            "all_args": [
                "ReplicationGroupId"
            ],
            "docstring": "elasticache.describe_replication_groups([])",
            "method_name": "describe_replication_groups",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(ReplicationGroupList)>",
        "result_key": "ReplicationGroups"
    },
    "elasticache_reserved_cache_node": {
        "fetch": {
            "all_args": [
                "ReservedCacheNodeId",
                "ReservedCacheNodesOfferingId",
                "CacheNodeType",
                "Duration",
                "ProductDescription",
                "OfferingType"
            ],
            "docstring": "elasticache.describe_reserved_cache_nodes([])",
            "method_name": "describe_reserved_cache_nodes",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(ReservedCacheNode)>",
        "parametrize_id_source": [
            "ReservedCacheNodeId"
        ],
        "result_key": "ReservedCacheNodes"
    },
    "elasticache_reserved_cache_nodes": {
        "fetch": {
            "all_args": [
                "ReservedCacheNodeId",
                "ReservedCacheNodesOfferingId",
                "CacheNodeType",
                "Duration",
                "ProductDescription",
                "OfferingType"
            ],
            "docstring": "elasticache.describe_reserved_cache_nodes([])",
            "method_name": "describe_reserved_cache_nodes",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(ReservedCacheNodeList)>",
        "result_key": "ReservedCacheNodes"
    },
    "elasticache_reserved_cache_nodes_offering": {
        "fetch": {
            "all_args": [
                "ReservedCacheNodesOfferingId",
                "CacheNodeType",
                "Duration",
                "ProductDescription",
                "OfferingType"
            ],
            "docstring": "elasticache.describe_reserved_cache_nodes_offerings([])",
            "method_name": "describe_reserved_cache_nodes_offerings",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(ReservedCacheNodesOffering)>",
        "parametrize_id_source": [
            "ReservedCacheNodesOfferingId"
        ],
        "result_key": "ReservedCacheNodesOfferings"
    },
    "elasticache_reserved_cache_nodes_offerings": {
        "fetch": {
            "all_args": [
                "ReservedCacheNodesOfferingId",
                "CacheNodeType",
                "Duration",
                "ProductDescription",
                "OfferingType"
            ],
            "docstring": "elasticache.describe_reserved_cache_nodes_offerings([])",
            "method_name": "describe_reserved_cache_nodes_offerings",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(ReservedCacheNodesOfferingList)>",
        "result_key": "ReservedCacheNodesOfferings"
    },
    "elasticache_scale_up_modifications": {
        "fetch": {
            "all_args": [
                "CacheClusterId",
                "ReplicationGroupId"
            ],
            "docstring": "elasticache.list_allowed_node_type_modifications([])",
            "method_name": "list_allowed_node_type_modifications",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(NodeTypeList)>",
        "result_key": "ScaleUpModifications"
    },
    "elasticache_snapshot": {
        "fetch": {
            "all_args": [
                "ReplicationGroupId",
                "CacheClusterId",
                "SnapshotName",
                "SnapshotSource",
                "ShowNodeGroupConfig"
            ],
            "docstring": "elasticache.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(Snapshot)>",
        "parametrize_id_source": [
            "SnapshotName"
        ],
        "result_key": "Snapshots"
    },
    "elasticache_snapshots": {
        "fetch": {
            "all_args": [
                "ReplicationGroupId",
                "CacheClusterId",
                "SnapshotName",
                "SnapshotSource",
                "ShowNodeGroupConfig"
            ],
            "docstring": "elasticache.describe_snapshots([])",
            "method_name": "describe_snapshots",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(SnapshotList)>",
        "result_key": "Snapshots"
    },
    "elasticache_string": {
        "fetch": {
            "all_args": [
                "CacheClusterId",
                "ReplicationGroupId"
            ],
            "docstring": "elasticache.list_allowed_node_type_modifications([])",
            "method_name": "list_allowed_node_type_modifications",
            "required_args": [],
            "service_name": "elasticache"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "ScaleUpModifications"
    },
    "elasticache_tag": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "elasticache.list_tags_for_resource(['ResourceName'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "elasticache_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "elasticache.list_tags_for_resource(['ResourceName'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "elasticache"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "elasticbeanstalk_application_description": {
        "fetch": {
            "all_args": [
                "ApplicationNames"
            ],
            "docstring": "elasticbeanstalk.describe_applications([])",
            "method_name": "describe_applications",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ApplicationDescription)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "Applications"
    },
    "elasticbeanstalk_application_metrics": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ApplicationMetrics)>",
        "result_key": "ApplicationMetrics"
    },
    "elasticbeanstalk_application_version_description": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabels"
            ],
            "docstring": "elasticbeanstalk.describe_application_versions([])",
            "method_name": "describe_application_versions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ApplicationVersionDescription)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "ApplicationVersions"
    },
    "elasticbeanstalk_application_versions": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabels"
            ],
            "docstring": "elasticbeanstalk.describe_application_versions([])",
            "method_name": "describe_application_versions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ApplicationVersionDescriptionList)>",
        "result_key": "ApplicationVersions"
    },
    "elasticbeanstalk_applications": {
        "fetch": {
            "all_args": [
                "ApplicationNames"
            ],
            "docstring": "elasticbeanstalk.describe_applications([])",
            "method_name": "describe_applications",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ApplicationDescriptionList)>",
        "result_key": "Applications"
    },
    "elasticbeanstalk_cause": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(Cause)>",
        "parametrize_id_source": [
            "Cause"
        ],
        "result_key": "Causes"
    },
    "elasticbeanstalk_causes": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(Causes)>",
        "result_key": "Causes"
    },
    "elasticbeanstalk_color": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Color"
    },
    "elasticbeanstalk_configuration_option_description": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName",
                "SolutionStackName",
                "PlatformArn",
                "Options"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_options([])",
            "method_name": "describe_configuration_options",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ConfigurationOptionDescription)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Options"
    },
    "elasticbeanstalk_configuration_settings": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_settings(['ApplicationName'])",
            "method_name": "describe_configuration_settings",
            "required_args": [
                "ApplicationName"
            ],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ConfigurationSettingsDescriptionList)>",
        "result_key": "ConfigurationSettings"
    },
    "elasticbeanstalk_configuration_settings_description": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_settings(['ApplicationName'])",
            "method_name": "describe_configuration_settings",
            "required_args": [
                "ApplicationName"
            ],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ConfigurationSettingsDescription)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "ConfigurationSettings"
    },
    "elasticbeanstalk_environment_description": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabel",
                "EnvironmentIds",
                "EnvironmentNames",
                "IncludeDeleted",
                "IncludedDeletedBackTo"
            ],
            "docstring": "elasticbeanstalk.describe_environments([])",
            "method_name": "describe_environments",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(EnvironmentDescription)>",
        "parametrize_id_source": [
            "EnvironmentName"
        ],
        "result_key": "Environments"
    },
    "elasticbeanstalk_environment_name": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(EnvironmentName)>",
        "result_key": "EnvironmentName"
    },
    "elasticbeanstalk_environment_resources": {
        "fetch": {
            "all_args": [
                "EnvironmentId",
                "EnvironmentName"
            ],
            "docstring": "elasticbeanstalk.describe_environment_resources([])",
            "method_name": "describe_environment_resources",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(EnvironmentResourceDescription)>",
        "result_key": "EnvironmentResources"
    },
    "elasticbeanstalk_environments": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabel",
                "EnvironmentIds",
                "EnvironmentNames",
                "IncludeDeleted",
                "IncludedDeletedBackTo"
            ],
            "docstring": "elasticbeanstalk.describe_environments([])",
            "method_name": "describe_environments",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(EnvironmentDescriptionsList)>",
        "result_key": "Environments"
    },
    "elasticbeanstalk_event_description": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabel",
                "TemplateName",
                "EnvironmentId",
                "EnvironmentName",
                "PlatformArn",
                "RequestId",
                "Severity",
                "StartTime",
                "EndTime"
            ],
            "docstring": "elasticbeanstalk.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(EventDescription)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "Events"
    },
    "elasticbeanstalk_events": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "VersionLabel",
                "TemplateName",
                "EnvironmentId",
                "EnvironmentName",
                "PlatformArn",
                "RequestId",
                "Severity",
                "StartTime",
                "EndTime"
            ],
            "docstring": "elasticbeanstalk.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(EventDescriptionList)>",
        "result_key": "Events"
    },
    "elasticbeanstalk_health_status": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "HealthStatus"
    },
    "elasticbeanstalk_instance_health_list": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_instances_health([])",
            "method_name": "describe_instances_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(InstanceHealthList)>",
        "result_key": "InstanceHealthList"
    },
    "elasticbeanstalk_instances_health": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(InstanceHealthSummary)>",
        "result_key": "InstancesHealth"
    },
    "elasticbeanstalk_managed_action": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "Status"
            ],
            "docstring": "elasticbeanstalk.describe_environment_managed_actions([])",
            "method_name": "describe_environment_managed_actions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ManagedAction)>",
        "parametrize_id_source": [
            "Status"
        ],
        "result_key": "ManagedActions"
    },
    "elasticbeanstalk_managed_action_history_item": {
        "fetch": {
            "all_args": [
                "EnvironmentId",
                "EnvironmentName"
            ],
            "docstring": "elasticbeanstalk.describe_environment_managed_action_history([])",
            "method_name": "describe_environment_managed_action_history",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(ManagedActionHistoryItem)>",
        "parametrize_id_source": [
            "ActionId"
        ],
        "result_key": "ManagedActionHistoryItems"
    },
    "elasticbeanstalk_managed_action_history_items": {
        "fetch": {
            "all_args": [
                "EnvironmentId",
                "EnvironmentName"
            ],
            "docstring": "elasticbeanstalk.describe_environment_managed_action_history([])",
            "method_name": "describe_environment_managed_action_history",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ManagedActionHistoryItems)>",
        "result_key": "ManagedActionHistoryItems"
    },
    "elasticbeanstalk_managed_actions": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "Status"
            ],
            "docstring": "elasticbeanstalk.describe_environment_managed_actions([])",
            "method_name": "describe_environment_managed_actions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ManagedActions)>",
        "result_key": "ManagedActions"
    },
    "elasticbeanstalk_options": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName",
                "SolutionStackName",
                "PlatformArn",
                "Options"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_options([])",
            "method_name": "describe_configuration_options",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(ConfigurationOptionDescriptionsList)>",
        "result_key": "Options"
    },
    "elasticbeanstalk_platform_arn": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName",
                "SolutionStackName",
                "PlatformArn",
                "Options"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_options([])",
            "method_name": "describe_configuration_options",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(PlatformArn)>",
        "result_key": "PlatformArn"
    },
    "elasticbeanstalk_platform_description": {
        "fetch": {
            "all_args": [
                "PlatformArn"
            ],
            "docstring": "elasticbeanstalk.describe_platform_version([])",
            "method_name": "describe_platform_version",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(PlatformDescription)>",
        "result_key": "PlatformDescription"
    },
    "elasticbeanstalk_platform_summary": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "elasticbeanstalk.list_platform_versions([])",
            "method_name": "list_platform_versions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(PlatformSummary)>",
        "parametrize_id_source": [
            "PlatformArn"
        ],
        "result_key": "PlatformSummaryList"
    },
    "elasticbeanstalk_platform_summary_list": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "elasticbeanstalk.list_platform_versions([])",
            "method_name": "list_platform_versions",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(PlatformSummaryList)>",
        "result_key": "PlatformSummaryList"
    },
    "elasticbeanstalk_refreshed_at_from_describe_environment_health": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<Shape(RefreshedAt)>",
        "result_key": "RefreshedAt"
    },
    "elasticbeanstalk_refreshed_at_from_describe_instances_health": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_instances_health([])",
            "method_name": "describe_instances_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<Shape(RefreshedAt)>",
        "result_key": "RefreshedAt"
    },
    "elasticbeanstalk_resource_arn": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "elasticbeanstalk.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(ResourceArn)>",
        "result_key": "ResourceArn"
    },
    "elasticbeanstalk_resource_tags": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "elasticbeanstalk.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "ResourceTags"
    },
    "elasticbeanstalk_single_instance_health": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_instances_health([])",
            "method_name": "describe_instances_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(SingleInstanceHealth)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstanceHealthList"
    },
    "elasticbeanstalk_solution_stack_description": {
        "fetch": {
            "all_args": [],
            "docstring": "elasticbeanstalk.list_available_solution_stacks([])",
            "method_name": "list_available_solution_stacks",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(SolutionStackDescription)>",
        "parametrize_id_source": null,
        "result_key": "SolutionStackDetails"
    },
    "elasticbeanstalk_solution_stack_details": {
        "fetch": {
            "all_args": [],
            "docstring": "elasticbeanstalk.list_available_solution_stacks([])",
            "method_name": "list_available_solution_stacks",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(AvailableSolutionStackDetailsList)>",
        "result_key": "SolutionStackDetails"
    },
    "elasticbeanstalk_solution_stack_name_from_describe_configuration_options": {
        "fetch": {
            "all_args": [
                "ApplicationName",
                "TemplateName",
                "EnvironmentName",
                "SolutionStackName",
                "PlatformArn",
                "Options"
            ],
            "docstring": "elasticbeanstalk.describe_configuration_options([])",
            "method_name": "describe_configuration_options",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(SolutionStackName)>",
        "result_key": "SolutionStackName"
    },
    "elasticbeanstalk_solution_stack_name_from_list_available_solution_stacks": {
        "fetch": {
            "all_args": [],
            "docstring": "elasticbeanstalk.list_available_solution_stacks([])",
            "method_name": "list_available_solution_stacks",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(SolutionStackName)>",
        "parametrize_id_source": [
            "SolutionStackName"
        ],
        "result_key": "SolutionStacks"
    },
    "elasticbeanstalk_solution_stacks": {
        "fetch": {
            "all_args": [],
            "docstring": "elasticbeanstalk.list_available_solution_stacks([])",
            "method_name": "list_available_solution_stacks",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<ListShape(AvailableSolutionStackNamesList)>",
        "result_key": "SolutionStacks"
    },
    "elasticbeanstalk_status": {
        "fetch": {
            "all_args": [
                "EnvironmentName",
                "EnvironmentId",
                "AttributeNames"
            ],
            "docstring": "elasticbeanstalk.describe_environment_health([])",
            "method_name": "describe_environment_health",
            "required_args": [],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StringShape(EnvironmentHealth)>",
        "result_key": "Status"
    },
    "elasticbeanstalk_tag": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "elasticbeanstalk.list_tags_for_resource(['ResourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "elasticbeanstalk"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "ResourceTags"
    },
    "elastictranscoder_job_from_list_jobs_by_pipeline": {
        "fetch": {
            "all_args": [
                "PipelineId",
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_jobs_by_pipeline(['PipelineId'])",
            "method_name": "list_jobs_by_pipeline",
            "required_args": [
                "PipelineId"
            ],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<StructureShape(Job)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Jobs"
    },
    "elastictranscoder_job_from_list_jobs_by_status": {
        "fetch": {
            "all_args": [
                "Status",
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_jobs_by_status(['Status'])",
            "method_name": "list_jobs_by_status",
            "required_args": [
                "Status"
            ],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<StructureShape(Job)>",
        "parametrize_id_source": [
            "Status"
        ],
        "result_key": "Jobs"
    },
    "elastictranscoder_jobs_from_list_jobs_by_pipeline": {
        "fetch": {
            "all_args": [
                "PipelineId",
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_jobs_by_pipeline(['PipelineId'])",
            "method_name": "list_jobs_by_pipeline",
            "required_args": [
                "PipelineId"
            ],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<ListShape(Jobs)>",
        "result_key": "Jobs"
    },
    "elastictranscoder_jobs_from_list_jobs_by_status": {
        "fetch": {
            "all_args": [
                "Status",
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_jobs_by_status(['Status'])",
            "method_name": "list_jobs_by_status",
            "required_args": [
                "Status"
            ],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<ListShape(Jobs)>",
        "result_key": "Jobs"
    },
    "elastictranscoder_pipeline": {
        "fetch": {
            "all_args": [
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<StructureShape(Pipeline)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Pipelines"
    },
    "elastictranscoder_pipelines": {
        "fetch": {
            "all_args": [
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_pipelines([])",
            "method_name": "list_pipelines",
            "required_args": [],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<ListShape(Pipelines)>",
        "result_key": "Pipelines"
    },
    "elastictranscoder_preset": {
        "fetch": {
            "all_args": [
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_presets([])",
            "method_name": "list_presets",
            "required_args": [],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<StructureShape(Preset)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Presets"
    },
    "elastictranscoder_presets": {
        "fetch": {
            "all_args": [
                "Ascending",
                "PageToken"
            ],
            "docstring": "elastictranscoder.list_presets([])",
            "method_name": "list_presets",
            "required_args": [],
            "service_name": "elastictranscoder"
        },
        "output_shape": "<ListShape(Presets)>",
        "result_key": "Presets"
    },
    "elb_instance_state": {
        "fetch": {
            "all_args": [
                "LoadBalancerName",
                "Instances"
            ],
            "docstring": "elb.describe_instance_health(['LoadBalancerName'])",
            "method_name": "describe_instance_health",
            "required_args": [
                "LoadBalancerName"
            ],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(InstanceState)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstanceStates"
    },
    "elb_instance_states": {
        "fetch": {
            "all_args": [
                "LoadBalancerName",
                "Instances"
            ],
            "docstring": "elb.describe_instance_health(['LoadBalancerName'])",
            "method_name": "describe_instance_health",
            "required_args": [
                "LoadBalancerName"
            ],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(InstanceStates)>",
        "result_key": "InstanceStates"
    },
    "elb_limit": {
        "fetch": {
            "all_args": [
                "PageSize"
            ],
            "docstring": "elb.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(Limit)>",
        "parametrize_id_source": null,
        "result_key": "Limits"
    },
    "elb_limits": {
        "fetch": {
            "all_args": [
                "PageSize"
            ],
            "docstring": "elb.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(Limits)>",
        "result_key": "Limits"
    },
    "elb_load_balancer_attributes": {
        "fetch": {
            "all_args": [
                "LoadBalancerName"
            ],
            "docstring": "elb.describe_load_balancer_attributes(['LoadBalancerName'])",
            "method_name": "describe_load_balancer_attributes",
            "required_args": [
                "LoadBalancerName"
            ],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(LoadBalancerAttributes)>",
        "result_key": "LoadBalancerAttributes"
    },
    "elb_load_balancer_description": {
        "fetch": {
            "all_args": [
                "LoadBalancerNames",
                "PageSize"
            ],
            "docstring": "elb.describe_load_balancers([])",
            "method_name": "describe_load_balancers",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(LoadBalancerDescription)>",
        "parametrize_id_source": [
            "LoadBalancerName"
        ],
        "result_key": "LoadBalancerDescriptions"
    },
    "elb_load_balancer_descriptions": {
        "fetch": {
            "all_args": [
                "LoadBalancerNames",
                "PageSize"
            ],
            "docstring": "elb.describe_load_balancers([])",
            "method_name": "describe_load_balancers",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(LoadBalancerDescriptions)>",
        "result_key": "LoadBalancerDescriptions"
    },
    "elb_policy_description": {
        "fetch": {
            "all_args": [
                "LoadBalancerName",
                "PolicyNames"
            ],
            "docstring": "elb.describe_load_balancer_policies([])",
            "method_name": "describe_load_balancer_policies",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(PolicyDescription)>",
        "parametrize_id_source": [
            "PolicyName"
        ],
        "result_key": "PolicyDescriptions"
    },
    "elb_policy_descriptions": {
        "fetch": {
            "all_args": [
                "LoadBalancerName",
                "PolicyNames"
            ],
            "docstring": "elb.describe_load_balancer_policies([])",
            "method_name": "describe_load_balancer_policies",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(PolicyDescriptions)>",
        "result_key": "PolicyDescriptions"
    },
    "elb_policy_type_description": {
        "fetch": {
            "all_args": [
                "PolicyTypeNames"
            ],
            "docstring": "elb.describe_load_balancer_policy_types([])",
            "method_name": "describe_load_balancer_policy_types",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(PolicyTypeDescription)>",
        "parametrize_id_source": [
            "PolicyTypeName"
        ],
        "result_key": "PolicyTypeDescriptions"
    },
    "elb_policy_type_descriptions": {
        "fetch": {
            "all_args": [
                "PolicyTypeNames"
            ],
            "docstring": "elb.describe_load_balancer_policy_types([])",
            "method_name": "describe_load_balancer_policy_types",
            "required_args": [],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(PolicyTypeDescriptions)>",
        "result_key": "PolicyTypeDescriptions"
    },
    "elb_tag_description": {
        "fetch": {
            "all_args": [
                "LoadBalancerNames"
            ],
            "docstring": "elb.describe_tags(['LoadBalancerNames'])",
            "method_name": "describe_tags",
            "required_args": [
                "LoadBalancerNames"
            ],
            "service_name": "elb"
        },
        "output_shape": "<StructureShape(TagDescription)>",
        "parametrize_id_source": [
            "LoadBalancerName"
        ],
        "result_key": "TagDescriptions"
    },
    "elb_tag_descriptions": {
        "fetch": {
            "all_args": [
                "LoadBalancerNames"
            ],
            "docstring": "elb.describe_tags(['LoadBalancerNames'])",
            "method_name": "describe_tags",
            "required_args": [
                "LoadBalancerNames"
            ],
            "service_name": "elb"
        },
        "output_shape": "<ListShape(TagDescriptions)>",
        "result_key": "TagDescriptions"
    },
    "elbv2_attributes_from_describe_load_balancer_attributes": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn"
            ],
            "docstring": "elbv2.describe_load_balancer_attributes(['LoadBalancerArn'])",
            "method_name": "describe_load_balancer_attributes",
            "required_args": [
                "LoadBalancerArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(LoadBalancerAttributes)>",
        "result_key": "Attributes"
    },
    "elbv2_attributes_from_describe_target_group_attributes": {
        "fetch": {
            "all_args": [
                "TargetGroupArn"
            ],
            "docstring": "elbv2.describe_target_group_attributes(['TargetGroupArn'])",
            "method_name": "describe_target_group_attributes",
            "required_args": [
                "TargetGroupArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(TargetGroupAttributes)>",
        "result_key": "Attributes"
    },
    "elbv2_certificate": {
        "fetch": {
            "all_args": [
                "ListenerArn",
                "PageSize"
            ],
            "docstring": "elbv2.describe_listener_certificates(['ListenerArn'])",
            "method_name": "describe_listener_certificates",
            "required_args": [
                "ListenerArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(Certificate)>",
        "parametrize_id_source": [
            "CertificateArn"
        ],
        "result_key": "Certificates"
    },
    "elbv2_certificates": {
        "fetch": {
            "all_args": [
                "ListenerArn",
                "PageSize"
            ],
            "docstring": "elbv2.describe_listener_certificates(['ListenerArn'])",
            "method_name": "describe_listener_certificates",
            "required_args": [
                "ListenerArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(CertificateList)>",
        "result_key": "Certificates"
    },
    "elbv2_limit": {
        "fetch": {
            "all_args": [
                "PageSize"
            ],
            "docstring": "elbv2.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(Limit)>",
        "parametrize_id_source": null,
        "result_key": "Limits"
    },
    "elbv2_limits": {
        "fetch": {
            "all_args": [
                "PageSize"
            ],
            "docstring": "elbv2.describe_account_limits([])",
            "method_name": "describe_account_limits",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(Limits)>",
        "result_key": "Limits"
    },
    "elbv2_listener": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn",
                "ListenerArns",
                "PageSize"
            ],
            "docstring": "elbv2.describe_listeners([])",
            "method_name": "describe_listeners",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(Listener)>",
        "parametrize_id_source": [
            "ListenerArn"
        ],
        "result_key": "Listeners"
    },
    "elbv2_listeners": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn",
                "ListenerArns",
                "PageSize"
            ],
            "docstring": "elbv2.describe_listeners([])",
            "method_name": "describe_listeners",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(Listeners)>",
        "result_key": "Listeners"
    },
    "elbv2_load_balancer": {
        "fetch": {
            "all_args": [
                "LoadBalancerArns",
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_load_balancers([])",
            "method_name": "describe_load_balancers",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(LoadBalancer)>",
        "parametrize_id_source": [
            "LoadBalancerArn"
        ],
        "result_key": "LoadBalancers"
    },
    "elbv2_load_balancer_attribute": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn"
            ],
            "docstring": "elbv2.describe_load_balancer_attributes(['LoadBalancerArn'])",
            "method_name": "describe_load_balancer_attributes",
            "required_args": [
                "LoadBalancerArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(LoadBalancerAttribute)>",
        "parametrize_id_source": null,
        "result_key": "Attributes"
    },
    "elbv2_load_balancers": {
        "fetch": {
            "all_args": [
                "LoadBalancerArns",
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_load_balancers([])",
            "method_name": "describe_load_balancers",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(LoadBalancers)>",
        "result_key": "LoadBalancers"
    },
    "elbv2_rule": {
        "fetch": {
            "all_args": [
                "ListenerArn",
                "RuleArns",
                "PageSize"
            ],
            "docstring": "elbv2.describe_rules([])",
            "method_name": "describe_rules",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(Rule)>",
        "parametrize_id_source": [
            "RuleArn"
        ],
        "result_key": "Rules"
    },
    "elbv2_rules": {
        "fetch": {
            "all_args": [
                "ListenerArn",
                "RuleArns",
                "PageSize"
            ],
            "docstring": "elbv2.describe_rules([])",
            "method_name": "describe_rules",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(Rules)>",
        "result_key": "Rules"
    },
    "elbv2_ssl_policies": {
        "fetch": {
            "all_args": [
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_ssl_policies([])",
            "method_name": "describe_ssl_policies",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(SslPolicies)>",
        "result_key": "SslPolicies"
    },
    "elbv2_ssl_policy": {
        "fetch": {
            "all_args": [
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_ssl_policies([])",
            "method_name": "describe_ssl_policies",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(SslPolicy)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "SslPolicies"
    },
    "elbv2_tag_description": {
        "fetch": {
            "all_args": [
                "ResourceArns"
            ],
            "docstring": "elbv2.describe_tags(['ResourceArns'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceArns"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(TagDescription)>",
        "parametrize_id_source": [
            "ResourceArn"
        ],
        "result_key": "TagDescriptions"
    },
    "elbv2_tag_descriptions": {
        "fetch": {
            "all_args": [
                "ResourceArns"
            ],
            "docstring": "elbv2.describe_tags(['ResourceArns'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceArns"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(TagDescriptions)>",
        "result_key": "TagDescriptions"
    },
    "elbv2_target_group": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn",
                "TargetGroupArns",
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_target_groups([])",
            "method_name": "describe_target_groups",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(TargetGroup)>",
        "parametrize_id_source": [
            "TargetGroupArn"
        ],
        "result_key": "TargetGroups"
    },
    "elbv2_target_group_attribute": {
        "fetch": {
            "all_args": [
                "TargetGroupArn"
            ],
            "docstring": "elbv2.describe_target_group_attributes(['TargetGroupArn'])",
            "method_name": "describe_target_group_attributes",
            "required_args": [
                "TargetGroupArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(TargetGroupAttribute)>",
        "parametrize_id_source": null,
        "result_key": "Attributes"
    },
    "elbv2_target_groups": {
        "fetch": {
            "all_args": [
                "LoadBalancerArn",
                "TargetGroupArns",
                "Names",
                "PageSize"
            ],
            "docstring": "elbv2.describe_target_groups([])",
            "method_name": "describe_target_groups",
            "required_args": [],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(TargetGroups)>",
        "result_key": "TargetGroups"
    },
    "elbv2_target_health_description": {
        "fetch": {
            "all_args": [
                "TargetGroupArn",
                "Targets"
            ],
            "docstring": "elbv2.describe_target_health(['TargetGroupArn'])",
            "method_name": "describe_target_health",
            "required_args": [
                "TargetGroupArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<StructureShape(TargetHealthDescription)>",
        "parametrize_id_source": [
            "Target"
        ],
        "result_key": "TargetHealthDescriptions"
    },
    "elbv2_target_health_descriptions": {
        "fetch": {
            "all_args": [
                "TargetGroupArn",
                "Targets"
            ],
            "docstring": "elbv2.describe_target_health(['TargetGroupArn'])",
            "method_name": "describe_target_health",
            "required_args": [
                "TargetGroupArn"
            ],
            "service_name": "elbv2"
        },
        "output_shape": "<ListShape(TargetHealthDescriptions)>",
        "result_key": "TargetHealthDescriptions"
    },
    "emr_bootstrap_actions": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_bootstrap_actions(['ClusterId'])",
            "method_name": "list_bootstrap_actions",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(CommandList)>",
        "result_key": "BootstrapActions"
    },
    "emr_cluster": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.describe_cluster(['ClusterId'])",
            "method_name": "describe_cluster",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(Cluster)>",
        "result_key": "Cluster"
    },
    "emr_cluster_summary": {
        "fetch": {
            "all_args": [
                "CreatedAfter",
                "CreatedBefore",
                "ClusterStates"
            ],
            "docstring": "emr.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(ClusterSummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Clusters"
    },
    "emr_clusters": {
        "fetch": {
            "all_args": [
                "CreatedAfter",
                "CreatedBefore",
                "ClusterStates"
            ],
            "docstring": "emr.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(ClusterSummaryList)>",
        "result_key": "Clusters"
    },
    "emr_command": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_bootstrap_actions(['ClusterId'])",
            "method_name": "list_bootstrap_actions",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(Command)>",
        "parametrize_id_source": null,
        "result_key": "BootstrapActions"
    },
    "emr_creation_date_time": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "emr.describe_security_configuration(['Name'])",
            "method_name": "describe_security_configuration",
            "required_args": [
                "Name"
            ],
            "service_name": "emr"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "CreationDateTime"
    },
    "emr_instance": {
        "fetch": {
            "all_args": [
                "ClusterId",
                "InstanceGroupId",
                "InstanceGroupTypes",
                "InstanceFleetId",
                "InstanceFleetType",
                "InstanceStates"
            ],
            "docstring": "emr.list_instances(['ClusterId'])",
            "method_name": "list_instances",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(Instance)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Instances"
    },
    "emr_instance_fleet": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_instance_fleets(['ClusterId'])",
            "method_name": "list_instance_fleets",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(InstanceFleet)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "InstanceFleets"
    },
    "emr_instance_fleets": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_instance_fleets(['ClusterId'])",
            "method_name": "list_instance_fleets",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(InstanceFleetList)>",
        "result_key": "InstanceFleets"
    },
    "emr_instance_group": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_instance_groups(['ClusterId'])",
            "method_name": "list_instance_groups",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(InstanceGroup)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "InstanceGroups"
    },
    "emr_instance_groups": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "emr.list_instance_groups(['ClusterId'])",
            "method_name": "list_instance_groups",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(InstanceGroupList)>",
        "result_key": "InstanceGroups"
    },
    "emr_instances": {
        "fetch": {
            "all_args": [
                "ClusterId",
                "InstanceGroupId",
                "InstanceGroupTypes",
                "InstanceFleetId",
                "InstanceFleetType",
                "InstanceStates"
            ],
            "docstring": "emr.list_instances(['ClusterId'])",
            "method_name": "list_instances",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(InstanceList)>",
        "result_key": "Instances"
    },
    "emr_job_flow_detail": {
        "fetch": {
            "all_args": [
                "CreatedAfter",
                "CreatedBefore",
                "JobFlowIds",
                "JobFlowStates"
            ],
            "docstring": "emr.describe_job_flows([])",
            "method_name": "describe_job_flows",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(JobFlowDetail)>",
        "parametrize_id_source": [
            "JobFlowId"
        ],
        "result_key": "JobFlows"
    },
    "emr_job_flows": {
        "fetch": {
            "all_args": [
                "CreatedAfter",
                "CreatedBefore",
                "JobFlowIds",
                "JobFlowStates"
            ],
            "docstring": "emr.describe_job_flows([])",
            "method_name": "describe_job_flows",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(JobFlowDetailList)>",
        "result_key": "JobFlows"
    },
    "emr_name": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "emr.describe_security_configuration(['Name'])",
            "method_name": "describe_security_configuration",
            "required_args": [
                "Name"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StringShape(XmlString)>",
        "result_key": "Name"
    },
    "emr_security_configuration": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "emr.describe_security_configuration(['Name'])",
            "method_name": "describe_security_configuration",
            "required_args": [
                "Name"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "SecurityConfiguration"
    },
    "emr_security_configuration_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "emr.list_security_configurations([])",
            "method_name": "list_security_configurations",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(SecurityConfigurationSummary)>",
        "parametrize_id_source": null,
        "result_key": "SecurityConfigurations"
    },
    "emr_security_configurations": {
        "fetch": {
            "all_args": [],
            "docstring": "emr.list_security_configurations([])",
            "method_name": "list_security_configurations",
            "required_args": [],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(SecurityConfigurationList)>",
        "result_key": "SecurityConfigurations"
    },
    "emr_step": {
        "fetch": {
            "all_args": [
                "ClusterId",
                "StepId"
            ],
            "docstring": "emr.describe_step(['ClusterId', 'StepId'])",
            "method_name": "describe_step",
            "required_args": [
                "ClusterId",
                "StepId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(Step)>",
        "result_key": "Step"
    },
    "emr_step_summary": {
        "fetch": {
            "all_args": [
                "ClusterId",
                "StepStates",
                "StepIds"
            ],
            "docstring": "emr.list_steps(['ClusterId'])",
            "method_name": "list_steps",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<StructureShape(StepSummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Steps"
    },
    "emr_steps": {
        "fetch": {
            "all_args": [
                "ClusterId",
                "StepStates",
                "StepIds"
            ],
            "docstring": "emr.list_steps(['ClusterId'])",
            "method_name": "list_steps",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "emr"
        },
        "output_shape": "<ListShape(StepSummaryList)>",
        "result_key": "Steps"
    },
    "es_domain_config": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "es.describe_elasticsearch_domain_config(['DomainName'])",
            "method_name": "describe_elasticsearch_domain_config",
            "required_args": [
                "DomainName"
            ],
            "service_name": "es"
        },
        "output_shape": "<StructureShape(ElasticsearchDomainConfig)>",
        "result_key": "DomainConfig"
    },
    "es_domain_info": {
        "fetch": {
            "all_args": [],
            "docstring": "es.list_domain_names([])",
            "method_name": "list_domain_names",
            "required_args": [],
            "service_name": "es"
        },
        "output_shape": "<StructureShape(DomainInfo)>",
        "parametrize_id_source": null,
        "result_key": "DomainNames"
    },
    "es_domain_names": {
        "fetch": {
            "all_args": [],
            "docstring": "es.list_domain_names([])",
            "method_name": "list_domain_names",
            "required_args": [],
            "service_name": "es"
        },
        "output_shape": "<ListShape(DomainInfoList)>",
        "result_key": "DomainNames"
    },
    "es_domain_status": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "es.describe_elasticsearch_domain(['DomainName'])",
            "method_name": "describe_elasticsearch_domain",
            "required_args": [
                "DomainName"
            ],
            "service_name": "es"
        },
        "output_shape": "<StructureShape(ElasticsearchDomainStatus)>",
        "result_key": "DomainStatus"
    },
    "es_domain_status_list": {
        "fetch": {
            "all_args": [
                "DomainNames"
            ],
            "docstring": "es.describe_elasticsearch_domains(['DomainNames'])",
            "method_name": "describe_elasticsearch_domains",
            "required_args": [
                "DomainNames"
            ],
            "service_name": "es"
        },
        "output_shape": "<ListShape(ElasticsearchDomainStatusList)>",
        "result_key": "DomainStatusList"
    },
    "es_elasticsearch_domain_status": {
        "fetch": {
            "all_args": [
                "DomainNames"
            ],
            "docstring": "es.describe_elasticsearch_domains(['DomainNames'])",
            "method_name": "describe_elasticsearch_domains",
            "required_args": [
                "DomainNames"
            ],
            "service_name": "es"
        },
        "output_shape": "<StructureShape(ElasticsearchDomainStatus)>",
        "parametrize_id_source": [
            "DomainName"
        ],
        "result_key": "DomainStatusList"
    },
    "es_elasticsearch_instance_types": {
        "fetch": {
            "all_args": [
                "ElasticsearchVersion",
                "DomainName"
            ],
            "docstring": "es.list_elasticsearch_instance_types(['ElasticsearchVersion'])",
            "method_name": "list_elasticsearch_instance_types",
            "required_args": [
                "ElasticsearchVersion"
            ],
            "service_name": "es"
        },
        "output_shape": "<ListShape(ElasticsearchInstanceTypeList)>",
        "result_key": "ElasticsearchInstanceTypes"
    },
    "es_elasticsearch_version_string": {
        "fetch": {
            "all_args": [],
            "docstring": "es.list_elasticsearch_versions([])",
            "method_name": "list_elasticsearch_versions",
            "required_args": [],
            "service_name": "es"
        },
        "output_shape": "<StringShape(ElasticsearchVersionString)>",
        "parametrize_id_source": [
            "ElasticsearchVersionString"
        ],
        "result_key": "ElasticsearchVersions"
    },
    "es_elasticsearch_versions": {
        "fetch": {
            "all_args": [],
            "docstring": "es.list_elasticsearch_versions([])",
            "method_name": "list_elasticsearch_versions",
            "required_args": [],
            "service_name": "es"
        },
        "output_shape": "<ListShape(ElasticsearchVersionList)>",
        "result_key": "ElasticsearchVersions"
    },
    "es_es_partition_instance_type": {
        "fetch": {
            "all_args": [
                "ElasticsearchVersion",
                "DomainName"
            ],
            "docstring": "es.list_elasticsearch_instance_types(['ElasticsearchVersion'])",
            "method_name": "list_elasticsearch_instance_types",
            "required_args": [
                "ElasticsearchVersion"
            ],
            "service_name": "es"
        },
        "output_shape": "<StringShape(ESPartitionInstanceType)>",
        "parametrize_id_source": [
            "ESPartitionInstanceType"
        ],
        "result_key": "ElasticsearchInstanceTypes"
    },
    "es_limits_by_role": {
        "fetch": {
            "all_args": [
                "DomainName",
                "InstanceType",
                "ElasticsearchVersion"
            ],
            "docstring": "es.describe_elasticsearch_instance_type_limits(['InstanceType', 'ElasticsearchVersion'])",
            "method_name": "describe_elasticsearch_instance_type_limits",
            "required_args": [
                "InstanceType",
                "ElasticsearchVersion"
            ],
            "service_name": "es"
        },
        "output_shape": "<MapShape(LimitsByRole)>",
        "result_key": "LimitsByRole"
    },
    "es_tag": {
        "fetch": {
            "all_args": [
                "ARN"
            ],
            "docstring": "es.list_tags(['ARN'])",
            "method_name": "list_tags",
            "required_args": [
                "ARN"
            ],
            "service_name": "es"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "es_tag_list": {
        "fetch": {
            "all_args": [
                "ARN"
            ],
            "docstring": "es.list_tags(['ARN'])",
            "method_name": "list_tags",
            "required_args": [
                "ARN"
            ],
            "service_name": "es"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "events_arn_from_describe_event_bus": {
        "fetch": {
            "all_args": [],
            "docstring": "events.describe_event_bus([])",
            "method_name": "describe_event_bus",
            "required_args": [],
            "service_name": "events"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Arn"
    },
    "events_arn_from_describe_rule": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RuleArn)>",
        "result_key": "Arn"
    },
    "events_description": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RuleDescription)>",
        "result_key": "Description"
    },
    "events_event_pattern": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(EventPattern)>",
        "result_key": "EventPattern"
    },
    "events_name_from_describe_event_bus": {
        "fetch": {
            "all_args": [],
            "docstring": "events.describe_event_bus([])",
            "method_name": "describe_event_bus",
            "required_args": [],
            "service_name": "events"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Name"
    },
    "events_name_from_describe_rule": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RuleName)>",
        "result_key": "Name"
    },
    "events_policy": {
        "fetch": {
            "all_args": [],
            "docstring": "events.describe_event_bus([])",
            "method_name": "describe_event_bus",
            "required_args": [],
            "service_name": "events"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Policy"
    },
    "events_role_arn": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RoleArn)>",
        "result_key": "RoleArn"
    },
    "events_rule": {
        "fetch": {
            "all_args": [
                "NamePrefix",
                "Limit"
            ],
            "docstring": "events.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "events"
        },
        "output_shape": "<StructureShape(Rule)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Rules"
    },
    "events_rule_name": {
        "fetch": {
            "all_args": [
                "TargetArn",
                "Limit"
            ],
            "docstring": "events.list_rule_names_by_target(['TargetArn'])",
            "method_name": "list_rule_names_by_target",
            "required_args": [
                "TargetArn"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RuleName)>",
        "parametrize_id_source": [
            "RuleName"
        ],
        "result_key": "RuleNames"
    },
    "events_rule_names": {
        "fetch": {
            "all_args": [
                "TargetArn",
                "Limit"
            ],
            "docstring": "events.list_rule_names_by_target(['TargetArn'])",
            "method_name": "list_rule_names_by_target",
            "required_args": [
                "TargetArn"
            ],
            "service_name": "events"
        },
        "output_shape": "<ListShape(RuleNameList)>",
        "result_key": "RuleNames"
    },
    "events_rules": {
        "fetch": {
            "all_args": [
                "NamePrefix",
                "Limit"
            ],
            "docstring": "events.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "events"
        },
        "output_shape": "<ListShape(RuleResponseList)>",
        "result_key": "Rules"
    },
    "events_schedule_expression": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(ScheduleExpression)>",
        "result_key": "ScheduleExpression"
    },
    "events_state": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "events.describe_rule(['Name'])",
            "method_name": "describe_rule",
            "required_args": [
                "Name"
            ],
            "service_name": "events"
        },
        "output_shape": "<StringShape(RuleState)>",
        "result_key": "State"
    },
    "events_target": {
        "fetch": {
            "all_args": [
                "Rule",
                "Limit"
            ],
            "docstring": "events.list_targets_by_rule(['Rule'])",
            "method_name": "list_targets_by_rule",
            "required_args": [
                "Rule"
            ],
            "service_name": "events"
        },
        "output_shape": "<StructureShape(Target)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Targets"
    },
    "events_targets": {
        "fetch": {
            "all_args": [
                "Rule",
                "Limit"
            ],
            "docstring": "events.list_targets_by_rule(['Rule'])",
            "method_name": "list_targets_by_rule",
            "required_args": [
                "Rule"
            ],
            "service_name": "events"
        },
        "output_shape": "<ListShape(TargetList)>",
        "result_key": "Targets"
    },
    "firehose_credentials_for_reading_kinesis_stream": {
        "fetch": {
            "all_args": [
                "DeliveryStreamARN"
            ],
            "docstring": "firehose.get_kinesis_stream(['DeliveryStreamARN'])",
            "method_name": "get_kinesis_stream",
            "required_args": [
                "DeliveryStreamARN"
            ],
            "service_name": "firehose"
        },
        "output_shape": "<StructureShape(SessionCredentials)>",
        "result_key": "CredentialsForReadingKinesisStream"
    },
    "firehose_delivery_stream_description": {
        "fetch": {
            "all_args": [
                "DeliveryStreamName",
                "Limit",
                "ExclusiveStartDestinationId"
            ],
            "docstring": "firehose.describe_delivery_stream(['DeliveryStreamName'])",
            "method_name": "describe_delivery_stream",
            "required_args": [
                "DeliveryStreamName"
            ],
            "service_name": "firehose"
        },
        "output_shape": "<StructureShape(DeliveryStreamDescription)>",
        "result_key": "DeliveryStreamDescription"
    },
    "firehose_delivery_stream_name": {
        "fetch": {
            "all_args": [
                "Limit",
                "DeliveryStreamType",
                "ExclusiveStartDeliveryStreamName"
            ],
            "docstring": "firehose.list_delivery_streams([])",
            "method_name": "list_delivery_streams",
            "required_args": [],
            "service_name": "firehose"
        },
        "output_shape": "<StringShape(DeliveryStreamName)>",
        "parametrize_id_source": [
            "DeliveryStreamName"
        ],
        "result_key": "DeliveryStreamNames"
    },
    "firehose_delivery_stream_names": {
        "fetch": {
            "all_args": [
                "Limit",
                "DeliveryStreamType",
                "ExclusiveStartDeliveryStreamName"
            ],
            "docstring": "firehose.list_delivery_streams([])",
            "method_name": "list_delivery_streams",
            "required_args": [],
            "service_name": "firehose"
        },
        "output_shape": "<ListShape(DeliveryStreamNameList)>",
        "result_key": "DeliveryStreamNames"
    },
    "firehose_kinesis_stream_arn": {
        "fetch": {
            "all_args": [
                "DeliveryStreamARN"
            ],
            "docstring": "firehose.get_kinesis_stream(['DeliveryStreamARN'])",
            "method_name": "get_kinesis_stream",
            "required_args": [
                "DeliveryStreamARN"
            ],
            "service_name": "firehose"
        },
        "output_shape": "<StringShape(KinesisStreamARN)>",
        "result_key": "KinesisStreamARN"
    },
    "gamelift_alias_from_describe_alias": {
        "fetch": {
            "all_args": [
                "AliasId"
            ],
            "docstring": "gamelift.describe_alias(['AliasId'])",
            "method_name": "describe_alias",
            "required_args": [
                "AliasId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Alias)>",
        "result_key": "Alias"
    },
    "gamelift_alias_from_list_aliases": {
        "fetch": {
            "all_args": [
                "RoutingStrategyType",
                "Name",
                "Limit"
            ],
            "docstring": "gamelift.list_aliases([])",
            "method_name": "list_aliases",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Alias)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Aliases"
    },
    "gamelift_aliases": {
        "fetch": {
            "all_args": [
                "RoutingStrategyType",
                "Name",
                "Limit"
            ],
            "docstring": "gamelift.list_aliases([])",
            "method_name": "list_aliases",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(AliasList)>",
        "result_key": "Aliases"
    },
    "gamelift_build_from_describe_build": {
        "fetch": {
            "all_args": [
                "BuildId"
            ],
            "docstring": "gamelift.describe_build(['BuildId'])",
            "method_name": "describe_build",
            "required_args": [
                "BuildId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Build)>",
        "result_key": "Build"
    },
    "gamelift_build_from_list_builds": {
        "fetch": {
            "all_args": [
                "Status",
                "Limit"
            ],
            "docstring": "gamelift.list_builds([])",
            "method_name": "list_builds",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Build)>",
        "parametrize_id_source": [
            "Status"
        ],
        "result_key": "Builds"
    },
    "gamelift_builds": {
        "fetch": {
            "all_args": [
                "Status",
                "Limit"
            ],
            "docstring": "gamelift.list_builds([])",
            "method_name": "list_builds",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(BuildList)>",
        "result_key": "Builds"
    },
    "gamelift_configurations": {
        "fetch": {
            "all_args": [
                "Names",
                "RuleSetName",
                "Limit"
            ],
            "docstring": "gamelift.describe_matchmaking_configurations([])",
            "method_name": "describe_matchmaking_configurations",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(MatchmakingConfigurationList)>",
        "result_key": "Configurations"
    },
    "gamelift_ec2_instance_limit": {
        "fetch": {
            "all_args": [
                "EC2InstanceType"
            ],
            "docstring": "gamelift.describe_ec2_instance_limits([])",
            "method_name": "describe_ec2_instance_limits",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(EC2InstanceLimit)>",
        "parametrize_id_source": [
            "EC2InstanceType"
        ],
        "result_key": "EC2InstanceLimits"
    },
    "gamelift_ec2_instance_limits": {
        "fetch": {
            "all_args": [
                "EC2InstanceType"
            ],
            "docstring": "gamelift.describe_ec2_instance_limits([])",
            "method_name": "describe_ec2_instance_limits",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(EC2InstanceLimitList)>",
        "result_key": "EC2InstanceLimits"
    },
    "gamelift_event": {
        "fetch": {
            "all_args": [
                "FleetId",
                "StartTime",
                "EndTime",
                "Limit"
            ],
            "docstring": "gamelift.describe_fleet_events(['FleetId'])",
            "method_name": "describe_fleet_events",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "EventId"
        ],
        "result_key": "Events"
    },
    "gamelift_events": {
        "fetch": {
            "all_args": [
                "FleetId",
                "StartTime",
                "EndTime",
                "Limit"
            ],
            "docstring": "gamelift.describe_fleet_events(['FleetId'])",
            "method_name": "describe_fleet_events",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "gamelift_fleet_attributes_from_describe_fleet_attributes": {
        "fetch": {
            "all_args": [
                "FleetIds",
                "Limit"
            ],
            "docstring": "gamelift.describe_fleet_attributes([])",
            "method_name": "describe_fleet_attributes",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(FleetAttributes)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "FleetAttributes"
    },
    "gamelift_fleet_capacity_from_describe_fleet_capacity": {
        "fetch": {
            "all_args": [
                "FleetIds",
                "Limit"
            ],
            "docstring": "gamelift.describe_fleet_capacity([])",
            "method_name": "describe_fleet_capacity",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(FleetCapacity)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "FleetCapacity"
    },
    "gamelift_fleet_id": {
        "fetch": {
            "all_args": [
                "BuildId",
                "Limit"
            ],
            "docstring": "gamelift.list_fleets([])",
            "method_name": "list_fleets",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StringShape(FleetId)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "FleetIds"
    },
    "gamelift_fleet_ids": {
        "fetch": {
            "all_args": [
                "BuildId",
                "Limit"
            ],
            "docstring": "gamelift.list_fleets([])",
            "method_name": "list_fleets",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(FleetIdList)>",
        "result_key": "FleetIds"
    },
    "gamelift_fleet_utilization_from_describe_fleet_utilization": {
        "fetch": {
            "all_args": [
                "FleetIds",
                "Limit"
            ],
            "docstring": "gamelift.describe_fleet_utilization([])",
            "method_name": "describe_fleet_utilization",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(FleetUtilization)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "FleetUtilization"
    },
    "gamelift_game_session": {
        "fetch": {
            "all_args": [
                "FleetId",
                "GameSessionId",
                "AliasId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_sessions([])",
            "method_name": "describe_game_sessions",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(GameSession)>",
        "parametrize_id_source": [
            "GameSessionId"
        ],
        "result_key": "GameSessions"
    },
    "gamelift_game_session_detail": {
        "fetch": {
            "all_args": [
                "FleetId",
                "GameSessionId",
                "AliasId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_session_details([])",
            "method_name": "describe_game_session_details",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(GameSessionDetail)>",
        "parametrize_id_source": [
            "GameSession"
        ],
        "result_key": "GameSessionDetails"
    },
    "gamelift_game_session_details": {
        "fetch": {
            "all_args": [
                "FleetId",
                "GameSessionId",
                "AliasId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_session_details([])",
            "method_name": "describe_game_session_details",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(GameSessionDetailList)>",
        "result_key": "GameSessionDetails"
    },
    "gamelift_game_session_placement": {
        "fetch": {
            "all_args": [
                "PlacementId"
            ],
            "docstring": "gamelift.describe_game_session_placement(['PlacementId'])",
            "method_name": "describe_game_session_placement",
            "required_args": [
                "PlacementId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(GameSessionPlacement)>",
        "result_key": "GameSessionPlacement"
    },
    "gamelift_game_session_queue": {
        "fetch": {
            "all_args": [
                "Names",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_session_queues([])",
            "method_name": "describe_game_session_queues",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(GameSessionQueue)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "GameSessionQueues"
    },
    "gamelift_game_session_queues": {
        "fetch": {
            "all_args": [
                "Names",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_session_queues([])",
            "method_name": "describe_game_session_queues",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(GameSessionQueueList)>",
        "result_key": "GameSessionQueues"
    },
    "gamelift_game_sessions": {
        "fetch": {
            "all_args": [
                "FleetId",
                "GameSessionId",
                "AliasId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_game_sessions([])",
            "method_name": "describe_game_sessions",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(GameSessionList)>",
        "result_key": "GameSessions"
    },
    "gamelift_inbound_permissions": {
        "fetch": {
            "all_args": [
                "FleetId"
            ],
            "docstring": "gamelift.describe_fleet_port_settings(['FleetId'])",
            "method_name": "describe_fleet_port_settings",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(IpPermissionsList)>",
        "result_key": "InboundPermissions"
    },
    "gamelift_instance": {
        "fetch": {
            "all_args": [
                "FleetId",
                "InstanceId",
                "Limit"
            ],
            "docstring": "gamelift.describe_instances(['FleetId'])",
            "method_name": "describe_instances",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(Instance)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "Instances"
    },
    "gamelift_instance_access": {
        "fetch": {
            "all_args": [
                "FleetId",
                "InstanceId"
            ],
            "docstring": "gamelift.get_instance_access(['FleetId', 'InstanceId'])",
            "method_name": "get_instance_access",
            "required_args": [
                "FleetId",
                "InstanceId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(InstanceAccess)>",
        "result_key": "InstanceAccess"
    },
    "gamelift_instances": {
        "fetch": {
            "all_args": [
                "FleetId",
                "InstanceId",
                "Limit"
            ],
            "docstring": "gamelift.describe_instances(['FleetId'])",
            "method_name": "describe_instances",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(InstanceList)>",
        "result_key": "Instances"
    },
    "gamelift_ip_permission": {
        "fetch": {
            "all_args": [
                "FleetId"
            ],
            "docstring": "gamelift.describe_fleet_port_settings(['FleetId'])",
            "method_name": "describe_fleet_port_settings",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(IpPermission)>",
        "parametrize_id_source": null,
        "result_key": "InboundPermissions"
    },
    "gamelift_matchmaking_configuration": {
        "fetch": {
            "all_args": [
                "Names",
                "RuleSetName",
                "Limit"
            ],
            "docstring": "gamelift.describe_matchmaking_configurations([])",
            "method_name": "describe_matchmaking_configurations",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(MatchmakingConfiguration)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Configurations"
    },
    "gamelift_matchmaking_rule_set": {
        "fetch": {
            "all_args": [
                "Names",
                "Limit"
            ],
            "docstring": "gamelift.describe_matchmaking_rule_sets([])",
            "method_name": "describe_matchmaking_rule_sets",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(MatchmakingRuleSet)>",
        "parametrize_id_source": null,
        "result_key": "RuleSets"
    },
    "gamelift_matchmaking_ticket": {
        "fetch": {
            "all_args": [
                "TicketIds"
            ],
            "docstring": "gamelift.describe_matchmaking(['TicketIds'])",
            "method_name": "describe_matchmaking",
            "required_args": [
                "TicketIds"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(MatchmakingTicket)>",
        "parametrize_id_source": [
            "TicketId"
        ],
        "result_key": "TicketList"
    },
    "gamelift_player_session": {
        "fetch": {
            "all_args": [
                "GameSessionId",
                "PlayerId",
                "PlayerSessionId",
                "PlayerSessionStatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_player_sessions([])",
            "method_name": "describe_player_sessions",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(PlayerSession)>",
        "parametrize_id_source": [
            "PlayerSessionId"
        ],
        "result_key": "PlayerSessions"
    },
    "gamelift_player_sessions": {
        "fetch": {
            "all_args": [
                "GameSessionId",
                "PlayerId",
                "PlayerSessionId",
                "PlayerSessionStatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_player_sessions([])",
            "method_name": "describe_player_sessions",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(PlayerSessionList)>",
        "result_key": "PlayerSessions"
    },
    "gamelift_pre_signed_url": {
        "fetch": {
            "all_args": [
                "GameSessionId"
            ],
            "docstring": "gamelift.get_game_session_log_url(['GameSessionId'])",
            "method_name": "get_game_session_log_url",
            "required_args": [
                "GameSessionId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StringShape(NonZeroAndMaxString)>",
        "result_key": "PreSignedUrl"
    },
    "gamelift_rule_sets": {
        "fetch": {
            "all_args": [
                "Names",
                "Limit"
            ],
            "docstring": "gamelift.describe_matchmaking_rule_sets([])",
            "method_name": "describe_matchmaking_rule_sets",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(MatchmakingRuleSetList)>",
        "result_key": "RuleSets"
    },
    "gamelift_runtime_configuration": {
        "fetch": {
            "all_args": [
                "FleetId"
            ],
            "docstring": "gamelift.describe_runtime_configuration(['FleetId'])",
            "method_name": "describe_runtime_configuration",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(RuntimeConfiguration)>",
        "result_key": "RuntimeConfiguration"
    },
    "gamelift_scaling_policies": {
        "fetch": {
            "all_args": [
                "FleetId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_scaling_policies(['FleetId'])",
            "method_name": "describe_scaling_policies",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(ScalingPolicyList)>",
        "result_key": "ScalingPolicies"
    },
    "gamelift_scaling_policy": {
        "fetch": {
            "all_args": [
                "FleetId",
                "StatusFilter",
                "Limit"
            ],
            "docstring": "gamelift.describe_scaling_policies(['FleetId'])",
            "method_name": "describe_scaling_policies",
            "required_args": [
                "FleetId"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(ScalingPolicy)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "ScalingPolicies"
    },
    "gamelift_ticket_list": {
        "fetch": {
            "all_args": [
                "TicketIds"
            ],
            "docstring": "gamelift.describe_matchmaking(['TicketIds'])",
            "method_name": "describe_matchmaking",
            "required_args": [
                "TicketIds"
            ],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(MatchmakingTicketList)>",
        "result_key": "TicketList"
    },
    "gamelift_vpc_peering_authorization": {
        "fetch": {
            "all_args": [],
            "docstring": "gamelift.describe_vpc_peering_authorizations([])",
            "method_name": "describe_vpc_peering_authorizations",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(VpcPeeringAuthorization)>",
        "parametrize_id_source": [
            "GameLiftAwsAccountId"
        ],
        "result_key": "VpcPeeringAuthorizations"
    },
    "gamelift_vpc_peering_authorizations": {
        "fetch": {
            "all_args": [],
            "docstring": "gamelift.describe_vpc_peering_authorizations([])",
            "method_name": "describe_vpc_peering_authorizations",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(VpcPeeringAuthorizationList)>",
        "result_key": "VpcPeeringAuthorizations"
    },
    "gamelift_vpc_peering_connection": {
        "fetch": {
            "all_args": [
                "FleetId"
            ],
            "docstring": "gamelift.describe_vpc_peering_connections([])",
            "method_name": "describe_vpc_peering_connections",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<StructureShape(VpcPeeringConnection)>",
        "parametrize_id_source": [
            "FleetId"
        ],
        "result_key": "VpcPeeringConnections"
    },
    "gamelift_vpc_peering_connections": {
        "fetch": {
            "all_args": [
                "FleetId"
            ],
            "docstring": "gamelift.describe_vpc_peering_connections([])",
            "method_name": "describe_vpc_peering_connections",
            "required_args": [],
            "service_name": "gamelift"
        },
        "output_shape": "<ListShape(VpcPeeringConnectionList)>",
        "result_key": "VpcPeeringConnections"
    },
    "glacier_accept_ranges": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "acceptRanges"
    },
    "glacier_action": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(ActionCode)>",
        "result_key": "Action"
    },
    "glacier_archive_description_from_get_job_output": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "archiveDescription"
    },
    "glacier_archive_description_from_list_parts": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ArchiveDescription"
    },
    "glacier_archive_id": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ArchiveId"
    },
    "glacier_archive_sha256_tree_hash": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ArchiveSHA256TreeHash"
    },
    "glacier_archive_size_in_bytes": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(Size)>",
        "result_key": "ArchiveSizeInBytes"
    },
    "glacier_body": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(Stream)>",
        "result_key": "body"
    },
    "glacier_checksum": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "checksum"
    },
    "glacier_completed": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(boolean)>",
        "result_key": "Completed"
    },
    "glacier_completion_date": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "CompletionDate"
    },
    "glacier_content_range": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "contentRange"
    },
    "glacier_content_type": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "contentType"
    },
    "glacier_creation_date_from_describe_job": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "CreationDate"
    },
    "glacier_creation_date_from_describe_vault": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "CreationDate"
    },
    "glacier_creation_date_from_get_vault_lock": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_lock(['accountId', 'vaultName'])",
            "method_name": "get_vault_lock",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "CreationDate"
    },
    "glacier_creation_date_from_list_parts": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "CreationDate"
    },
    "glacier_describe_vault_output": {
        "fetch": {
            "all_args": [
                "accountId",
                "limit"
            ],
            "docstring": "glacier.list_vaults(['accountId'])",
            "method_name": "list_vaults",
            "required_args": [
                "accountId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(DescribeVaultOutput)>",
        "parametrize_id_source": [
            "VaultARN"
        ],
        "result_key": "VaultList"
    },
    "glacier_expiration_date": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_lock(['accountId', 'vaultName'])",
            "method_name": "get_vault_lock",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "ExpirationDate"
    },
    "glacier_glacier_job_description": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "limit",
                "statuscode",
                "completed"
            ],
            "docstring": "glacier.list_jobs(['accountId', 'vaultName'])",
            "method_name": "list_jobs",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(GlacierJobDescription)>",
        "parametrize_id_source": [
            "JobId"
        ],
        "result_key": "JobList"
    },
    "glacier_inventory_retrieval_parameters": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(InventoryRetrievalJobDescription)>",
        "result_key": "InventoryRetrievalParameters"
    },
    "glacier_inventory_size_in_bytes": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(Size)>",
        "result_key": "InventorySizeInBytes"
    },
    "glacier_job_description": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "JobDescription"
    },
    "glacier_job_id": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "JobId"
    },
    "glacier_job_list": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "limit",
                "statuscode",
                "completed"
            ],
            "docstring": "glacier.list_jobs(['accountId', 'vaultName'])",
            "method_name": "list_jobs",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<ListShape(JobList)>",
        "result_key": "JobList"
    },
    "glacier_last_inventory_date": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "LastInventoryDate"
    },
    "glacier_multipart_upload_id": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "MultipartUploadId"
    },
    "glacier_number_of_archives": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "NumberOfArchives"
    },
    "glacier_part_list_element": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(PartListElement)>",
        "parametrize_id_source": null,
        "result_key": "Parts"
    },
    "glacier_part_size_in_bytes": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "PartSizeInBytes"
    },
    "glacier_parts": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<ListShape(PartList)>",
        "result_key": "Parts"
    },
    "glacier_policy_from_get_data_retrieval_policy": {
        "fetch": {
            "all_args": [
                "accountId"
            ],
            "docstring": "glacier.get_data_retrieval_policy(['accountId'])",
            "method_name": "get_data_retrieval_policy",
            "required_args": [
                "accountId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(DataRetrievalPolicy)>",
        "result_key": "Policy"
    },
    "glacier_policy_from_get_vault_access_policy": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_access_policy(['accountId', 'vaultName'])",
            "method_name": "get_vault_access_policy",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(VaultAccessPolicy)>",
        "result_key": "policy"
    },
    "glacier_policy_from_get_vault_lock": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_lock(['accountId', 'vaultName'])",
            "method_name": "get_vault_lock",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "Policy"
    },
    "glacier_provisioned_capacity_description": {
        "fetch": {
            "all_args": [
                "accountId"
            ],
            "docstring": "glacier.list_provisioned_capacity(['accountId'])",
            "method_name": "list_provisioned_capacity",
            "required_args": [
                "accountId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(ProvisionedCapacityDescription)>",
        "parametrize_id_source": [
            "CapacityId"
        ],
        "result_key": "ProvisionedCapacityList"
    },
    "glacier_provisioned_capacity_list": {
        "fetch": {
            "all_args": [
                "accountId"
            ],
            "docstring": "glacier.list_provisioned_capacity(['accountId'])",
            "method_name": "list_provisioned_capacity",
            "required_args": [
                "accountId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<ListShape(ProvisionedCapacityList)>",
        "result_key": "ProvisionedCapacityList"
    },
    "glacier_retrieval_byte_range": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "RetrievalByteRange"
    },
    "glacier_sha256_tree_hash": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "SHA256TreeHash"
    },
    "glacier_size_in_bytes": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "SizeInBytes"
    },
    "glacier_sns_topic": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "SNSTopic"
    },
    "glacier_state": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_lock(['accountId', 'vaultName'])",
            "method_name": "get_vault_lock",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "State"
    },
    "glacier_status": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId",
                "range"
            ],
            "docstring": "glacier.get_job_output(['accountId', 'vaultName', 'jobId'])",
            "method_name": "get_job_output",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<Shape(httpstatus)>",
        "result_key": "status"
    },
    "glacier_status_code": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(StatusCode)>",
        "result_key": "StatusCode"
    },
    "glacier_status_message": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "StatusMessage"
    },
    "glacier_tags": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.list_tags_for_vault(['accountId', 'vaultName'])",
            "method_name": "list_tags_for_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<MapShape(TagMap)>",
        "result_key": "Tags"
    },
    "glacier_tier": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "Tier"
    },
    "glacier_upload_list_element": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "limit"
            ],
            "docstring": "glacier.list_multipart_uploads(['accountId', 'vaultName'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(UploadListElement)>",
        "parametrize_id_source": [
            "MultipartUploadId"
        ],
        "result_key": "UploadsList"
    },
    "glacier_uploads_list": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "limit"
            ],
            "docstring": "glacier.list_multipart_uploads(['accountId', 'vaultName'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<ListShape(UploadsList)>",
        "result_key": "UploadsList"
    },
    "glacier_vault_arn_from_describe_job": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "docstring": "glacier.describe_job(['accountId', 'vaultName', 'jobId'])",
            "method_name": "describe_job",
            "required_args": [
                "accountId",
                "vaultName",
                "jobId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "VaultARN"
    },
    "glacier_vault_arn_from_describe_vault": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "VaultARN"
    },
    "glacier_vault_arn_from_list_parts": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName",
                "uploadId",
                "limit"
            ],
            "docstring": "glacier.list_parts(['accountId', 'vaultName', 'uploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "accountId",
                "vaultName",
                "uploadId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "VaultARN"
    },
    "glacier_vault_list": {
        "fetch": {
            "all_args": [
                "accountId",
                "limit"
            ],
            "docstring": "glacier.list_vaults(['accountId'])",
            "method_name": "list_vaults",
            "required_args": [
                "accountId"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<ListShape(VaultList)>",
        "result_key": "VaultList"
    },
    "glacier_vault_name": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.describe_vault(['accountId', 'vaultName'])",
            "method_name": "describe_vault",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "VaultName"
    },
    "glacier_vault_notification_config": {
        "fetch": {
            "all_args": [
                "accountId",
                "vaultName"
            ],
            "docstring": "glacier.get_vault_notifications(['accountId', 'vaultName'])",
            "method_name": "get_vault_notifications",
            "required_args": [
                "accountId",
                "vaultName"
            ],
            "service_name": "glacier"
        },
        "output_shape": "<StructureShape(VaultNotificationConfig)>",
        "result_key": "vaultNotificationConfig"
    },
    "glue_classifier_from_get_classifier": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "glue.get_classifier(['Name'])",
            "method_name": "get_classifier",
            "required_args": [
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Classifier)>",
        "result_key": "Classifier"
    },
    "glue_classifier_from_get_classifiers": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_classifiers([])",
            "method_name": "get_classifiers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Classifier)>",
        "parametrize_id_source": null,
        "result_key": "Classifiers"
    },
    "glue_classifiers": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_classifiers([])",
            "method_name": "get_classifiers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(ClassifierList)>",
        "result_key": "Classifiers"
    },
    "glue_code_gen_edge": {
        "fetch": {
            "all_args": [
                "PythonScript"
            ],
            "docstring": "glue.get_dataflow_graph([])",
            "method_name": "get_dataflow_graph",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(CodeGenEdge)>",
        "parametrize_id_source": null,
        "result_key": "DagEdges"
    },
    "glue_code_gen_node": {
        "fetch": {
            "all_args": [
                "PythonScript"
            ],
            "docstring": "glue.get_dataflow_graph([])",
            "method_name": "get_dataflow_graph",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(CodeGenNode)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "DagNodes"
    },
    "glue_connection_from_get_connection": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "Name"
            ],
            "docstring": "glue.get_connection(['Name'])",
            "method_name": "get_connection",
            "required_args": [
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Connection)>",
        "result_key": "Connection"
    },
    "glue_connection_from_get_connections": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "Filter"
            ],
            "docstring": "glue.get_connections([])",
            "method_name": "get_connections",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Connection)>",
        "parametrize_id_source": null,
        "result_key": "ConnectionList"
    },
    "glue_connection_list": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "Filter"
            ],
            "docstring": "glue.get_connections([])",
            "method_name": "get_connections",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(ConnectionList)>",
        "result_key": "ConnectionList"
    },
    "glue_crawler_from_get_crawler": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "glue.get_crawler(['Name'])",
            "method_name": "get_crawler",
            "required_args": [
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Crawler)>",
        "result_key": "Crawler"
    },
    "glue_crawler_from_get_crawlers": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_crawlers([])",
            "method_name": "get_crawlers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Crawler)>",
        "parametrize_id_source": null,
        "result_key": "Crawlers"
    },
    "glue_crawler_metrics": {
        "fetch": {
            "all_args": [
                "CrawlerNameList"
            ],
            "docstring": "glue.get_crawler_metrics([])",
            "method_name": "get_crawler_metrics",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(CrawlerMetrics)>",
        "parametrize_id_source": [
            "CrawlerName"
        ],
        "result_key": "CrawlerMetricsList"
    },
    "glue_crawler_metrics_list": {
        "fetch": {
            "all_args": [
                "CrawlerNameList"
            ],
            "docstring": "glue.get_crawler_metrics([])",
            "method_name": "get_crawler_metrics",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(CrawlerMetricsList)>",
        "result_key": "CrawlerMetricsList"
    },
    "glue_crawlers": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_crawlers([])",
            "method_name": "get_crawlers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(CrawlerList)>",
        "result_key": "Crawlers"
    },
    "glue_dag_edges": {
        "fetch": {
            "all_args": [
                "PythonScript"
            ],
            "docstring": "glue.get_dataflow_graph([])",
            "method_name": "get_dataflow_graph",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(DagEdges)>",
        "result_key": "DagEdges"
    },
    "glue_dag_nodes": {
        "fetch": {
            "all_args": [
                "PythonScript"
            ],
            "docstring": "glue.get_dataflow_graph([])",
            "method_name": "get_dataflow_graph",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(DagNodes)>",
        "result_key": "DagNodes"
    },
    "glue_database_from_get_database": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "Name"
            ],
            "docstring": "glue.get_database(['Name'])",
            "method_name": "get_database",
            "required_args": [
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Database)>",
        "result_key": "Database"
    },
    "glue_database_from_get_databases": {
        "fetch": {
            "all_args": [
                "CatalogId"
            ],
            "docstring": "glue.get_databases([])",
            "method_name": "get_databases",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Database)>",
        "parametrize_id_source": null,
        "result_key": "DatabaseList"
    },
    "glue_database_list": {
        "fetch": {
            "all_args": [
                "CatalogId"
            ],
            "docstring": "glue.get_databases([])",
            "method_name": "get_databases",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(DatabaseList)>",
        "result_key": "DatabaseList"
    },
    "glue_dev_endpoint_from_get_dev_endpoint": {
        "fetch": {
            "all_args": [
                "EndpointName"
            ],
            "docstring": "glue.get_dev_endpoint(['EndpointName'])",
            "method_name": "get_dev_endpoint",
            "required_args": [
                "EndpointName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(DevEndpoint)>",
        "result_key": "DevEndpoint"
    },
    "glue_dev_endpoint_from_get_dev_endpoints": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_dev_endpoints([])",
            "method_name": "get_dev_endpoints",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(DevEndpoint)>",
        "parametrize_id_source": [
            "SecurityGroupIds"
        ],
        "result_key": "DevEndpoints"
    },
    "glue_dev_endpoints": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_dev_endpoints([])",
            "method_name": "get_dev_endpoints",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(DevEndpointList)>",
        "result_key": "DevEndpoints"
    },
    "glue_import_status": {
        "fetch": {
            "all_args": [
                "CatalogId"
            ],
            "docstring": "glue.get_catalog_import_status([])",
            "method_name": "get_catalog_import_status",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(CatalogImportStatus)>",
        "result_key": "ImportStatus"
    },
    "glue_job_from_get_job": {
        "fetch": {
            "all_args": [
                "JobName"
            ],
            "docstring": "glue.get_job(['JobName'])",
            "method_name": "get_job",
            "required_args": [
                "JobName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Job)>",
        "result_key": "Job"
    },
    "glue_job_from_get_jobs": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_jobs([])",
            "method_name": "get_jobs",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Job)>",
        "parametrize_id_source": null,
        "result_key": "Jobs"
    },
    "glue_job_run_from_get_job_run": {
        "fetch": {
            "all_args": [
                "JobName",
                "RunId",
                "PredecessorsIncluded"
            ],
            "docstring": "glue.get_job_run(['JobName', 'RunId'])",
            "method_name": "get_job_run",
            "required_args": [
                "JobName",
                "RunId"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(JobRun)>",
        "result_key": "JobRun"
    },
    "glue_job_run_from_get_job_runs": {
        "fetch": {
            "all_args": [
                "JobName"
            ],
            "docstring": "glue.get_job_runs(['JobName'])",
            "method_name": "get_job_runs",
            "required_args": [
                "JobName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(JobRun)>",
        "parametrize_id_source": [
            "JobName"
        ],
        "result_key": "JobRuns"
    },
    "glue_job_runs": {
        "fetch": {
            "all_args": [
                "JobName"
            ],
            "docstring": "glue.get_job_runs(['JobName'])",
            "method_name": "get_job_runs",
            "required_args": [
                "JobName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(JobRunList)>",
        "result_key": "JobRuns"
    },
    "glue_jobs": {
        "fetch": {
            "all_args": [],
            "docstring": "glue.get_jobs([])",
            "method_name": "get_jobs",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(JobList)>",
        "result_key": "Jobs"
    },
    "glue_mapping": {
        "fetch": {
            "all_args": [
                "Source",
                "Sinks",
                "Location"
            ],
            "docstring": "glue.get_mapping(['Source'])",
            "method_name": "get_mapping",
            "required_args": [
                "Source"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(MappingList)>",
        "result_key": "Mapping"
    },
    "glue_mapping_entry": {
        "fetch": {
            "all_args": [
                "Source",
                "Sinks",
                "Location"
            ],
            "docstring": "glue.get_mapping(['Source'])",
            "method_name": "get_mapping",
            "required_args": [
                "Source"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(MappingEntry)>",
        "parametrize_id_source": null,
        "result_key": "Mapping"
    },
    "glue_partition_from_get_partition": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "TableName",
                "PartitionValues"
            ],
            "docstring": "glue.get_partition(['DatabaseName', 'TableName', 'PartitionValues'])",
            "method_name": "get_partition",
            "required_args": [
                "DatabaseName",
                "TableName",
                "PartitionValues"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Partition)>",
        "result_key": "Partition"
    },
    "glue_partition_from_get_partitions": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "TableName",
                "Expression",
                "Segment"
            ],
            "docstring": "glue.get_partitions(['DatabaseName', 'TableName'])",
            "method_name": "get_partitions",
            "required_args": [
                "DatabaseName",
                "TableName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Partition)>",
        "parametrize_id_source": [
            "DatabaseName"
        ],
        "result_key": "Partitions"
    },
    "glue_partitions": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "TableName",
                "Expression",
                "Segment"
            ],
            "docstring": "glue.get_partitions(['DatabaseName', 'TableName'])",
            "method_name": "get_partitions",
            "required_args": [
                "DatabaseName",
                "TableName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(PartitionList)>",
        "result_key": "Partitions"
    },
    "glue_python_script": {
        "fetch": {
            "all_args": [
                "Mapping",
                "Source",
                "Sinks",
                "Location"
            ],
            "docstring": "glue.get_plan(['Mapping', 'Source'])",
            "method_name": "get_plan",
            "required_args": [
                "Mapping",
                "Source"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StringShape(PythonScript)>",
        "result_key": "PythonScript"
    },
    "glue_table_from_get_table": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "Name"
            ],
            "docstring": "glue.get_table(['DatabaseName', 'Name'])",
            "method_name": "get_table",
            "required_args": [
                "DatabaseName",
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Table)>",
        "result_key": "Table"
    },
    "glue_table_from_get_tables": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "Expression"
            ],
            "docstring": "glue.get_tables(['DatabaseName'])",
            "method_name": "get_tables",
            "required_args": [
                "DatabaseName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Table)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "TableList"
    },
    "glue_table_list": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "Expression"
            ],
            "docstring": "glue.get_tables(['DatabaseName'])",
            "method_name": "get_tables",
            "required_args": [
                "DatabaseName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(TableList)>",
        "result_key": "TableList"
    },
    "glue_table_version": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "TableName"
            ],
            "docstring": "glue.get_table_versions(['DatabaseName', 'TableName'])",
            "method_name": "get_table_versions",
            "required_args": [
                "DatabaseName",
                "TableName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(TableVersion)>",
        "parametrize_id_source": [
            "Table"
        ],
        "result_key": "TableVersions"
    },
    "glue_table_versions": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "TableName"
            ],
            "docstring": "glue.get_table_versions(['DatabaseName', 'TableName'])",
            "method_name": "get_table_versions",
            "required_args": [
                "DatabaseName",
                "TableName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(GetTableVersionsList)>",
        "result_key": "TableVersions"
    },
    "glue_trigger_from_get_trigger": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "glue.get_trigger(['Name'])",
            "method_name": "get_trigger",
            "required_args": [
                "Name"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Trigger)>",
        "result_key": "Trigger"
    },
    "glue_trigger_from_get_triggers": {
        "fetch": {
            "all_args": [
                "DependentJobName"
            ],
            "docstring": "glue.get_triggers([])",
            "method_name": "get_triggers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(Trigger)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Triggers"
    },
    "glue_triggers": {
        "fetch": {
            "all_args": [
                "DependentJobName"
            ],
            "docstring": "glue.get_triggers([])",
            "method_name": "get_triggers",
            "required_args": [],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(TriggerList)>",
        "result_key": "Triggers"
    },
    "glue_user_defined_function_from_get_user_defined_function": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "FunctionName"
            ],
            "docstring": "glue.get_user_defined_function(['DatabaseName', 'FunctionName'])",
            "method_name": "get_user_defined_function",
            "required_args": [
                "DatabaseName",
                "FunctionName"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(UserDefinedFunction)>",
        "result_key": "UserDefinedFunction"
    },
    "glue_user_defined_function_from_get_user_defined_functions": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "Pattern"
            ],
            "docstring": "glue.get_user_defined_functions(['DatabaseName', 'Pattern'])",
            "method_name": "get_user_defined_functions",
            "required_args": [
                "DatabaseName",
                "Pattern"
            ],
            "service_name": "glue"
        },
        "output_shape": "<StructureShape(UserDefinedFunction)>",
        "parametrize_id_source": null,
        "result_key": "UserDefinedFunctions"
    },
    "glue_user_defined_functions": {
        "fetch": {
            "all_args": [
                "CatalogId",
                "DatabaseName",
                "Pattern"
            ],
            "docstring": "glue.get_user_defined_functions(['DatabaseName', 'Pattern'])",
            "method_name": "get_user_defined_functions",
            "required_args": [
                "DatabaseName",
                "Pattern"
            ],
            "service_name": "glue"
        },
        "output_shape": "<ListShape(UserDefinedFunctionList)>",
        "result_key": "UserDefinedFunctions"
    },
    "greengrass_arn_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_core_definition_version": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "docstring": "greengrass.get_core_definition_version(['CoreDefinitionId', 'CoreDefinitionVersionId'])",
            "method_name": "get_core_definition_version",
            "required_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_device_definition_version": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId",
                "DeviceDefinitionVersionId"
            ],
            "docstring": "greengrass.get_device_definition_version(['DeviceDefinitionVersionId', 'DeviceDefinitionId'])",
            "method_name": "get_device_definition_version",
            "required_args": [
                "DeviceDefinitionVersionId",
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_function_definition_version": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_function_definition_version(['FunctionDefinitionId', 'FunctionDefinitionVersionId'])",
            "method_name": "get_function_definition_version",
            "required_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_group_version": {
        "fetch": {
            "all_args": [
                "GroupId",
                "GroupVersionId"
            ],
            "docstring": "greengrass.get_group_version(['GroupVersionId', 'GroupId'])",
            "method_name": "get_group_version",
            "required_args": [
                "GroupVersionId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_logger_definition_version": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId",
                "LoggerDefinitionVersionId"
            ],
            "docstring": "greengrass.get_logger_definition_version(['LoggerDefinitionVersionId', 'LoggerDefinitionId'])",
            "method_name": "get_logger_definition_version",
            "required_args": [
                "LoggerDefinitionVersionId",
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_arn_from_get_subscription_definition_version": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_subscription_definition_version(['SubscriptionDefinitionId', 'SubscriptionDefinitionVersionId'])",
            "method_name": "get_subscription_definition_version",
            "required_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Arn"
    },
    "greengrass_associated_at_from_get_associated_role": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_associated_role(['GroupId'])",
            "method_name": "get_associated_role",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "AssociatedAt"
    },
    "greengrass_associated_at_from_get_service_role_for_account": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.get_service_role_for_account([])",
            "method_name": "get_service_role_for_account",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "AssociatedAt"
    },
    "greengrass_certificate_authority_expiry_in_milliseconds": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_configuration(['GroupId'])",
            "method_name": "get_group_certificate_configuration",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CertificateAuthorityExpiryInMilliseconds"
    },
    "greengrass_certificate_expiry_in_milliseconds": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_configuration(['GroupId'])",
            "method_name": "get_group_certificate_configuration",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CertificateExpiryInMilliseconds"
    },
    "greengrass_connectivity_info_from_get_connectivity_info": {
        "fetch": {
            "all_args": [
                "ThingName"
            ],
            "docstring": "greengrass.get_connectivity_info(['ThingName'])",
            "method_name": "get_connectivity_info",
            "required_args": [
                "ThingName"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(ConnectivityInfo)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ConnectivityInfo"
    },
    "greengrass_creation_timestamp_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_core_definition_version": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "docstring": "greengrass.get_core_definition_version(['CoreDefinitionId', 'CoreDefinitionVersionId'])",
            "method_name": "get_core_definition_version",
            "required_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_device_definition_version": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId",
                "DeviceDefinitionVersionId"
            ],
            "docstring": "greengrass.get_device_definition_version(['DeviceDefinitionVersionId', 'DeviceDefinitionId'])",
            "method_name": "get_device_definition_version",
            "required_args": [
                "DeviceDefinitionVersionId",
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_function_definition_version": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_function_definition_version(['FunctionDefinitionId', 'FunctionDefinitionVersionId'])",
            "method_name": "get_function_definition_version",
            "required_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_group_version": {
        "fetch": {
            "all_args": [
                "GroupId",
                "GroupVersionId"
            ],
            "docstring": "greengrass.get_group_version(['GroupVersionId', 'GroupId'])",
            "method_name": "get_group_version",
            "required_args": [
                "GroupVersionId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_logger_definition_version": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId",
                "LoggerDefinitionVersionId"
            ],
            "docstring": "greengrass.get_logger_definition_version(['LoggerDefinitionVersionId', 'LoggerDefinitionId'])",
            "method_name": "get_logger_definition_version",
            "required_args": [
                "LoggerDefinitionVersionId",
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_creation_timestamp_from_get_subscription_definition_version": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_subscription_definition_version(['SubscriptionDefinitionId', 'SubscriptionDefinitionVersionId'])",
            "method_name": "get_subscription_definition_version",
            "required_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "CreationTimestamp"
    },
    "greengrass_definition_from_get_core_definition_version": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "docstring": "greengrass.get_core_definition_version(['CoreDefinitionId', 'CoreDefinitionVersionId'])",
            "method_name": "get_core_definition_version",
            "required_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(CoreDefinitionVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_from_get_device_definition_version": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId",
                "DeviceDefinitionVersionId"
            ],
            "docstring": "greengrass.get_device_definition_version(['DeviceDefinitionVersionId', 'DeviceDefinitionId'])",
            "method_name": "get_device_definition_version",
            "required_args": [
                "DeviceDefinitionVersionId",
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DeviceDefinitionVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_from_get_function_definition_version": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_function_definition_version(['FunctionDefinitionId', 'FunctionDefinitionVersionId'])",
            "method_name": "get_function_definition_version",
            "required_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(FunctionDefinitionVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_from_get_group_version": {
        "fetch": {
            "all_args": [
                "GroupId",
                "GroupVersionId"
            ],
            "docstring": "greengrass.get_group_version(['GroupVersionId', 'GroupId'])",
            "method_name": "get_group_version",
            "required_args": [
                "GroupVersionId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(GroupVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_from_get_logger_definition_version": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId",
                "LoggerDefinitionVersionId"
            ],
            "docstring": "greengrass.get_logger_definition_version(['LoggerDefinitionVersionId', 'LoggerDefinitionId'])",
            "method_name": "get_logger_definition_version",
            "required_args": [
                "LoggerDefinitionVersionId",
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(LoggerDefinitionVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_from_get_subscription_definition_version": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_subscription_definition_version(['SubscriptionDefinitionId', 'SubscriptionDefinitionVersionId'])",
            "method_name": "get_subscription_definition_version",
            "required_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(SubscriptionDefinitionVersion)>",
        "result_key": "Definition"
    },
    "greengrass_definition_information_from_list_core_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_core_definitions([])",
            "method_name": "list_core_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DefinitionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Definitions"
    },
    "greengrass_definition_information_from_list_device_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_device_definitions([])",
            "method_name": "list_device_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DefinitionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Definitions"
    },
    "greengrass_definition_information_from_list_function_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_function_definitions([])",
            "method_name": "list_function_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DefinitionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Definitions"
    },
    "greengrass_definition_information_from_list_logger_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_logger_definitions([])",
            "method_name": "list_logger_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DefinitionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Definitions"
    },
    "greengrass_definition_information_from_list_subscription_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_subscription_definitions([])",
            "method_name": "list_subscription_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(DefinitionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Definitions"
    },
    "greengrass_definitions_from_list_core_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_core_definitions([])",
            "method_name": "list_core_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfDefinitionInformation)>",
        "result_key": "Definitions"
    },
    "greengrass_definitions_from_list_device_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_device_definitions([])",
            "method_name": "list_device_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfDefinitionInformation)>",
        "result_key": "Definitions"
    },
    "greengrass_definitions_from_list_function_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_function_definitions([])",
            "method_name": "list_function_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfDefinitionInformation)>",
        "result_key": "Definitions"
    },
    "greengrass_definitions_from_list_logger_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_logger_definitions([])",
            "method_name": "list_logger_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfDefinitionInformation)>",
        "result_key": "Definitions"
    },
    "greengrass_definitions_from_list_subscription_definitions": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_subscription_definitions([])",
            "method_name": "list_subscription_definitions",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfDefinitionInformation)>",
        "result_key": "Definitions"
    },
    "greengrass_deployment": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_deployments(['GroupId'])",
            "method_name": "list_deployments",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(Deployment)>",
        "parametrize_id_source": [
            "DeploymentId"
        ],
        "result_key": "Deployments"
    },
    "greengrass_deployment_status": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "DeploymentStatus"
    },
    "greengrass_deployment_type": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(DeploymentType)>",
        "result_key": "DeploymentType"
    },
    "greengrass_deployments": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_deployments(['GroupId'])",
            "method_name": "list_deployments",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(Deployments)>",
        "result_key": "Deployments"
    },
    "greengrass_error_detail": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(ErrorDetail)>",
        "parametrize_id_source": null,
        "result_key": "ErrorDetails"
    },
    "greengrass_error_details": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ErrorDetails)>",
        "result_key": "ErrorDetails"
    },
    "greengrass_error_message": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "ErrorMessage"
    },
    "greengrass_group_certificate_authorities": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_group_certificate_authorities(['GroupId'])",
            "method_name": "list_group_certificate_authorities",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfGroupCertificateAuthorityProperties)>",
        "result_key": "GroupCertificateAuthorities"
    },
    "greengrass_group_certificate_authority_arn": {
        "fetch": {
            "all_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_authority(['CertificateAuthorityId', 'GroupId'])",
            "method_name": "get_group_certificate_authority",
            "required_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "GroupCertificateAuthorityArn"
    },
    "greengrass_group_certificate_authority_id": {
        "fetch": {
            "all_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_authority(['CertificateAuthorityId', 'GroupId'])",
            "method_name": "get_group_certificate_authority",
            "required_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "GroupCertificateAuthorityId"
    },
    "greengrass_group_certificate_authority_properties": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_group_certificate_authorities(['GroupId'])",
            "method_name": "list_group_certificate_authorities",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(GroupCertificateAuthorityProperties)>",
        "parametrize_id_source": [
            "GroupCertificateAuthorityId"
        ],
        "result_key": "GroupCertificateAuthorities"
    },
    "greengrass_group_id": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_configuration(['GroupId'])",
            "method_name": "get_group_certificate_configuration",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "GroupId"
    },
    "greengrass_group_information": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_groups([])",
            "method_name": "list_groups",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(GroupInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Groups"
    },
    "greengrass_groups": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.list_groups([])",
            "method_name": "list_groups",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfGroupInformation)>",
        "result_key": "Groups"
    },
    "greengrass_id_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_core_definition_version": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "docstring": "greengrass.get_core_definition_version(['CoreDefinitionId', 'CoreDefinitionVersionId'])",
            "method_name": "get_core_definition_version",
            "required_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_device_definition_version": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId",
                "DeviceDefinitionVersionId"
            ],
            "docstring": "greengrass.get_device_definition_version(['DeviceDefinitionVersionId', 'DeviceDefinitionId'])",
            "method_name": "get_device_definition_version",
            "required_args": [
                "DeviceDefinitionVersionId",
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_function_definition_version": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_function_definition_version(['FunctionDefinitionId', 'FunctionDefinitionVersionId'])",
            "method_name": "get_function_definition_version",
            "required_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_group_version": {
        "fetch": {
            "all_args": [
                "GroupId",
                "GroupVersionId"
            ],
            "docstring": "greengrass.get_group_version(['GroupVersionId', 'GroupId'])",
            "method_name": "get_group_version",
            "required_args": [
                "GroupVersionId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_logger_definition_version": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId",
                "LoggerDefinitionVersionId"
            ],
            "docstring": "greengrass.get_logger_definition_version(['LoggerDefinitionVersionId', 'LoggerDefinitionId'])",
            "method_name": "get_logger_definition_version",
            "required_args": [
                "LoggerDefinitionVersionId",
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_id_from_get_subscription_definition_version": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_subscription_definition_version(['SubscriptionDefinitionId', 'SubscriptionDefinitionVersionId'])",
            "method_name": "get_subscription_definition_version",
            "required_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Id"
    },
    "greengrass_last_updated_timestamp_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_last_updated_timestamp_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_last_updated_timestamp_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_last_updated_timestamp_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_last_updated_timestamp_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_last_updated_timestamp_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LastUpdatedTimestamp"
    },
    "greengrass_latest_version_arn_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_arn_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_arn_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_arn_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_arn_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_arn_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersionArn"
    },
    "greengrass_latest_version_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_latest_version_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_latest_version_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_latest_version_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_latest_version_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_latest_version_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "LatestVersion"
    },
    "greengrass_message": {
        "fetch": {
            "all_args": [
                "ThingName"
            ],
            "docstring": "greengrass.get_connectivity_info(['ThingName'])",
            "method_name": "get_connectivity_info",
            "required_args": [
                "ThingName"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Message"
    },
    "greengrass_name_from_get_core_definition": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.get_core_definition(['CoreDefinitionId'])",
            "method_name": "get_core_definition",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_name_from_get_device_definition": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.get_device_definition(['DeviceDefinitionId'])",
            "method_name": "get_device_definition",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_name_from_get_function_definition": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.get_function_definition(['FunctionDefinitionId'])",
            "method_name": "get_function_definition",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_name_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_group(['GroupId'])",
            "method_name": "get_group",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_name_from_get_logger_definition": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.get_logger_definition(['LoggerDefinitionId'])",
            "method_name": "get_logger_definition",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_name_from_get_subscription_definition": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.get_subscription_definition(['SubscriptionDefinitionId'])",
            "method_name": "get_subscription_definition",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Name"
    },
    "greengrass_pem_encoded_certificate": {
        "fetch": {
            "all_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "docstring": "greengrass.get_group_certificate_authority(['CertificateAuthorityId', 'GroupId'])",
            "method_name": "get_group_certificate_authority",
            "required_args": [
                "CertificateAuthorityId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "PemEncodedCertificate"
    },
    "greengrass_role_arn_from_get_associated_role": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.get_associated_role(['GroupId'])",
            "method_name": "get_associated_role",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "RoleArn"
    },
    "greengrass_role_arn_from_get_service_role_for_account": {
        "fetch": {
            "all_args": [],
            "docstring": "greengrass.get_service_role_for_account([])",
            "method_name": "get_service_role_for_account",
            "required_args": [],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "RoleArn"
    },
    "greengrass_updated_at": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "GroupId"
            ],
            "docstring": "greengrass.get_deployment_status(['GroupId', 'DeploymentId'])",
            "method_name": "get_deployment_status",
            "required_args": [
                "GroupId",
                "DeploymentId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "UpdatedAt"
    },
    "greengrass_version_from_get_core_definition_version": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "docstring": "greengrass.get_core_definition_version(['CoreDefinitionId', 'CoreDefinitionVersionId'])",
            "method_name": "get_core_definition_version",
            "required_args": [
                "CoreDefinitionId",
                "CoreDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_from_get_device_definition_version": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId",
                "DeviceDefinitionVersionId"
            ],
            "docstring": "greengrass.get_device_definition_version(['DeviceDefinitionVersionId', 'DeviceDefinitionId'])",
            "method_name": "get_device_definition_version",
            "required_args": [
                "DeviceDefinitionVersionId",
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_from_get_function_definition_version": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_function_definition_version(['FunctionDefinitionId', 'FunctionDefinitionVersionId'])",
            "method_name": "get_function_definition_version",
            "required_args": [
                "FunctionDefinitionId",
                "FunctionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_from_get_group_version": {
        "fetch": {
            "all_args": [
                "GroupId",
                "GroupVersionId"
            ],
            "docstring": "greengrass.get_group_version(['GroupVersionId', 'GroupId'])",
            "method_name": "get_group_version",
            "required_args": [
                "GroupVersionId",
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_from_get_logger_definition_version": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId",
                "LoggerDefinitionVersionId"
            ],
            "docstring": "greengrass.get_logger_definition_version(['LoggerDefinitionVersionId', 'LoggerDefinitionId'])",
            "method_name": "get_logger_definition_version",
            "required_args": [
                "LoggerDefinitionVersionId",
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_from_get_subscription_definition_version": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "docstring": "greengrass.get_subscription_definition_version(['SubscriptionDefinitionId', 'SubscriptionDefinitionVersionId'])",
            "method_name": "get_subscription_definition_version",
            "required_args": [
                "SubscriptionDefinitionId",
                "SubscriptionDefinitionVersionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StringShape(__string)>",
        "result_key": "Version"
    },
    "greengrass_version_information_from_list_core_definition_versions": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.list_core_definition_versions(['CoreDefinitionId'])",
            "method_name": "list_core_definition_versions",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_version_information_from_list_device_definition_versions": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.list_device_definition_versions(['DeviceDefinitionId'])",
            "method_name": "list_device_definition_versions",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_version_information_from_list_function_definition_versions": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.list_function_definition_versions(['FunctionDefinitionId'])",
            "method_name": "list_function_definition_versions",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_version_information_from_list_group_versions": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_group_versions(['GroupId'])",
            "method_name": "list_group_versions",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_version_information_from_list_logger_definition_versions": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.list_logger_definition_versions(['LoggerDefinitionId'])",
            "method_name": "list_logger_definition_versions",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_version_information_from_list_subscription_definition_versions": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.list_subscription_definition_versions(['SubscriptionDefinitionId'])",
            "method_name": "list_subscription_definition_versions",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<StructureShape(VersionInformation)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_core_definition_versions": {
        "fetch": {
            "all_args": [
                "CoreDefinitionId"
            ],
            "docstring": "greengrass.list_core_definition_versions(['CoreDefinitionId'])",
            "method_name": "list_core_definition_versions",
            "required_args": [
                "CoreDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_device_definition_versions": {
        "fetch": {
            "all_args": [
                "DeviceDefinitionId"
            ],
            "docstring": "greengrass.list_device_definition_versions(['DeviceDefinitionId'])",
            "method_name": "list_device_definition_versions",
            "required_args": [
                "DeviceDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_function_definition_versions": {
        "fetch": {
            "all_args": [
                "FunctionDefinitionId"
            ],
            "docstring": "greengrass.list_function_definition_versions(['FunctionDefinitionId'])",
            "method_name": "list_function_definition_versions",
            "required_args": [
                "FunctionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_group_versions": {
        "fetch": {
            "all_args": [
                "GroupId"
            ],
            "docstring": "greengrass.list_group_versions(['GroupId'])",
            "method_name": "list_group_versions",
            "required_args": [
                "GroupId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_logger_definition_versions": {
        "fetch": {
            "all_args": [
                "LoggerDefinitionId"
            ],
            "docstring": "greengrass.list_logger_definition_versions(['LoggerDefinitionId'])",
            "method_name": "list_logger_definition_versions",
            "required_args": [
                "LoggerDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "greengrass_versions_from_list_subscription_definition_versions": {
        "fetch": {
            "all_args": [
                "SubscriptionDefinitionId"
            ],
            "docstring": "greengrass.list_subscription_definition_versions(['SubscriptionDefinitionId'])",
            "method_name": "list_subscription_definition_versions",
            "required_args": [
                "SubscriptionDefinitionId"
            ],
            "service_name": "greengrass"
        },
        "output_shape": "<ListShape(ListOfVersionInformation)>",
        "result_key": "Versions"
    },
    "health_affected_entity": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_affected_entities(['filter'])",
            "method_name": "describe_affected_entities",
            "required_args": [
                "filter"
            ],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(AffectedEntity)>",
        "parametrize_id_source": [
            "awsAccountId"
        ],
        "result_key": "entities"
    },
    "health_entities": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_affected_entities(['filter'])",
            "method_name": "describe_affected_entities",
            "required_args": [
                "filter"
            ],
            "service_name": "health"
        },
        "output_shape": "<ListShape(EntityList)>",
        "result_key": "entities"
    },
    "health_entity_aggregate": {
        "fetch": {
            "all_args": [
                "eventArns"
            ],
            "docstring": "health.describe_entity_aggregates([])",
            "method_name": "describe_entity_aggregates",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(EntityAggregate)>",
        "parametrize_id_source": [
            "eventArn"
        ],
        "result_key": "entityAggregates"
    },
    "health_entity_aggregates": {
        "fetch": {
            "all_args": [
                "eventArns"
            ],
            "docstring": "health.describe_entity_aggregates([])",
            "method_name": "describe_entity_aggregates",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<ListShape(EntityAggregateList)>",
        "result_key": "entityAggregates"
    },
    "health_event": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "events"
    },
    "health_event_aggregate": {
        "fetch": {
            "all_args": [
                "filter",
                "aggregateField"
            ],
            "docstring": "health.describe_event_aggregates(['aggregateField'])",
            "method_name": "describe_event_aggregates",
            "required_args": [
                "aggregateField"
            ],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(EventAggregate)>",
        "parametrize_id_source": null,
        "result_key": "eventAggregates"
    },
    "health_event_aggregates": {
        "fetch": {
            "all_args": [
                "filter",
                "aggregateField"
            ],
            "docstring": "health.describe_event_aggregates(['aggregateField'])",
            "method_name": "describe_event_aggregates",
            "required_args": [
                "aggregateField"
            ],
            "service_name": "health"
        },
        "output_shape": "<ListShape(EventAggregateList)>",
        "result_key": "eventAggregates"
    },
    "health_event_details": {
        "fetch": {
            "all_args": [
                "eventArns",
                "locale"
            ],
            "docstring": "health.describe_event_details(['eventArns'])",
            "method_name": "describe_event_details",
            "required_args": [
                "eventArns"
            ],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(EventDetails)>",
        "parametrize_id_source": [
            "event"
        ],
        "result_key": "successfulSet"
    },
    "health_event_details_error_item": {
        "fetch": {
            "all_args": [
                "eventArns",
                "locale"
            ],
            "docstring": "health.describe_event_details(['eventArns'])",
            "method_name": "describe_event_details",
            "required_args": [
                "eventArns"
            ],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(EventDetailsErrorItem)>",
        "parametrize_id_source": [
            "eventArn"
        ],
        "result_key": "failedSet"
    },
    "health_event_type": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_event_types([])",
            "method_name": "describe_event_types",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<StructureShape(EventType)>",
        "parametrize_id_source": null,
        "result_key": "eventTypes"
    },
    "health_event_types": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_event_types([])",
            "method_name": "describe_event_types",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<ListShape(EventTypeList)>",
        "result_key": "eventTypes"
    },
    "health_events": {
        "fetch": {
            "all_args": [
                "filter",
                "locale"
            ],
            "docstring": "health.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "health"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "events"
    },
    "health_failed_set": {
        "fetch": {
            "all_args": [
                "eventArns",
                "locale"
            ],
            "docstring": "health.describe_event_details(['eventArns'])",
            "method_name": "describe_event_details",
            "required_args": [
                "eventArns"
            ],
            "service_name": "health"
        },
        "output_shape": "<ListShape(DescribeEventDetailsFailedSet)>",
        "result_key": "failedSet"
    },
    "health_successful_set": {
        "fetch": {
            "all_args": [
                "eventArns",
                "locale"
            ],
            "docstring": "health.describe_event_details(['eventArns'])",
            "method_name": "describe_event_details",
            "required_args": [
                "eventArns"
            ],
            "service_name": "health"
        },
        "output_shape": "<ListShape(DescribeEventDetailsSuccessfulSet)>",
        "result_key": "successfulSet"
    },
    "iam_access_key_last_used": {
        "fetch": {
            "all_args": [
                "AccessKeyId"
            ],
            "docstring": "iam.get_access_key_last_used(['AccessKeyId'])",
            "method_name": "get_access_key_last_used",
            "required_args": [
                "AccessKeyId"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(AccessKeyLastUsed)>",
        "result_key": "AccessKeyLastUsed"
    },
    "iam_access_key_metadata_from_list_access_keys": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_access_keys([])",
            "method_name": "list_access_keys",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(AccessKeyMetadata)>",
        "parametrize_id_source": [
            "UserName"
        ],
        "result_key": "AccessKeyMetadata"
    },
    "iam_account_alias_type": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_account_aliases([])",
            "method_name": "list_account_aliases",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(accountAliasType)>",
        "parametrize_id_source": [
            "accountAliasType"
        ],
        "result_key": "AccountAliases"
    },
    "iam_account_aliases": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_account_aliases([])",
            "method_name": "list_account_aliases",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(accountAliasListType)>",
        "result_key": "AccountAliases"
    },
    "iam_attached_policies_from_list_attached_group_policies": {
        "fetch": {
            "all_args": [
                "GroupName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_group_policies(['GroupName'])",
            "method_name": "list_attached_group_policies",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(attachedPoliciesListType)>",
        "result_key": "AttachedPolicies"
    },
    "iam_attached_policies_from_list_attached_role_policies": {
        "fetch": {
            "all_args": [
                "RoleName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_role_policies(['RoleName'])",
            "method_name": "list_attached_role_policies",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(attachedPoliciesListType)>",
        "result_key": "AttachedPolicies"
    },
    "iam_attached_policies_from_list_attached_user_policies": {
        "fetch": {
            "all_args": [
                "UserName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_user_policies(['UserName'])",
            "method_name": "list_attached_user_policies",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(attachedPoliciesListType)>",
        "result_key": "AttachedPolicies"
    },
    "iam_attached_policy_from_list_attached_group_policies": {
        "fetch": {
            "all_args": [
                "GroupName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_group_policies(['GroupName'])",
            "method_name": "list_attached_group_policies",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(AttachedPolicy)>",
        "parametrize_id_source": [
            "PolicyArn"
        ],
        "result_key": "AttachedPolicies"
    },
    "iam_attached_policy_from_list_attached_role_policies": {
        "fetch": {
            "all_args": [
                "RoleName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_role_policies(['RoleName'])",
            "method_name": "list_attached_role_policies",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(AttachedPolicy)>",
        "parametrize_id_source": [
            "PolicyArn"
        ],
        "result_key": "AttachedPolicies"
    },
    "iam_attached_policy_from_list_attached_user_policies": {
        "fetch": {
            "all_args": [
                "UserName",
                "PathPrefix"
            ],
            "docstring": "iam.list_attached_user_policies(['UserName'])",
            "method_name": "list_attached_user_policies",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(AttachedPolicy)>",
        "parametrize_id_source": [
            "PolicyArn"
        ],
        "result_key": "AttachedPolicies"
    },
    "iam_certificates": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_signing_certificates([])",
            "method_name": "list_signing_certificates",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(certificateListType)>",
        "result_key": "Certificates"
    },
    "iam_client_id_list": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(clientIDListType)>",
        "result_key": "ClientIDList"
    },
    "iam_client_id_type": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(clientIDType)>",
        "parametrize_id_source": [
            "clientIDType"
        ],
        "result_key": "ClientIDList"
    },
    "iam_content": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.get_credential_report([])",
            "method_name": "get_credential_report",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<Shape(ReportContentType)>",
        "result_key": "Content"
    },
    "iam_context_key_name_type_from_get_context_keys_for_custom_policy": {
        "fetch": {
            "all_args": [
                "PolicyInputList"
            ],
            "docstring": "iam.get_context_keys_for_custom_policy(['PolicyInputList'])",
            "method_name": "get_context_keys_for_custom_policy",
            "required_args": [
                "PolicyInputList"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(ContextKeyNameType)>",
        "parametrize_id_source": [
            "ContextKeyNameType"
        ],
        "result_key": "ContextKeyNames"
    },
    "iam_context_key_name_type_from_get_context_keys_for_principal_policy": {
        "fetch": {
            "all_args": [
                "PolicySourceArn",
                "PolicyInputList"
            ],
            "docstring": "iam.get_context_keys_for_principal_policy(['PolicySourceArn'])",
            "method_name": "get_context_keys_for_principal_policy",
            "required_args": [
                "PolicySourceArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(ContextKeyNameType)>",
        "parametrize_id_source": [
            "ContextKeyNameType"
        ],
        "result_key": "ContextKeyNames"
    },
    "iam_context_key_names_from_get_context_keys_for_custom_policy": {
        "fetch": {
            "all_args": [
                "PolicyInputList"
            ],
            "docstring": "iam.get_context_keys_for_custom_policy(['PolicyInputList'])",
            "method_name": "get_context_keys_for_custom_policy",
            "required_args": [
                "PolicyInputList"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(ContextKeyNamesResultListType)>",
        "result_key": "ContextKeyNames"
    },
    "iam_context_key_names_from_get_context_keys_for_principal_policy": {
        "fetch": {
            "all_args": [
                "PolicySourceArn",
                "PolicyInputList"
            ],
            "docstring": "iam.get_context_keys_for_principal_policy(['PolicySourceArn'])",
            "method_name": "get_context_keys_for_principal_policy",
            "required_args": [
                "PolicySourceArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(ContextKeyNamesResultListType)>",
        "result_key": "ContextKeyNames"
    },
    "iam_create_date_from_get_open_id_connect_provider": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<Shape(dateType)>",
        "result_key": "CreateDate"
    },
    "iam_create_date_from_get_saml_provider": {
        "fetch": {
            "all_args": [
                "SAMLProviderArn"
            ],
            "docstring": "iam.get_saml_provider(['SAMLProviderArn'])",
            "method_name": "get_saml_provider",
            "required_args": [
                "SAMLProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<Shape(dateType)>",
        "result_key": "CreateDate"
    },
    "iam_generated_time": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.get_credential_report([])",
            "method_name": "get_credential_report",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<Shape(dateType)>",
        "result_key": "GeneratedTime"
    },
    "iam_group_detail": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(GroupDetail)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "GroupDetailList"
    },
    "iam_group_detail_list": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(groupDetailListType)>",
        "result_key": "GroupDetailList"
    },
    "iam_group_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupName"
            ],
            "docstring": "iam.get_group(['GroupName'])",
            "method_name": "get_group",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Group)>",
        "result_key": "Group"
    },
    "iam_group_from_list_groups": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_groups([])",
            "method_name": "list_groups",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Group)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "Groups"
    },
    "iam_group_from_list_groups_for_user": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_groups_for_user(['UserName'])",
            "method_name": "list_groups_for_user",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Group)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "Groups"
    },
    "iam_group_name": {
        "fetch": {
            "all_args": [
                "GroupName",
                "PolicyName"
            ],
            "docstring": "iam.get_group_policy(['GroupName', 'PolicyName'])",
            "method_name": "get_group_policy",
            "required_args": [
                "GroupName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(groupNameType)>",
        "result_key": "GroupName"
    },
    "iam_groups_from_list_groups": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_groups([])",
            "method_name": "list_groups",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(groupListType)>",
        "result_key": "Groups"
    },
    "iam_groups_from_list_groups_for_user": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_groups_for_user(['UserName'])",
            "method_name": "list_groups_for_user",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(groupListType)>",
        "result_key": "Groups"
    },
    "iam_instance_profile_from_get_instance_profile": {
        "fetch": {
            "all_args": [
                "InstanceProfileName"
            ],
            "docstring": "iam.get_instance_profile(['InstanceProfileName'])",
            "method_name": "get_instance_profile",
            "required_args": [
                "InstanceProfileName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(InstanceProfile)>",
        "result_key": "InstanceProfile"
    },
    "iam_instance_profile_from_list_instance_profiles": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_instance_profiles([])",
            "method_name": "list_instance_profiles",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(InstanceProfile)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "InstanceProfiles"
    },
    "iam_instance_profile_from_list_instance_profiles_for_role": {
        "fetch": {
            "all_args": [
                "RoleName"
            ],
            "docstring": "iam.list_instance_profiles_for_role(['RoleName'])",
            "method_name": "list_instance_profiles_for_role",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(InstanceProfile)>",
        "parametrize_id_source": [
            "InstanceProfileId"
        ],
        "result_key": "InstanceProfiles"
    },
    "iam_instance_profiles_from_list_instance_profiles": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_instance_profiles([])",
            "method_name": "list_instance_profiles",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(instanceProfileListType)>",
        "result_key": "InstanceProfiles"
    },
    "iam_instance_profiles_from_list_instance_profiles_for_role": {
        "fetch": {
            "all_args": [
                "RoleName"
            ],
            "docstring": "iam.list_instance_profiles_for_role(['RoleName'])",
            "method_name": "list_instance_profiles_for_role",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(instanceProfileListType)>",
        "result_key": "InstanceProfiles"
    },
    "iam_login_profile": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.get_login_profile(['UserName'])",
            "method_name": "get_login_profile",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(LoginProfile)>",
        "result_key": "LoginProfile"
    },
    "iam_managed_policy_detail": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(ManagedPolicyDetail)>",
        "parametrize_id_source": [
            "PolicyId"
        ],
        "result_key": "Policies"
    },
    "iam_mfa_device": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_mfa_devices([])",
            "method_name": "list_mfa_devices",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(MFADevice)>",
        "parametrize_id_source": [
            "UserName"
        ],
        "result_key": "MFADevices"
    },
    "iam_mfa_devices": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_mfa_devices([])",
            "method_name": "list_mfa_devices",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(mfaDeviceListType)>",
        "result_key": "MFADevices"
    },
    "iam_open_id_connect_provider_list": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_open_id_connect_providers([])",
            "method_name": "list_open_id_connect_providers",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(OpenIDConnectProviderListType)>",
        "result_key": "OpenIDConnectProviderList"
    },
    "iam_open_id_connect_provider_list_entry": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_open_id_connect_providers([])",
            "method_name": "list_open_id_connect_providers",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(OpenIDConnectProviderListEntry)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "OpenIDConnectProviderList"
    },
    "iam_password_policy": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.get_account_password_policy([])",
            "method_name": "get_account_password_policy",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PasswordPolicy)>",
        "result_key": "PasswordPolicy"
    },
    "iam_policies_from_get_account_authorization_details": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(ManagedPolicyDetailListType)>",
        "result_key": "Policies"
    },
    "iam_policies_from_list_policies": {
        "fetch": {
            "all_args": [
                "Scope",
                "OnlyAttached",
                "PathPrefix"
            ],
            "docstring": "iam.list_policies([])",
            "method_name": "list_policies",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(policyListType)>",
        "result_key": "Policies"
    },
    "iam_policy_document_from_get_group_policy": {
        "fetch": {
            "all_args": [
                "GroupName",
                "PolicyName"
            ],
            "docstring": "iam.get_group_policy(['GroupName', 'PolicyName'])",
            "method_name": "get_group_policy",
            "required_args": [
                "GroupName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyDocumentType)>",
        "result_key": "PolicyDocument"
    },
    "iam_policy_document_from_get_role_policy": {
        "fetch": {
            "all_args": [
                "RoleName",
                "PolicyName"
            ],
            "docstring": "iam.get_role_policy(['RoleName', 'PolicyName'])",
            "method_name": "get_role_policy",
            "required_args": [
                "RoleName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyDocumentType)>",
        "result_key": "PolicyDocument"
    },
    "iam_policy_document_from_get_user_policy": {
        "fetch": {
            "all_args": [
                "UserName",
                "PolicyName"
            ],
            "docstring": "iam.get_user_policy(['UserName', 'PolicyName'])",
            "method_name": "get_user_policy",
            "required_args": [
                "UserName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyDocumentType)>",
        "result_key": "PolicyDocument"
    },
    "iam_policy_from_get_policy": {
        "fetch": {
            "all_args": [
                "PolicyArn"
            ],
            "docstring": "iam.get_policy(['PolicyArn'])",
            "method_name": "get_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Policy)>",
        "result_key": "Policy"
    },
    "iam_policy_from_list_policies": {
        "fetch": {
            "all_args": [
                "Scope",
                "OnlyAttached",
                "PathPrefix"
            ],
            "docstring": "iam.list_policies([])",
            "method_name": "list_policies",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Policy)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "Policies"
    },
    "iam_policy_group": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PolicyGroup)>",
        "parametrize_id_source": [
            "GroupId"
        ],
        "result_key": "PolicyGroups"
    },
    "iam_policy_groups": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(PolicyGroupListType)>",
        "result_key": "PolicyGroups"
    },
    "iam_policy_name_from_get_group_policy": {
        "fetch": {
            "all_args": [
                "GroupName",
                "PolicyName"
            ],
            "docstring": "iam.get_group_policy(['GroupName', 'PolicyName'])",
            "method_name": "get_group_policy",
            "required_args": [
                "GroupName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "result_key": "PolicyName"
    },
    "iam_policy_name_from_get_role_policy": {
        "fetch": {
            "all_args": [
                "RoleName",
                "PolicyName"
            ],
            "docstring": "iam.get_role_policy(['RoleName', 'PolicyName'])",
            "method_name": "get_role_policy",
            "required_args": [
                "RoleName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "result_key": "PolicyName"
    },
    "iam_policy_name_from_get_user_policy": {
        "fetch": {
            "all_args": [
                "UserName",
                "PolicyName"
            ],
            "docstring": "iam.get_user_policy(['UserName', 'PolicyName'])",
            "method_name": "get_user_policy",
            "required_args": [
                "UserName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "result_key": "PolicyName"
    },
    "iam_policy_name_type_from_list_group_policies": {
        "fetch": {
            "all_args": [
                "GroupName"
            ],
            "docstring": "iam.list_group_policies(['GroupName'])",
            "method_name": "list_group_policies",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "parametrize_id_source": [
            "policyNameType"
        ],
        "result_key": "PolicyNames"
    },
    "iam_policy_name_type_from_list_role_policies": {
        "fetch": {
            "all_args": [
                "RoleName"
            ],
            "docstring": "iam.list_role_policies(['RoleName'])",
            "method_name": "list_role_policies",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "parametrize_id_source": [
            "policyNameType"
        ],
        "result_key": "PolicyNames"
    },
    "iam_policy_name_type_from_list_user_policies": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_user_policies(['UserName'])",
            "method_name": "list_user_policies",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(policyNameType)>",
        "parametrize_id_source": [
            "policyNameType"
        ],
        "result_key": "PolicyNames"
    },
    "iam_policy_names_from_list_group_policies": {
        "fetch": {
            "all_args": [
                "GroupName"
            ],
            "docstring": "iam.list_group_policies(['GroupName'])",
            "method_name": "list_group_policies",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(policyNameListType)>",
        "result_key": "PolicyNames"
    },
    "iam_policy_names_from_list_role_policies": {
        "fetch": {
            "all_args": [
                "RoleName"
            ],
            "docstring": "iam.list_role_policies(['RoleName'])",
            "method_name": "list_role_policies",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(policyNameListType)>",
        "result_key": "PolicyNames"
    },
    "iam_policy_names_from_list_user_policies": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_user_policies(['UserName'])",
            "method_name": "list_user_policies",
            "required_args": [
                "UserName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(policyNameListType)>",
        "result_key": "PolicyNames"
    },
    "iam_policy_role": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PolicyRole)>",
        "parametrize_id_source": [
            "RoleId"
        ],
        "result_key": "PolicyRoles"
    },
    "iam_policy_roles": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(PolicyRoleListType)>",
        "result_key": "PolicyRoles"
    },
    "iam_policy_user": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PolicyUser)>",
        "parametrize_id_source": [
            "UserId"
        ],
        "result_key": "PolicyUsers"
    },
    "iam_policy_users": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "EntityFilter",
                "PathPrefix"
            ],
            "docstring": "iam.list_entities_for_policy(['PolicyArn'])",
            "method_name": "list_entities_for_policy",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(PolicyUserListType)>",
        "result_key": "PolicyUsers"
    },
    "iam_policy_version_from_get_policy_version": {
        "fetch": {
            "all_args": [
                "PolicyArn",
                "VersionId"
            ],
            "docstring": "iam.get_policy_version(['PolicyArn', 'VersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "PolicyArn",
                "VersionId"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PolicyVersion)>",
        "result_key": "PolicyVersion"
    },
    "iam_policy_version_from_list_policy_versions": {
        "fetch": {
            "all_args": [
                "PolicyArn"
            ],
            "docstring": "iam.list_policy_versions(['PolicyArn'])",
            "method_name": "list_policy_versions",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(PolicyVersion)>",
        "parametrize_id_source": [
            "VersionId"
        ],
        "result_key": "Versions"
    },
    "iam_reason": {
        "fetch": {
            "all_args": [
                "DeletionTaskId"
            ],
            "docstring": "iam.get_service_linked_role_deletion_status(['DeletionTaskId'])",
            "method_name": "get_service_linked_role_deletion_status",
            "required_args": [
                "DeletionTaskId"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(DeletionTaskFailureReasonType)>",
        "result_key": "Reason"
    },
    "iam_report_format": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.get_credential_report([])",
            "method_name": "get_credential_report",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(ReportFormatType)>",
        "result_key": "ReportFormat"
    },
    "iam_role_detail": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(RoleDetail)>",
        "parametrize_id_source": [
            "RoleId"
        ],
        "result_key": "RoleDetailList"
    },
    "iam_role_detail_list": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(roleDetailListType)>",
        "result_key": "RoleDetailList"
    },
    "iam_role_from_get_role": {
        "fetch": {
            "all_args": [
                "RoleName"
            ],
            "docstring": "iam.get_role(['RoleName'])",
            "method_name": "get_role",
            "required_args": [
                "RoleName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Role)>",
        "result_key": "Role"
    },
    "iam_role_from_list_roles": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_roles([])",
            "method_name": "list_roles",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(Role)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "Roles"
    },
    "iam_role_name": {
        "fetch": {
            "all_args": [
                "RoleName",
                "PolicyName"
            ],
            "docstring": "iam.get_role_policy(['RoleName', 'PolicyName'])",
            "method_name": "get_role_policy",
            "required_args": [
                "RoleName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(roleNameType)>",
        "result_key": "RoleName"
    },
    "iam_roles": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_roles([])",
            "method_name": "list_roles",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(roleListType)>",
        "result_key": "Roles"
    },
    "iam_saml_metadata_document": {
        "fetch": {
            "all_args": [
                "SAMLProviderArn"
            ],
            "docstring": "iam.get_saml_provider(['SAMLProviderArn'])",
            "method_name": "get_saml_provider",
            "required_args": [
                "SAMLProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(SAMLMetadataDocumentType)>",
        "result_key": "SAMLMetadataDocument"
    },
    "iam_saml_provider_list": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_saml_providers([])",
            "method_name": "list_saml_providers",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(SAMLProviderListType)>",
        "result_key": "SAMLProviderList"
    },
    "iam_saml_provider_list_entry": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.list_saml_providers([])",
            "method_name": "list_saml_providers",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(SAMLProviderListEntry)>",
        "parametrize_id_source": [
            "ValidUntil"
        ],
        "result_key": "SAMLProviderList"
    },
    "iam_server_certificate": {
        "fetch": {
            "all_args": [
                "ServerCertificateName"
            ],
            "docstring": "iam.get_server_certificate(['ServerCertificateName'])",
            "method_name": "get_server_certificate",
            "required_args": [
                "ServerCertificateName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(ServerCertificate)>",
        "result_key": "ServerCertificate"
    },
    "iam_server_certificate_metadata": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_server_certificates([])",
            "method_name": "list_server_certificates",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(ServerCertificateMetadata)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "ServerCertificateMetadataList"
    },
    "iam_server_certificate_metadata_list": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_server_certificates([])",
            "method_name": "list_server_certificates",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(serverCertificateMetadataListType)>",
        "result_key": "ServerCertificateMetadataList"
    },
    "iam_service_specific_credential_metadata": {
        "fetch": {
            "all_args": [
                "UserName",
                "ServiceName"
            ],
            "docstring": "iam.list_service_specific_credentials([])",
            "method_name": "list_service_specific_credentials",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(ServiceSpecificCredentialMetadata)>",
        "parametrize_id_source": [
            "UserName"
        ],
        "result_key": "ServiceSpecificCredentials"
    },
    "iam_service_specific_credentials": {
        "fetch": {
            "all_args": [
                "UserName",
                "ServiceName"
            ],
            "docstring": "iam.list_service_specific_credentials([])",
            "method_name": "list_service_specific_credentials",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(ServiceSpecificCredentialsListType)>",
        "result_key": "ServiceSpecificCredentials"
    },
    "iam_signing_certificate": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_signing_certificates([])",
            "method_name": "list_signing_certificates",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(SigningCertificate)>",
        "parametrize_id_source": [
            "UserName"
        ],
        "result_key": "Certificates"
    },
    "iam_ssh_public_key": {
        "fetch": {
            "all_args": [
                "UserName",
                "SSHPublicKeyId",
                "Encoding"
            ],
            "docstring": "iam.get_ssh_public_key(['UserName', 'SSHPublicKeyId', 'Encoding'])",
            "method_name": "get_ssh_public_key",
            "required_args": [
                "UserName",
                "SSHPublicKeyId",
                "Encoding"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(SSHPublicKey)>",
        "result_key": "SSHPublicKey"
    },
    "iam_ssh_public_key_metadata": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_ssh_public_keys([])",
            "method_name": "list_ssh_public_keys",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(SSHPublicKeyMetadata)>",
        "parametrize_id_source": [
            "UserName"
        ],
        "result_key": "SSHPublicKeys"
    },
    "iam_ssh_public_keys": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.list_ssh_public_keys([])",
            "method_name": "list_ssh_public_keys",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(SSHPublicKeyListType)>",
        "result_key": "SSHPublicKeys"
    },
    "iam_status": {
        "fetch": {
            "all_args": [
                "DeletionTaskId"
            ],
            "docstring": "iam.get_service_linked_role_deletion_status(['DeletionTaskId'])",
            "method_name": "get_service_linked_role_deletion_status",
            "required_args": [
                "DeletionTaskId"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(DeletionTaskStatusType)>",
        "result_key": "Status"
    },
    "iam_summary_map": {
        "fetch": {
            "all_args": [],
            "docstring": "iam.get_account_summary([])",
            "method_name": "get_account_summary",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<MapShape(summaryMapType)>",
        "result_key": "SummaryMap"
    },
    "iam_thumbprint_list": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(thumbprintListType)>",
        "result_key": "ThumbprintList"
    },
    "iam_thumbprint_type": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(thumbprintType)>",
        "parametrize_id_source": [
            "thumbprintType"
        ],
        "result_key": "ThumbprintList"
    },
    "iam_url": {
        "fetch": {
            "all_args": [
                "OpenIDConnectProviderArn"
            ],
            "docstring": "iam.get_open_id_connect_provider(['OpenIDConnectProviderArn'])",
            "method_name": "get_open_id_connect_provider",
            "required_args": [
                "OpenIDConnectProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(OpenIDConnectProviderUrlType)>",
        "result_key": "Url"
    },
    "iam_user_detail": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(UserDetail)>",
        "parametrize_id_source": [
            "UserId"
        ],
        "result_key": "UserDetailList"
    },
    "iam_user_detail_list": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "iam.get_account_authorization_details([])",
            "method_name": "get_account_authorization_details",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(userDetailListType)>",
        "result_key": "UserDetailList"
    },
    "iam_user_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupName"
            ],
            "docstring": "iam.get_group(['GroupName'])",
            "method_name": "get_group",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(User)>",
        "parametrize_id_source": [
            "UserId"
        ],
        "result_key": "Users"
    },
    "iam_user_from_get_user": {
        "fetch": {
            "all_args": [
                "UserName"
            ],
            "docstring": "iam.get_user([])",
            "method_name": "get_user",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(User)>",
        "result_key": "User"
    },
    "iam_user_from_list_users": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_users([])",
            "method_name": "list_users",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(User)>",
        "parametrize_id_source": [
            "Path"
        ],
        "result_key": "Users"
    },
    "iam_user_name_from_get_access_key_last_used": {
        "fetch": {
            "all_args": [
                "AccessKeyId"
            ],
            "docstring": "iam.get_access_key_last_used(['AccessKeyId'])",
            "method_name": "get_access_key_last_used",
            "required_args": [
                "AccessKeyId"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(existingUserNameType)>",
        "result_key": "UserName"
    },
    "iam_user_name_from_get_user_policy": {
        "fetch": {
            "all_args": [
                "UserName",
                "PolicyName"
            ],
            "docstring": "iam.get_user_policy(['UserName', 'PolicyName'])",
            "method_name": "get_user_policy",
            "required_args": [
                "UserName",
                "PolicyName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<StringShape(existingUserNameType)>",
        "result_key": "UserName"
    },
    "iam_users_from_get_group": {
        "fetch": {
            "all_args": [
                "GroupName"
            ],
            "docstring": "iam.get_group(['GroupName'])",
            "method_name": "get_group",
            "required_args": [
                "GroupName"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(userListType)>",
        "result_key": "Users"
    },
    "iam_users_from_list_users": {
        "fetch": {
            "all_args": [
                "PathPrefix"
            ],
            "docstring": "iam.list_users([])",
            "method_name": "list_users",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(userListType)>",
        "result_key": "Users"
    },
    "iam_valid_until": {
        "fetch": {
            "all_args": [
                "SAMLProviderArn"
            ],
            "docstring": "iam.get_saml_provider(['SAMLProviderArn'])",
            "method_name": "get_saml_provider",
            "required_args": [
                "SAMLProviderArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<Shape(dateType)>",
        "result_key": "ValidUntil"
    },
    "iam_versions": {
        "fetch": {
            "all_args": [
                "PolicyArn"
            ],
            "docstring": "iam.list_policy_versions(['PolicyArn'])",
            "method_name": "list_policy_versions",
            "required_args": [
                "PolicyArn"
            ],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(policyDocumentVersionListType)>",
        "result_key": "Versions"
    },
    "iam_virtual_mfa_device": {
        "fetch": {
            "all_args": [
                "AssignmentStatus"
            ],
            "docstring": "iam.list_virtual_mfa_devices([])",
            "method_name": "list_virtual_mfa_devices",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<StructureShape(VirtualMFADevice)>",
        "parametrize_id_source": null,
        "result_key": "VirtualMFADevices"
    },
    "iam_virtual_mfa_devices": {
        "fetch": {
            "all_args": [
                "AssignmentStatus"
            ],
            "docstring": "iam.list_virtual_mfa_devices([])",
            "method_name": "list_virtual_mfa_devices",
            "required_args": [],
            "service_name": "iam"
        },
        "output_shape": "<ListShape(virtualMFADeviceListType)>",
        "result_key": "VirtualMFADevices"
    },
    "importexport_artifact": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StructureShape(Artifact)>",
        "parametrize_id_source": null,
        "result_key": "ArtifactList"
    },
    "importexport_artifact_list": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<ListShape(ArtifactList)>",
        "result_key": "ArtifactList"
    },
    "importexport_carrier": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(Carrier)>",
        "result_key": "Carrier"
    },
    "importexport_creation_date": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<Shape(CreationDate)>",
        "result_key": "CreationDate"
    },
    "importexport_current_manifest": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(CurrentManifest)>",
        "result_key": "CurrentManifest"
    },
    "importexport_error_count": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<Shape(ErrorCount)>",
        "result_key": "ErrorCount"
    },
    "importexport_job": {
        "fetch": {
            "all_args": [
                "APIVersion"
            ],
            "docstring": "importexport.list_jobs([])",
            "method_name": "list_jobs",
            "required_args": [],
            "service_name": "importexport"
        },
        "output_shape": "<StructureShape(Job)>",
        "parametrize_id_source": [
            "JobId"
        ],
        "result_key": "Jobs"
    },
    "importexport_job_id": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(JobId)>",
        "result_key": "JobId"
    },
    "importexport_job_type": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(JobType)>",
        "result_key": "JobType"
    },
    "importexport_jobs": {
        "fetch": {
            "all_args": [
                "APIVersion"
            ],
            "docstring": "importexport.list_jobs([])",
            "method_name": "list_jobs",
            "required_args": [],
            "service_name": "importexport"
        },
        "output_shape": "<ListShape(JobsList)>",
        "result_key": "Jobs"
    },
    "importexport_location_code": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(LocationCode)>",
        "result_key": "LocationCode"
    },
    "importexport_location_message": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(LocationMessage)>",
        "result_key": "LocationMessage"
    },
    "importexport_log_bucket": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(LogBucket)>",
        "result_key": "LogBucket"
    },
    "importexport_log_key": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(LogKey)>",
        "result_key": "LogKey"
    },
    "importexport_progress_code": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(ProgressCode)>",
        "result_key": "ProgressCode"
    },
    "importexport_progress_message": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(ProgressMessage)>",
        "result_key": "ProgressMessage"
    },
    "importexport_shipping_label_url": {
        "fetch": {
            "all_args": [
                "jobIds",
                "name",
                "company",
                "phoneNumber",
                "country",
                "stateOrProvince",
                "city",
                "postalCode",
                "street1",
                "street2",
                "street3",
                "APIVersion"
            ],
            "docstring": "importexport.get_shipping_label(['jobIds'])",
            "method_name": "get_shipping_label",
            "required_args": [
                "jobIds"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(GenericString)>",
        "result_key": "ShippingLabelURL"
    },
    "importexport_signature": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(Signature)>",
        "result_key": "Signature"
    },
    "importexport_signature_file_contents": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(Signature)>",
        "result_key": "SignatureFileContents"
    },
    "importexport_tracking_number": {
        "fetch": {
            "all_args": [
                "JobId",
                "APIVersion"
            ],
            "docstring": "importexport.get_status(['JobId'])",
            "method_name": "get_status",
            "required_args": [
                "JobId"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(TrackingNumber)>",
        "result_key": "TrackingNumber"
    },
    "importexport_warning": {
        "fetch": {
            "all_args": [
                "jobIds",
                "name",
                "company",
                "phoneNumber",
                "country",
                "stateOrProvince",
                "city",
                "postalCode",
                "street1",
                "street2",
                "street3",
                "APIVersion"
            ],
            "docstring": "importexport.get_shipping_label(['jobIds'])",
            "method_name": "get_shipping_label",
            "required_args": [
                "jobIds"
            ],
            "service_name": "importexport"
        },
        "output_shape": "<StringShape(GenericString)>",
        "result_key": "Warning"
    },
    "inspector_arn_from_list_assessment_runs": {
        "fetch": {
            "all_args": [
                "assessmentTemplateArns",
                "filter"
            ],
            "docstring": "inspector.list_assessment_runs([])",
            "method_name": "list_assessment_runs",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "assessmentRunArns"
    },
    "inspector_arn_from_list_assessment_targets": {
        "fetch": {
            "all_args": [
                "filter"
            ],
            "docstring": "inspector.list_assessment_targets([])",
            "method_name": "list_assessment_targets",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "assessmentTargetArns"
    },
    "inspector_arn_from_list_assessment_templates": {
        "fetch": {
            "all_args": [
                "assessmentTargetArns",
                "filter"
            ],
            "docstring": "inspector.list_assessment_templates([])",
            "method_name": "list_assessment_templates",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "assessmentTemplateArns"
    },
    "inspector_arn_from_list_findings": {
        "fetch": {
            "all_args": [
                "assessmentRunArns",
                "filter"
            ],
            "docstring": "inspector.list_findings([])",
            "method_name": "list_findings",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "findingArns"
    },
    "inspector_arn_from_list_rules_packages": {
        "fetch": {
            "all_args": [],
            "docstring": "inspector.list_rules_packages([])",
            "method_name": "list_rules_packages",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "parametrize_id_source": [
            "Arn"
        ],
        "result_key": "rulesPackageArns"
    },
    "inspector_assessment_run": {
        "fetch": {
            "all_args": [
                "assessmentRunArns"
            ],
            "docstring": "inspector.describe_assessment_runs(['assessmentRunArns'])",
            "method_name": "describe_assessment_runs",
            "required_args": [
                "assessmentRunArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(AssessmentRun)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "assessmentRuns"
    },
    "inspector_assessment_run_agent": {
        "fetch": {
            "all_args": [
                "assessmentRunArn",
                "filter"
            ],
            "docstring": "inspector.list_assessment_run_agents(['assessmentRunArn'])",
            "method_name": "list_assessment_run_agents",
            "required_args": [
                "assessmentRunArn"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(AssessmentRunAgent)>",
        "parametrize_id_source": [
            "assessmentRunArn"
        ],
        "result_key": "assessmentRunAgents"
    },
    "inspector_assessment_run_agents": {
        "fetch": {
            "all_args": [
                "assessmentRunArn",
                "filter"
            ],
            "docstring": "inspector.list_assessment_run_agents(['assessmentRunArn'])",
            "method_name": "list_assessment_run_agents",
            "required_args": [
                "assessmentRunArn"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(AssessmentRunAgentList)>",
        "result_key": "assessmentRunAgents"
    },
    "inspector_assessment_run_arns": {
        "fetch": {
            "all_args": [
                "assessmentTemplateArns",
                "filter"
            ],
            "docstring": "inspector.list_assessment_runs([])",
            "method_name": "list_assessment_runs",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ListReturnedArnList)>",
        "result_key": "assessmentRunArns"
    },
    "inspector_assessment_runs": {
        "fetch": {
            "all_args": [
                "assessmentRunArns"
            ],
            "docstring": "inspector.describe_assessment_runs(['assessmentRunArns'])",
            "method_name": "describe_assessment_runs",
            "required_args": [
                "assessmentRunArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(AssessmentRunList)>",
        "result_key": "assessmentRuns"
    },
    "inspector_assessment_target": {
        "fetch": {
            "all_args": [
                "assessmentTargetArns"
            ],
            "docstring": "inspector.describe_assessment_targets(['assessmentTargetArns'])",
            "method_name": "describe_assessment_targets",
            "required_args": [
                "assessmentTargetArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(AssessmentTarget)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "assessmentTargets"
    },
    "inspector_assessment_target_arns": {
        "fetch": {
            "all_args": [
                "filter"
            ],
            "docstring": "inspector.list_assessment_targets([])",
            "method_name": "list_assessment_targets",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ListReturnedArnList)>",
        "result_key": "assessmentTargetArns"
    },
    "inspector_assessment_targets": {
        "fetch": {
            "all_args": [
                "assessmentTargetArns"
            ],
            "docstring": "inspector.describe_assessment_targets(['assessmentTargetArns'])",
            "method_name": "describe_assessment_targets",
            "required_args": [
                "assessmentTargetArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(AssessmentTargetList)>",
        "result_key": "assessmentTargets"
    },
    "inspector_assessment_template": {
        "fetch": {
            "all_args": [
                "assessmentTemplateArns"
            ],
            "docstring": "inspector.describe_assessment_templates(['assessmentTemplateArns'])",
            "method_name": "describe_assessment_templates",
            "required_args": [
                "assessmentTemplateArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(AssessmentTemplate)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "assessmentTemplates"
    },
    "inspector_assessment_template_arns": {
        "fetch": {
            "all_args": [
                "assessmentTargetArns",
                "filter"
            ],
            "docstring": "inspector.list_assessment_templates([])",
            "method_name": "list_assessment_templates",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ListReturnedArnList)>",
        "result_key": "assessmentTemplateArns"
    },
    "inspector_assessment_templates": {
        "fetch": {
            "all_args": [
                "assessmentTemplateArns"
            ],
            "docstring": "inspector.describe_assessment_templates(['assessmentTemplateArns'])",
            "method_name": "describe_assessment_templates",
            "required_args": [
                "assessmentTemplateArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(AssessmentTemplateList)>",
        "result_key": "assessmentTemplates"
    },
    "inspector_failed_items_from_describe_assessment_runs": {
        "fetch": {
            "all_args": [
                "assessmentRunArns"
            ],
            "docstring": "inspector.describe_assessment_runs(['assessmentRunArns'])",
            "method_name": "describe_assessment_runs",
            "required_args": [
                "assessmentRunArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_failed_items_from_describe_assessment_targets": {
        "fetch": {
            "all_args": [
                "assessmentTargetArns"
            ],
            "docstring": "inspector.describe_assessment_targets(['assessmentTargetArns'])",
            "method_name": "describe_assessment_targets",
            "required_args": [
                "assessmentTargetArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_failed_items_from_describe_assessment_templates": {
        "fetch": {
            "all_args": [
                "assessmentTemplateArns"
            ],
            "docstring": "inspector.describe_assessment_templates(['assessmentTemplateArns'])",
            "method_name": "describe_assessment_templates",
            "required_args": [
                "assessmentTemplateArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_failed_items_from_describe_findings": {
        "fetch": {
            "all_args": [
                "findingArns",
                "locale"
            ],
            "docstring": "inspector.describe_findings(['findingArns'])",
            "method_name": "describe_findings",
            "required_args": [
                "findingArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_failed_items_from_describe_resource_groups": {
        "fetch": {
            "all_args": [
                "resourceGroupArns"
            ],
            "docstring": "inspector.describe_resource_groups(['resourceGroupArns'])",
            "method_name": "describe_resource_groups",
            "required_args": [
                "resourceGroupArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_failed_items_from_describe_rules_packages": {
        "fetch": {
            "all_args": [
                "rulesPackageArns",
                "locale"
            ],
            "docstring": "inspector.describe_rules_packages(['rulesPackageArns'])",
            "method_name": "describe_rules_packages",
            "required_args": [
                "rulesPackageArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<MapShape(FailedItems)>",
        "result_key": "failedItems"
    },
    "inspector_finding": {
        "fetch": {
            "all_args": [
                "findingArns",
                "locale"
            ],
            "docstring": "inspector.describe_findings(['findingArns'])",
            "method_name": "describe_findings",
            "required_args": [
                "findingArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(Finding)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "findings"
    },
    "inspector_finding_arns": {
        "fetch": {
            "all_args": [
                "assessmentRunArns",
                "filter"
            ],
            "docstring": "inspector.list_findings([])",
            "method_name": "list_findings",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ListReturnedArnList)>",
        "result_key": "findingArns"
    },
    "inspector_findings": {
        "fetch": {
            "all_args": [
                "findingArns",
                "locale"
            ],
            "docstring": "inspector.describe_findings(['findingArns'])",
            "method_name": "describe_findings",
            "required_args": [
                "findingArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(FindingList)>",
        "result_key": "findings"
    },
    "inspector_registered_at": {
        "fetch": {
            "all_args": [],
            "docstring": "inspector.describe_cross_account_access_role([])",
            "method_name": "describe_cross_account_access_role",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "registeredAt"
    },
    "inspector_resource_group": {
        "fetch": {
            "all_args": [
                "resourceGroupArns"
            ],
            "docstring": "inspector.describe_resource_groups(['resourceGroupArns'])",
            "method_name": "describe_resource_groups",
            "required_args": [
                "resourceGroupArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(ResourceGroup)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "resourceGroups"
    },
    "inspector_resource_groups": {
        "fetch": {
            "all_args": [
                "resourceGroupArns"
            ],
            "docstring": "inspector.describe_resource_groups(['resourceGroupArns'])",
            "method_name": "describe_resource_groups",
            "required_args": [
                "resourceGroupArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ResourceGroupList)>",
        "result_key": "resourceGroups"
    },
    "inspector_role_arn": {
        "fetch": {
            "all_args": [],
            "docstring": "inspector.describe_cross_account_access_role([])",
            "method_name": "describe_cross_account_access_role",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "roleArn"
    },
    "inspector_rules_package": {
        "fetch": {
            "all_args": [
                "rulesPackageArns",
                "locale"
            ],
            "docstring": "inspector.describe_rules_packages(['rulesPackageArns'])",
            "method_name": "describe_rules_packages",
            "required_args": [
                "rulesPackageArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(RulesPackage)>",
        "parametrize_id_source": [
            "provider"
        ],
        "result_key": "rulesPackages"
    },
    "inspector_rules_package_arns": {
        "fetch": {
            "all_args": [],
            "docstring": "inspector.list_rules_packages([])",
            "method_name": "list_rules_packages",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(ListReturnedArnList)>",
        "result_key": "rulesPackageArns"
    },
    "inspector_rules_packages": {
        "fetch": {
            "all_args": [
                "rulesPackageArns",
                "locale"
            ],
            "docstring": "inspector.describe_rules_packages(['rulesPackageArns'])",
            "method_name": "describe_rules_packages",
            "required_args": [
                "rulesPackageArns"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(RulesPackageList)>",
        "result_key": "rulesPackages"
    },
    "inspector_status": {
        "fetch": {
            "all_args": [
                "assessmentRunArn",
                "reportFileFormat",
                "reportType"
            ],
            "docstring": "inspector.get_assessment_report(['assessmentRunArn', 'reportFileFormat', 'reportType'])",
            "method_name": "get_assessment_report",
            "required_args": [
                "assessmentRunArn",
                "reportFileFormat",
                "reportType"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(ReportStatus)>",
        "result_key": "status"
    },
    "inspector_subscription": {
        "fetch": {
            "all_args": [
                "resourceArn"
            ],
            "docstring": "inspector.list_event_subscriptions([])",
            "method_name": "list_event_subscriptions",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(Subscription)>",
        "parametrize_id_source": [
            "resourceArn"
        ],
        "result_key": "subscriptions"
    },
    "inspector_subscriptions": {
        "fetch": {
            "all_args": [
                "resourceArn"
            ],
            "docstring": "inspector.list_event_subscriptions([])",
            "method_name": "list_event_subscriptions",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(SubscriptionList)>",
        "result_key": "subscriptions"
    },
    "inspector_tag": {
        "fetch": {
            "all_args": [
                "resourceArn"
            ],
            "docstring": "inspector.list_tags_for_resource(['resourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "resourceArn"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "tags"
    },
    "inspector_tags": {
        "fetch": {
            "all_args": [
                "resourceArn"
            ],
            "docstring": "inspector.list_tags_for_resource(['resourceArn'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "resourceArn"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "tags"
    },
    "inspector_telemetry_metadata_from_get_telemetry_metadata": {
        "fetch": {
            "all_args": [
                "assessmentRunArn"
            ],
            "docstring": "inspector.get_telemetry_metadata(['assessmentRunArn'])",
            "method_name": "get_telemetry_metadata",
            "required_args": [
                "assessmentRunArn"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StructureShape(TelemetryMetadata)>",
        "parametrize_id_source": null,
        "result_key": "telemetryMetadata"
    },
    "inspector_url": {
        "fetch": {
            "all_args": [
                "assessmentRunArn",
                "reportFileFormat",
                "reportType"
            ],
            "docstring": "inspector.get_assessment_report(['assessmentRunArn', 'reportFileFormat', 'reportType'])",
            "method_name": "get_assessment_report",
            "required_args": [
                "assessmentRunArn",
                "reportFileFormat",
                "reportType"
            ],
            "service_name": "inspector"
        },
        "output_shape": "<StringShape(Url)>",
        "result_key": "url"
    },
    "inspector_valid": {
        "fetch": {
            "all_args": [],
            "docstring": "inspector.describe_cross_account_access_role([])",
            "method_name": "describe_cross_account_access_role",
            "required_args": [],
            "service_name": "inspector"
        },
        "output_shape": "<Shape(Bool)>",
        "result_key": "valid"
    },
    "iot_attributes": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.describe_thing(['thingName'])",
            "method_name": "describe_thing",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<MapShape(Attributes)>",
        "result_key": "attributes"
    },
    "iot_ca_certificate": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_ca_certificates([])",
            "method_name": "list_ca_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(CACertificate)>",
        "parametrize_id_source": [
            "certificateId"
        ],
        "result_key": "certificates"
    },
    "iot_certificate_description_from_describe_ca_certificate": {
        "fetch": {
            "all_args": [
                "certificateId"
            ],
            "docstring": "iot.describe_ca_certificate(['certificateId'])",
            "method_name": "describe_ca_certificate",
            "required_args": [
                "certificateId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(CACertificateDescription)>",
        "result_key": "certificateDescription"
    },
    "iot_certificate_description_from_describe_certificate": {
        "fetch": {
            "all_args": [
                "certificateId"
            ],
            "docstring": "iot.describe_certificate(['certificateId'])",
            "method_name": "describe_certificate",
            "required_args": [
                "certificateId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(CertificateDescription)>",
        "result_key": "certificateDescription"
    },
    "iot_certificate_from_list_certificates": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_certificates([])",
            "method_name": "list_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(Certificate)>",
        "parametrize_id_source": [
            "certificateId"
        ],
        "result_key": "certificates"
    },
    "iot_certificate_from_list_certificates_by_ca": {
        "fetch": {
            "all_args": [
                "caCertificateId",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_certificates_by_ca(['caCertificateId'])",
            "method_name": "list_certificates_by_ca",
            "required_args": [
                "caCertificateId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(Certificate)>",
        "parametrize_id_source": [
            "certificateId"
        ],
        "result_key": "certificates"
    },
    "iot_certificates_from_list_ca_certificates": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_ca_certificates([])",
            "method_name": "list_ca_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(CACertificates)>",
        "result_key": "certificates"
    },
    "iot_certificates_from_list_certificates": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_certificates([])",
            "method_name": "list_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Certificates)>",
        "result_key": "certificates"
    },
    "iot_certificates_from_list_certificates_by_ca": {
        "fetch": {
            "all_args": [
                "caCertificateId",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_certificates_by_ca(['caCertificateId'])",
            "method_name": "list_certificates_by_ca",
            "required_args": [
                "caCertificateId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Certificates)>",
        "result_key": "certificates"
    },
    "iot_data_payload": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot-data.get_thing_shadow(['thingName'])",
            "method_name": "get_thing_shadow",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot-data"
        },
        "output_shape": "<Shape(JsonDocument)>",
        "result_key": "payload"
    },
    "iot_default_client_id": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.describe_thing(['thingName'])",
            "method_name": "describe_thing",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(ClientId)>",
        "result_key": "defaultClientId"
    },
    "iot_default_version_id": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.get_policy(['policyName'])",
            "method_name": "get_policy",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyVersionId)>",
        "result_key": "defaultVersionId"
    },
    "iot_endpoint_address": {
        "fetch": {
            "all_args": [],
            "docstring": "iot.describe_endpoint([])",
            "method_name": "describe_endpoint",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(EndpointAddress)>",
        "result_key": "endpointAddress"
    },
    "iot_is_default_version": {
        "fetch": {
            "all_args": [
                "policyName",
                "policyVersionId"
            ],
            "docstring": "iot.get_policy_version(['policyName', 'policyVersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "policyName",
                "policyVersionId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<Shape(IsDefaultVersion)>",
        "result_key": "isDefaultVersion"
    },
    "iot_log_level": {
        "fetch": {
            "all_args": [],
            "docstring": "iot.get_logging_options([])",
            "method_name": "get_logging_options",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(LogLevel)>",
        "result_key": "logLevel"
    },
    "iot_outgoing_certificate": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_outgoing_certificates([])",
            "method_name": "list_outgoing_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(OutgoingCertificate)>",
        "parametrize_id_source": [
            "certificateId"
        ],
        "result_key": "outgoingCertificates"
    },
    "iot_outgoing_certificates": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_outgoing_certificates([])",
            "method_name": "list_outgoing_certificates",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(OutgoingCertificates)>",
        "result_key": "outgoingCertificates"
    },
    "iot_policies_from_list_policies": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_policies([])",
            "method_name": "list_policies",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Policies)>",
        "result_key": "policies"
    },
    "iot_policies_from_list_principal_policies": {
        "fetch": {
            "all_args": [
                "principal",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_principal_policies(['principal'])",
            "method_name": "list_principal_policies",
            "required_args": [
                "principal"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Policies)>",
        "result_key": "policies"
    },
    "iot_policy_arn_from_get_policy": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.get_policy(['policyName'])",
            "method_name": "get_policy",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyArn)>",
        "result_key": "policyArn"
    },
    "iot_policy_arn_from_get_policy_version": {
        "fetch": {
            "all_args": [
                "policyName",
                "policyVersionId"
            ],
            "docstring": "iot.get_policy_version(['policyName', 'policyVersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "policyName",
                "policyVersionId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyArn)>",
        "result_key": "policyArn"
    },
    "iot_policy_document_from_get_policy": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.get_policy(['policyName'])",
            "method_name": "get_policy",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyDocument)>",
        "result_key": "policyDocument"
    },
    "iot_policy_document_from_get_policy_version": {
        "fetch": {
            "all_args": [
                "policyName",
                "policyVersionId"
            ],
            "docstring": "iot.get_policy_version(['policyName', 'policyVersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "policyName",
                "policyVersionId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyDocument)>",
        "result_key": "policyDocument"
    },
    "iot_policy_from_list_policies": {
        "fetch": {
            "all_args": [
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_policies([])",
            "method_name": "list_policies",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(Policy)>",
        "parametrize_id_source": [
            "policyArn"
        ],
        "result_key": "policies"
    },
    "iot_policy_from_list_principal_policies": {
        "fetch": {
            "all_args": [
                "principal",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_principal_policies(['principal'])",
            "method_name": "list_principal_policies",
            "required_args": [
                "principal"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(Policy)>",
        "parametrize_id_source": [
            "policyArn"
        ],
        "result_key": "policies"
    },
    "iot_policy_name_from_get_policy": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.get_policy(['policyName'])",
            "method_name": "get_policy",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyName)>",
        "result_key": "policyName"
    },
    "iot_policy_name_from_get_policy_version": {
        "fetch": {
            "all_args": [
                "policyName",
                "policyVersionId"
            ],
            "docstring": "iot.get_policy_version(['policyName', 'policyVersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "policyName",
                "policyVersionId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyName)>",
        "result_key": "policyName"
    },
    "iot_policy_version": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.list_policy_versions(['policyName'])",
            "method_name": "list_policy_versions",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(PolicyVersion)>",
        "parametrize_id_source": [
            "versionId"
        ],
        "result_key": "policyVersions"
    },
    "iot_policy_version_id": {
        "fetch": {
            "all_args": [
                "policyName",
                "policyVersionId"
            ],
            "docstring": "iot.get_policy_version(['policyName', 'policyVersionId'])",
            "method_name": "get_policy_version",
            "required_args": [
                "policyName",
                "policyVersionId"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PolicyVersionId)>",
        "result_key": "policyVersionId"
    },
    "iot_policy_versions": {
        "fetch": {
            "all_args": [
                "policyName"
            ],
            "docstring": "iot.list_policy_versions(['policyName'])",
            "method_name": "list_policy_versions",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(PolicyVersions)>",
        "result_key": "policyVersions"
    },
    "iot_principal_arn_from_list_policy_principals": {
        "fetch": {
            "all_args": [
                "policyName",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_policy_principals(['policyName'])",
            "method_name": "list_policy_principals",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PrincipalArn)>",
        "parametrize_id_source": [
            "PrincipalArn"
        ],
        "result_key": "principals"
    },
    "iot_principal_arn_from_list_thing_principals": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.list_thing_principals(['thingName'])",
            "method_name": "list_thing_principals",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(PrincipalArn)>",
        "parametrize_id_source": [
            "PrincipalArn"
        ],
        "result_key": "principals"
    },
    "iot_principals_from_list_policy_principals": {
        "fetch": {
            "all_args": [
                "policyName",
                "pageSize",
                "ascendingOrder"
            ],
            "docstring": "iot.list_policy_principals(['policyName'])",
            "method_name": "list_policy_principals",
            "required_args": [
                "policyName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Principals)>",
        "result_key": "principals"
    },
    "iot_principals_from_list_thing_principals": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.list_thing_principals(['thingName'])",
            "method_name": "list_thing_principals",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(Principals)>",
        "result_key": "principals"
    },
    "iot_registration_code": {
        "fetch": {
            "all_args": [],
            "docstring": "iot.get_registration_code([])",
            "method_name": "get_registration_code",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(RegistrationCode)>",
        "result_key": "registrationCode"
    },
    "iot_role_arn": {
        "fetch": {
            "all_args": [],
            "docstring": "iot.get_logging_options([])",
            "method_name": "get_logging_options",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(AwsArn)>",
        "result_key": "roleArn"
    },
    "iot_rule": {
        "fetch": {
            "all_args": [
                "ruleName"
            ],
            "docstring": "iot.get_topic_rule(['ruleName'])",
            "method_name": "get_topic_rule",
            "required_args": [
                "ruleName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(TopicRule)>",
        "result_key": "rule"
    },
    "iot_rule_arn": {
        "fetch": {
            "all_args": [
                "ruleName"
            ],
            "docstring": "iot.get_topic_rule(['ruleName'])",
            "method_name": "get_topic_rule",
            "required_args": [
                "ruleName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(RuleArn)>",
        "result_key": "ruleArn"
    },
    "iot_rules": {
        "fetch": {
            "all_args": [
                "topic",
                "ruleDisabled"
            ],
            "docstring": "iot.list_topic_rules([])",
            "method_name": "list_topic_rules",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(TopicRuleList)>",
        "result_key": "rules"
    },
    "iot_thing_attribute": {
        "fetch": {
            "all_args": [
                "attributeName",
                "attributeValue",
                "thingTypeName"
            ],
            "docstring": "iot.list_things([])",
            "method_name": "list_things",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(ThingAttribute)>",
        "parametrize_id_source": [
            "thingTypeName"
        ],
        "result_key": "things"
    },
    "iot_thing_name_from_describe_thing": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.describe_thing(['thingName'])",
            "method_name": "describe_thing",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(ThingName)>",
        "result_key": "thingName"
    },
    "iot_thing_name_from_list_principal_things": {
        "fetch": {
            "all_args": [
                "principal"
            ],
            "docstring": "iot.list_principal_things(['principal'])",
            "method_name": "list_principal_things",
            "required_args": [
                "principal"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(ThingName)>",
        "parametrize_id_source": [
            "ThingName"
        ],
        "result_key": "things"
    },
    "iot_thing_type_definition": {
        "fetch": {
            "all_args": [
                "thingTypeName"
            ],
            "docstring": "iot.list_thing_types([])",
            "method_name": "list_thing_types",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(ThingTypeDefinition)>",
        "parametrize_id_source": [
            "thingTypeName"
        ],
        "result_key": "thingTypes"
    },
    "iot_thing_type_metadata": {
        "fetch": {
            "all_args": [
                "thingTypeName"
            ],
            "docstring": "iot.describe_thing_type(['thingTypeName'])",
            "method_name": "describe_thing_type",
            "required_args": [
                "thingTypeName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(ThingTypeMetadata)>",
        "result_key": "thingTypeMetadata"
    },
    "iot_thing_type_name_from_describe_thing": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.describe_thing(['thingName'])",
            "method_name": "describe_thing",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(ThingTypeName)>",
        "result_key": "thingTypeName"
    },
    "iot_thing_type_name_from_describe_thing_type": {
        "fetch": {
            "all_args": [
                "thingTypeName"
            ],
            "docstring": "iot.describe_thing_type(['thingTypeName'])",
            "method_name": "describe_thing_type",
            "required_args": [
                "thingTypeName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StringShape(ThingTypeName)>",
        "result_key": "thingTypeName"
    },
    "iot_thing_type_properties": {
        "fetch": {
            "all_args": [
                "thingTypeName"
            ],
            "docstring": "iot.describe_thing_type(['thingTypeName'])",
            "method_name": "describe_thing_type",
            "required_args": [
                "thingTypeName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(ThingTypeProperties)>",
        "result_key": "thingTypeProperties"
    },
    "iot_thing_types": {
        "fetch": {
            "all_args": [
                "thingTypeName"
            ],
            "docstring": "iot.list_thing_types([])",
            "method_name": "list_thing_types",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(ThingTypeList)>",
        "result_key": "thingTypes"
    },
    "iot_things_from_list_principal_things": {
        "fetch": {
            "all_args": [
                "principal"
            ],
            "docstring": "iot.list_principal_things(['principal'])",
            "method_name": "list_principal_things",
            "required_args": [
                "principal"
            ],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(ThingNameList)>",
        "result_key": "things"
    },
    "iot_things_from_list_things": {
        "fetch": {
            "all_args": [
                "attributeName",
                "attributeValue",
                "thingTypeName"
            ],
            "docstring": "iot.list_things([])",
            "method_name": "list_things",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<ListShape(ThingAttributeList)>",
        "result_key": "things"
    },
    "iot_topic_rule_list_item": {
        "fetch": {
            "all_args": [
                "topic",
                "ruleDisabled"
            ],
            "docstring": "iot.list_topic_rules([])",
            "method_name": "list_topic_rules",
            "required_args": [],
            "service_name": "iot"
        },
        "output_shape": "<StructureShape(TopicRuleListItem)>",
        "parametrize_id_source": [
            "ruleDisabled"
        ],
        "result_key": "rules"
    },
    "iot_version": {
        "fetch": {
            "all_args": [
                "thingName"
            ],
            "docstring": "iot.describe_thing(['thingName'])",
            "method_name": "describe_thing",
            "required_args": [
                "thingName"
            ],
            "service_name": "iot"
        },
        "output_shape": "<Shape(Version)>",
        "result_key": "version"
    },
    "kinesis_millis_behind_latest": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "kinesis.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<Shape(MillisBehindLatest)>",
        "result_key": "MillisBehindLatest"
    },
    "kinesis_next_shard_iterator": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "kinesis.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<StringShape(ShardIterator)>",
        "result_key": "NextShardIterator"
    },
    "kinesis_open_shard_count": {
        "fetch": {
            "all_args": [],
            "docstring": "kinesis.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "kinesis"
        },
        "output_shape": "<Shape(ShardCountObject)>",
        "result_key": "OpenShardCount"
    },
    "kinesis_record": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "kinesis.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<StructureShape(Record)>",
        "parametrize_id_source": null,
        "result_key": "Records"
    },
    "kinesis_records": {
        "fetch": {
            "all_args": [
                "ShardIterator",
                "Limit"
            ],
            "docstring": "kinesis.get_records(['ShardIterator'])",
            "method_name": "get_records",
            "required_args": [
                "ShardIterator"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<ListShape(RecordList)>",
        "result_key": "Records"
    },
    "kinesis_shard_iterator": {
        "fetch": {
            "all_args": [
                "StreamName",
                "ShardId",
                "ShardIteratorType",
                "StartingSequenceNumber",
                "Timestamp"
            ],
            "docstring": "kinesis.get_shard_iterator(['StreamName', 'ShardId', 'ShardIteratorType'])",
            "method_name": "get_shard_iterator",
            "required_args": [
                "StreamName",
                "ShardId",
                "ShardIteratorType"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<StringShape(ShardIterator)>",
        "result_key": "ShardIterator"
    },
    "kinesis_shard_limit": {
        "fetch": {
            "all_args": [],
            "docstring": "kinesis.describe_limits([])",
            "method_name": "describe_limits",
            "required_args": [],
            "service_name": "kinesis"
        },
        "output_shape": "<Shape(ShardCountObject)>",
        "result_key": "ShardLimit"
    },
    "kinesis_stream_description": {
        "fetch": {
            "all_args": [
                "StreamName",
                "Limit",
                "ExclusiveStartShardId"
            ],
            "docstring": "kinesis.describe_stream(['StreamName'])",
            "method_name": "describe_stream",
            "required_args": [
                "StreamName"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<StructureShape(StreamDescription)>",
        "result_key": "StreamDescription"
    },
    "kinesis_stream_name": {
        "fetch": {
            "all_args": [
                "Limit",
                "ExclusiveStartStreamName"
            ],
            "docstring": "kinesis.list_streams([])",
            "method_name": "list_streams",
            "required_args": [],
            "service_name": "kinesis"
        },
        "output_shape": "<StringShape(StreamName)>",
        "parametrize_id_source": [
            "StreamName"
        ],
        "result_key": "StreamNames"
    },
    "kinesis_stream_names": {
        "fetch": {
            "all_args": [
                "Limit",
                "ExclusiveStartStreamName"
            ],
            "docstring": "kinesis.list_streams([])",
            "method_name": "list_streams",
            "required_args": [],
            "service_name": "kinesis"
        },
        "output_shape": "<ListShape(StreamNameList)>",
        "result_key": "StreamNames"
    },
    "kinesis_tag": {
        "fetch": {
            "all_args": [
                "StreamName",
                "ExclusiveStartTagKey",
                "Limit"
            ],
            "docstring": "kinesis.list_tags_for_stream(['StreamName'])",
            "method_name": "list_tags_for_stream",
            "required_args": [
                "StreamName"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": [
            "Key"
        ],
        "result_key": "Tags"
    },
    "kinesis_tags": {
        "fetch": {
            "all_args": [
                "StreamName",
                "ExclusiveStartTagKey",
                "Limit"
            ],
            "docstring": "kinesis.list_tags_for_stream(['StreamName'])",
            "method_name": "list_tags_for_stream",
            "required_args": [
                "StreamName"
            ],
            "service_name": "kinesis"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "kinesisanalytics_application_detail": {
        "fetch": {
            "all_args": [
                "ApplicationName"
            ],
            "docstring": "kinesisanalytics.describe_application(['ApplicationName'])",
            "method_name": "describe_application",
            "required_args": [
                "ApplicationName"
            ],
            "service_name": "kinesisanalytics"
        },
        "output_shape": "<StructureShape(ApplicationDetail)>",
        "result_key": "ApplicationDetail"
    },
    "kinesisanalytics_application_summaries": {
        "fetch": {
            "all_args": [
                "Limit",
                "ExclusiveStartApplicationName"
            ],
            "docstring": "kinesisanalytics.list_applications([])",
            "method_name": "list_applications",
            "required_args": [],
            "service_name": "kinesisanalytics"
        },
        "output_shape": "<ListShape(ApplicationSummaries)>",
        "result_key": "ApplicationSummaries"
    },
    "kinesisanalytics_application_summary": {
        "fetch": {
            "all_args": [
                "Limit",
                "ExclusiveStartApplicationName"
            ],
            "docstring": "kinesisanalytics.list_applications([])",
            "method_name": "list_applications",
            "required_args": [],
            "service_name": "kinesisanalytics"
        },
        "output_shape": "<StructureShape(ApplicationSummary)>",
        "parametrize_id_source": [
            "ApplicationName"
        ],
        "result_key": "ApplicationSummaries"
    },
    "kms_alias_list_entry": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "kms.list_aliases([])",
            "method_name": "list_aliases",
            "required_args": [],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(AliasListEntry)>",
        "parametrize_id_source": [
            "TargetKeyId"
        ],
        "result_key": "Aliases"
    },
    "kms_aliases": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "kms.list_aliases([])",
            "method_name": "list_aliases",
            "required_args": [],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(AliasList)>",
        "result_key": "Aliases"
    },
    "kms_grant_list_entry_from_list_grants": {
        "fetch": {
            "all_args": [
                "Limit",
                "KeyId"
            ],
            "docstring": "kms.list_grants(['KeyId'])",
            "method_name": "list_grants",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(GrantListEntry)>",
        "parametrize_id_source": [
            "KeyId"
        ],
        "result_key": "Grants"
    },
    "kms_grant_list_entry_from_list_retirable_grants": {
        "fetch": {
            "all_args": [
                "Limit",
                "RetiringPrincipal"
            ],
            "docstring": "kms.list_retirable_grants(['RetiringPrincipal'])",
            "method_name": "list_retirable_grants",
            "required_args": [
                "RetiringPrincipal"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(GrantListEntry)>",
        "parametrize_id_source": [
            "RetiringPrincipal"
        ],
        "result_key": "Grants"
    },
    "kms_grants_from_list_grants": {
        "fetch": {
            "all_args": [
                "Limit",
                "KeyId"
            ],
            "docstring": "kms.list_grants(['KeyId'])",
            "method_name": "list_grants",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(GrantList)>",
        "result_key": "Grants"
    },
    "kms_grants_from_list_retirable_grants": {
        "fetch": {
            "all_args": [
                "Limit",
                "RetiringPrincipal"
            ],
            "docstring": "kms.list_retirable_grants(['RetiringPrincipal'])",
            "method_name": "list_retirable_grants",
            "required_args": [
                "RetiringPrincipal"
            ],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(GrantList)>",
        "result_key": "Grants"
    },
    "kms_import_token": {
        "fetch": {
            "all_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "docstring": "kms.get_parameters_for_import(['KeyId', 'WrappingAlgorithm', 'WrappingKeySpec'])",
            "method_name": "get_parameters_for_import",
            "required_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "service_name": "kms"
        },
        "output_shape": "<Shape(CiphertextType)>",
        "result_key": "ImportToken"
    },
    "kms_key_id": {
        "fetch": {
            "all_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "docstring": "kms.get_parameters_for_import(['KeyId', 'WrappingAlgorithm', 'WrappingKeySpec'])",
            "method_name": "get_parameters_for_import",
            "required_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StringShape(KeyIdType)>",
        "result_key": "KeyId"
    },
    "kms_key_list_entry": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "kms.list_keys([])",
            "method_name": "list_keys",
            "required_args": [],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(KeyListEntry)>",
        "parametrize_id_source": [
            "KeyId"
        ],
        "result_key": "Keys"
    },
    "kms_key_metadata": {
        "fetch": {
            "all_args": [
                "KeyId",
                "GrantTokens"
            ],
            "docstring": "kms.describe_key(['KeyId'])",
            "method_name": "describe_key",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(KeyMetadata)>",
        "result_key": "KeyMetadata"
    },
    "kms_key_rotation_enabled": {
        "fetch": {
            "all_args": [
                "KeyId"
            ],
            "docstring": "kms.get_key_rotation_status(['KeyId'])",
            "method_name": "get_key_rotation_status",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<Shape(BooleanType)>",
        "result_key": "KeyRotationEnabled"
    },
    "kms_keys": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "kms.list_keys([])",
            "method_name": "list_keys",
            "required_args": [],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(KeyList)>",
        "result_key": "Keys"
    },
    "kms_parameters_valid_to": {
        "fetch": {
            "all_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "docstring": "kms.get_parameters_for_import(['KeyId', 'WrappingAlgorithm', 'WrappingKeySpec'])",
            "method_name": "get_parameters_for_import",
            "required_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "service_name": "kms"
        },
        "output_shape": "<Shape(DateType)>",
        "result_key": "ParametersValidTo"
    },
    "kms_policy": {
        "fetch": {
            "all_args": [
                "KeyId",
                "PolicyName"
            ],
            "docstring": "kms.get_key_policy(['KeyId', 'PolicyName'])",
            "method_name": "get_key_policy",
            "required_args": [
                "KeyId",
                "PolicyName"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StringShape(PolicyType)>",
        "result_key": "Policy"
    },
    "kms_policy_name_type": {
        "fetch": {
            "all_args": [
                "KeyId",
                "Limit"
            ],
            "docstring": "kms.list_key_policies(['KeyId'])",
            "method_name": "list_key_policies",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StringShape(PolicyNameType)>",
        "parametrize_id_source": [
            "PolicyNameType"
        ],
        "result_key": "PolicyNames"
    },
    "kms_policy_names": {
        "fetch": {
            "all_args": [
                "KeyId",
                "Limit"
            ],
            "docstring": "kms.list_key_policies(['KeyId'])",
            "method_name": "list_key_policies",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(PolicyNameList)>",
        "result_key": "PolicyNames"
    },
    "kms_public_key": {
        "fetch": {
            "all_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "docstring": "kms.get_parameters_for_import(['KeyId', 'WrappingAlgorithm', 'WrappingKeySpec'])",
            "method_name": "get_parameters_for_import",
            "required_args": [
                "KeyId",
                "WrappingAlgorithm",
                "WrappingKeySpec"
            ],
            "service_name": "kms"
        },
        "output_shape": "<Shape(PlaintextType)>",
        "result_key": "PublicKey"
    },
    "kms_tag": {
        "fetch": {
            "all_args": [
                "KeyId",
                "Limit"
            ],
            "docstring": "kms.list_resource_tags(['KeyId'])",
            "method_name": "list_resource_tags",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "kms_tags": {
        "fetch": {
            "all_args": [
                "KeyId",
                "Limit"
            ],
            "docstring": "kms.list_resource_tags(['KeyId'])",
            "method_name": "list_resource_tags",
            "required_args": [
                "KeyId"
            ],
            "service_name": "kms"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "lambda_account_limit": {
        "fetch": {
            "all_args": [],
            "docstring": "lambda.get_account_settings([])",
            "method_name": "get_account_settings",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(AccountLimit)>",
        "result_key": "AccountLimit"
    },
    "lambda_account_usage": {
        "fetch": {
            "all_args": [],
            "docstring": "lambda.get_account_settings([])",
            "method_name": "get_account_settings",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(AccountUsage)>",
        "result_key": "AccountUsage"
    },
    "lambda_alias_arn": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Name"
            ],
            "docstring": "lambda.get_alias(['FunctionName', 'Name'])",
            "method_name": "get_alias",
            "required_args": [
                "FunctionName",
                "Name"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(FunctionArn)>",
        "result_key": "AliasArn"
    },
    "lambda_alias_configuration": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "FunctionVersion"
            ],
            "docstring": "lambda.list_aliases(['FunctionName'])",
            "method_name": "list_aliases",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(AliasConfiguration)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Aliases"
    },
    "lambda_aliases": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "FunctionVersion"
            ],
            "docstring": "lambda.list_aliases(['FunctionName'])",
            "method_name": "list_aliases",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<ListShape(AliasList)>",
        "result_key": "Aliases"
    },
    "lambda_batch_size": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<Shape(BatchSize)>",
        "result_key": "BatchSize"
    },
    "lambda_code": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function(['FunctionName'])",
            "method_name": "get_function",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(FunctionCodeLocation)>",
        "result_key": "Code"
    },
    "lambda_code_sha_256": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "CodeSha256"
    },
    "lambda_code_size": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<Shape(Long)>",
        "result_key": "CodeSize"
    },
    "lambda_configuration": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function(['FunctionName'])",
            "method_name": "get_function",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(FunctionConfiguration)>",
        "result_key": "Configuration"
    },
    "lambda_dead_letter_config": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(DeadLetterConfig)>",
        "result_key": "DeadLetterConfig"
    },
    "lambda_description_from_get_alias": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Name"
            ],
            "docstring": "lambda.get_alias(['FunctionName', 'Name'])",
            "method_name": "get_alias",
            "required_args": [
                "FunctionName",
                "Name"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "Description"
    },
    "lambda_description_from_get_function_configuration": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "Description"
    },
    "lambda_environment": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(EnvironmentResponse)>",
        "result_key": "Environment"
    },
    "lambda_event_source_arn": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "EventSourceArn"
    },
    "lambda_event_source_mapping_configuration": {
        "fetch": {
            "all_args": [
                "EventSourceArn",
                "FunctionName"
            ],
            "docstring": "lambda.list_event_source_mappings([])",
            "method_name": "list_event_source_mappings",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(EventSourceMappingConfiguration)>",
        "parametrize_id_source": [
            "EventSourceArn"
        ],
        "result_key": "EventSourceMappings"
    },
    "lambda_event_source_mappings": {
        "fetch": {
            "all_args": [
                "EventSourceArn",
                "FunctionName"
            ],
            "docstring": "lambda.list_event_source_mappings([])",
            "method_name": "list_event_source_mappings",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<ListShape(EventSourceMappingsList)>",
        "result_key": "EventSourceMappings"
    },
    "lambda_function_arn_from_get_event_source_mapping": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(FunctionArn)>",
        "result_key": "FunctionArn"
    },
    "lambda_function_arn_from_get_function_configuration": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(NameSpacedFunctionArn)>",
        "result_key": "FunctionArn"
    },
    "lambda_function_configuration_from_list_functions": {
        "fetch": {
            "all_args": [
                "MasterRegion",
                "FunctionVersion"
            ],
            "docstring": "lambda.list_functions([])",
            "method_name": "list_functions",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(FunctionConfiguration)>",
        "parametrize_id_source": [
            "Version"
        ],
        "result_key": "Functions"
    },
    "lambda_function_configuration_from_list_versions_by_function": {
        "fetch": {
            "all_args": [
                "FunctionName"
            ],
            "docstring": "lambda.list_versions_by_function(['FunctionName'])",
            "method_name": "list_versions_by_function",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(FunctionConfiguration)>",
        "parametrize_id_source": [
            "FunctionName"
        ],
        "result_key": "Versions"
    },
    "lambda_function_name": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(NamespacedFunctionName)>",
        "result_key": "FunctionName"
    },
    "lambda_function_version": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Name"
            ],
            "docstring": "lambda.get_alias(['FunctionName', 'Name'])",
            "method_name": "get_alias",
            "required_args": [
                "FunctionName",
                "Name"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "FunctionVersion"
    },
    "lambda_functions": {
        "fetch": {
            "all_args": [
                "MasterRegion",
                "FunctionVersion"
            ],
            "docstring": "lambda.list_functions([])",
            "method_name": "list_functions",
            "required_args": [],
            "service_name": "lambda"
        },
        "output_shape": "<ListShape(FunctionList)>",
        "result_key": "Functions"
    },
    "lambda_handler": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Handler)>",
        "result_key": "Handler"
    },
    "lambda_kms_key_arn": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(KMSKeyArn)>",
        "result_key": "KMSKeyArn"
    },
    "lambda_last_modified_from_get_event_source_mapping": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<Shape(Date)>",
        "result_key": "LastModified"
    },
    "lambda_last_modified_from_get_function_configuration": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Timestamp)>",
        "result_key": "LastModified"
    },
    "lambda_last_processing_result": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LastProcessingResult"
    },
    "lambda_master_arn": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(FunctionArn)>",
        "result_key": "MasterArn"
    },
    "lambda_memory_size": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<Shape(MemorySize)>",
        "result_key": "MemorySize"
    },
    "lambda_name": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Name"
            ],
            "docstring": "lambda.get_alias(['FunctionName', 'Name'])",
            "method_name": "get_alias",
            "required_args": [
                "FunctionName",
                "Name"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Alias)>",
        "result_key": "Name"
    },
    "lambda_policy": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_policy(['FunctionName'])",
            "method_name": "get_policy",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Policy"
    },
    "lambda_role": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(RoleArn)>",
        "result_key": "Role"
    },
    "lambda_runtime": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Runtime)>",
        "result_key": "Runtime"
    },
    "lambda_state": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "State"
    },
    "lambda_state_transition_reason": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "StateTransitionReason"
    },
    "lambda_tags_from_get_function": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function(['FunctionName'])",
            "method_name": "get_function",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<MapShape(Tags)>",
        "result_key": "Tags"
    },
    "lambda_tags_from_list_tags": {
        "fetch": {
            "all_args": [
                "Resource"
            ],
            "docstring": "lambda.list_tags(['Resource'])",
            "method_name": "list_tags",
            "required_args": [
                "Resource"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<MapShape(Tags)>",
        "result_key": "Tags"
    },
    "lambda_timeout": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<Shape(Timeout)>",
        "result_key": "Timeout"
    },
    "lambda_tracing_config": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(TracingConfigResponse)>",
        "result_key": "TracingConfig"
    },
    "lambda_uuid": {
        "fetch": {
            "all_args": [
                "UUID"
            ],
            "docstring": "lambda.get_event_source_mapping(['UUID'])",
            "method_name": "get_event_source_mapping",
            "required_args": [
                "UUID"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "UUID"
    },
    "lambda_version": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "Version"
    },
    "lambda_versions": {
        "fetch": {
            "all_args": [
                "FunctionName"
            ],
            "docstring": "lambda.list_versions_by_function(['FunctionName'])",
            "method_name": "list_versions_by_function",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<ListShape(FunctionList)>",
        "result_key": "Versions"
    },
    "lambda_vpc_config": {
        "fetch": {
            "all_args": [
                "FunctionName",
                "Qualifier"
            ],
            "docstring": "lambda.get_function_configuration(['FunctionName'])",
            "method_name": "get_function_configuration",
            "required_args": [
                "FunctionName"
            ],
            "service_name": "lambda"
        },
        "output_shape": "<StructureShape(VpcConfigResponse)>",
        "result_key": "VpcConfig"
    },
    "lex_models_abort_statement": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Statement)>",
        "result_key": "abortStatement"
    },
    "lex_models_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(AliasName)>",
        "result_key": "botAlias"
    },
    "lex_models_bot_alias_metadata": {
        "fetch": {
            "all_args": [
                "botName",
                "nameContains"
            ],
            "docstring": "lex-models.get_bot_aliases(['botName'])",
            "method_name": "get_bot_aliases",
            "required_args": [
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BotAliasMetadata)>",
        "parametrize_id_source": [
            "botName"
        ],
        "result_key": "BotAliases"
    },
    "lex_models_bot_aliases": {
        "fetch": {
            "all_args": [
                "botName",
                "nameContains"
            ],
            "docstring": "lex-models.get_bot_aliases(['botName'])",
            "method_name": "get_bot_aliases",
            "required_args": [
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BotAliasMetadataList)>",
        "result_key": "BotAliases"
    },
    "lex_models_bot_channel_association": {
        "fetch": {
            "all_args": [
                "botName",
                "botAlias",
                "nameContains"
            ],
            "docstring": "lex-models.get_bot_channel_associations(['botName', 'botAlias'])",
            "method_name": "get_bot_channel_associations",
            "required_args": [
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BotChannelAssociation)>",
        "parametrize_id_source": [
            "botAlias"
        ],
        "result_key": "botChannelAssociations"
    },
    "lex_models_bot_channel_associations": {
        "fetch": {
            "all_args": [
                "botName",
                "botAlias",
                "nameContains"
            ],
            "docstring": "lex-models.get_bot_channel_associations(['botName', 'botAlias'])",
            "method_name": "get_bot_channel_associations",
            "required_args": [
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BotChannelAssociationList)>",
        "result_key": "botChannelAssociations"
    },
    "lex_models_bot_configuration": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<MapShape(ChannelConfigurationMap)>",
        "result_key": "botConfiguration"
    },
    "lex_models_bot_metadata_from_get_bot_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_bot_versions(['name'])",
            "method_name": "get_bot_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BotMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "bots"
    },
    "lex_models_bot_metadata_from_get_bots": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_bots([])",
            "method_name": "get_bots",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BotMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "bots"
    },
    "lex_models_bot_name_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BotName)>",
        "result_key": "botName"
    },
    "lex_models_bot_name_from_get_bot_channel_association": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BotName)>",
        "result_key": "botName"
    },
    "lex_models_bot_name_from_get_utterances_view": {
        "fetch": {
            "all_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "docstring": "lex-models.get_utterances_view(['botName', 'botVersions', 'statusType'])",
            "method_name": "get_utterances_view",
            "required_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BotName)>",
        "result_key": "botName"
    },
    "lex_models_bot_version": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "botVersion"
    },
    "lex_models_bots_from_get_bot_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_bot_versions(['name'])",
            "method_name": "get_bot_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BotMetadataList)>",
        "result_key": "bots"
    },
    "lex_models_bots_from_get_bots": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_bots([])",
            "method_name": "get_bots",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BotMetadataList)>",
        "result_key": "bots"
    },
    "lex_models_builtin_intent_metadata": {
        "fetch": {
            "all_args": [
                "locale",
                "signatureContains"
            ],
            "docstring": "lex-models.get_builtin_intents([])",
            "method_name": "get_builtin_intents",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BuiltinIntentMetadata)>",
        "parametrize_id_source": [
            "signature"
        ],
        "result_key": "intents"
    },
    "lex_models_builtin_intent_slot": {
        "fetch": {
            "all_args": [
                "signature"
            ],
            "docstring": "lex-models.get_builtin_intent(['signature'])",
            "method_name": "get_builtin_intent",
            "required_args": [
                "signature"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BuiltinIntentSlot)>",
        "parametrize_id_source": null,
        "result_key": "slots"
    },
    "lex_models_builtin_slot_type_metadata": {
        "fetch": {
            "all_args": [
                "locale",
                "signatureContains"
            ],
            "docstring": "lex-models.get_builtin_slot_types([])",
            "method_name": "get_builtin_slot_types",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(BuiltinSlotTypeMetadata)>",
        "parametrize_id_source": [
            "signature"
        ],
        "result_key": "slotTypes"
    },
    "lex_models_checksum_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "checksum"
    },
    "lex_models_checksum_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "checksum"
    },
    "lex_models_checksum_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "checksum"
    },
    "lex_models_checksum_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "checksum"
    },
    "lex_models_child_directed": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "childDirected"
    },
    "lex_models_clarification_prompt": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Prompt)>",
        "result_key": "clarificationPrompt"
    },
    "lex_models_conclusion_statement": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Statement)>",
        "result_key": "conclusionStatement"
    },
    "lex_models_confirmation_prompt": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Prompt)>",
        "result_key": "confirmationPrompt"
    },
    "lex_models_created_date_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "lex_models_created_date_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "lex_models_created_date_from_get_bot_channel_association": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "lex_models_created_date_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "lex_models_created_date_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "createdDate"
    },
    "lex_models_description_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "description"
    },
    "lex_models_description_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "description"
    },
    "lex_models_description_from_get_bot_channel_association": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "description"
    },
    "lex_models_description_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "description"
    },
    "lex_models_description_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "description"
    },
    "lex_models_dialog_code_hook": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(CodeHook)>",
        "result_key": "dialogCodeHook"
    },
    "lex_models_enumeration_value": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(EnumerationValue)>",
        "parametrize_id_source": null,
        "result_key": "enumerationValues"
    },
    "lex_models_enumeration_values": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(EnumerationValues)>",
        "result_key": "enumerationValues"
    },
    "lex_models_export_status": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(ExportStatus)>",
        "result_key": "exportStatus"
    },
    "lex_models_export_type": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(ExportType)>",
        "result_key": "exportType"
    },
    "lex_models_failure_reason_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "failureReason"
    },
    "lex_models_failure_reason_from_get_export": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "failureReason"
    },
    "lex_models_follow_up_prompt": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(FollowUpPrompt)>",
        "result_key": "followUpPrompt"
    },
    "lex_models_fulfillment_activity": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(FulfillmentActivity)>",
        "result_key": "fulfillmentActivity"
    },
    "lex_models_idle_session_ttl_in_seconds": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(SessionTTL)>",
        "result_key": "idleSessionTTLInSeconds"
    },
    "lex_models_intent": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Intent)>",
        "parametrize_id_source": null,
        "result_key": "intents"
    },
    "lex_models_intent_metadata_from_get_intent_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_intent_versions(['name'])",
            "method_name": "get_intent_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(IntentMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "intents"
    },
    "lex_models_intent_metadata_from_get_intents": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_intents([])",
            "method_name": "get_intents",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(IntentMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "intents"
    },
    "lex_models_intents_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(IntentList)>",
        "result_key": "intents"
    },
    "lex_models_intents_from_get_builtin_intents": {
        "fetch": {
            "all_args": [
                "locale",
                "signatureContains"
            ],
            "docstring": "lex-models.get_builtin_intents([])",
            "method_name": "get_builtin_intents",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BuiltinIntentMetadataList)>",
        "result_key": "intents"
    },
    "lex_models_intents_from_get_intent_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_intent_versions(['name'])",
            "method_name": "get_intent_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(IntentMetadataList)>",
        "result_key": "intents"
    },
    "lex_models_intents_from_get_intents": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_intents([])",
            "method_name": "get_intents",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(IntentMetadataList)>",
        "result_key": "intents"
    },
    "lex_models_last_updated_date_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "lex_models_last_updated_date_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "lex_models_last_updated_date_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "lex_models_last_updated_date_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastUpdatedDate"
    },
    "lex_models_locale_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Locale)>",
        "result_key": "locale"
    },
    "lex_models_locale_from_get_builtin_intent": {
        "fetch": {
            "all_args": [
                "signature"
            ],
            "docstring": "lex-models.get_builtin_intent(['signature'])",
            "method_name": "get_builtin_intent",
            "required_args": [
                "signature"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Locale)>",
        "parametrize_id_source": [
            "Locale"
        ],
        "result_key": "supportedLocales"
    },
    "lex_models_name_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BotName)>",
        "result_key": "name"
    },
    "lex_models_name_from_get_bot_alias": {
        "fetch": {
            "all_args": [
                "name",
                "botName"
            ],
            "docstring": "lex-models.get_bot_alias(['name', 'botName'])",
            "method_name": "get_bot_alias",
            "required_args": [
                "name",
                "botName"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(AliasName)>",
        "result_key": "name"
    },
    "lex_models_name_from_get_bot_channel_association": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BotChannelName)>",
        "result_key": "name"
    },
    "lex_models_name_from_get_export": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Name)>",
        "result_key": "name"
    },
    "lex_models_name_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(IntentName)>",
        "result_key": "name"
    },
    "lex_models_name_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(SlotTypeName)>",
        "result_key": "name"
    },
    "lex_models_parent_intent_signature": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BuiltinIntentSignature)>",
        "result_key": "parentIntentSignature"
    },
    "lex_models_rejection_statement": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Statement)>",
        "result_key": "rejectionStatement"
    },
    "lex_models_resource_type": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(ResourceType)>",
        "result_key": "resourceType"
    },
    "lex_models_sample_utterances": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(IntentUtteranceList)>",
        "result_key": "sampleUtterances"
    },
    "lex_models_signature": {
        "fetch": {
            "all_args": [
                "signature"
            ],
            "docstring": "lex-models.get_builtin_intent(['signature'])",
            "method_name": "get_builtin_intent",
            "required_args": [
                "signature"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(BuiltinIntentSignature)>",
        "result_key": "signature"
    },
    "lex_models_slot": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(Slot)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "slots"
    },
    "lex_models_slot_type_metadata_from_get_slot_type_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_slot_type_versions(['name'])",
            "method_name": "get_slot_type_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(SlotTypeMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "slotTypes"
    },
    "lex_models_slot_type_metadata_from_get_slot_types": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_slot_types([])",
            "method_name": "get_slot_types",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(SlotTypeMetadata)>",
        "parametrize_id_source": [
            "name"
        ],
        "result_key": "slotTypes"
    },
    "lex_models_slot_types_from_get_builtin_slot_types": {
        "fetch": {
            "all_args": [
                "locale",
                "signatureContains"
            ],
            "docstring": "lex-models.get_builtin_slot_types([])",
            "method_name": "get_builtin_slot_types",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BuiltinSlotTypeMetadataList)>",
        "result_key": "slotTypes"
    },
    "lex_models_slot_types_from_get_slot_type_versions": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "lex-models.get_slot_type_versions(['name'])",
            "method_name": "get_slot_type_versions",
            "required_args": [
                "name"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(SlotTypeMetadataList)>",
        "result_key": "slotTypes"
    },
    "lex_models_slot_types_from_get_slot_types": {
        "fetch": {
            "all_args": [
                "nameContains"
            ],
            "docstring": "lex-models.get_slot_types([])",
            "method_name": "get_slot_types",
            "required_args": [],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(SlotTypeMetadataList)>",
        "result_key": "slotTypes"
    },
    "lex_models_slots_from_get_builtin_intent": {
        "fetch": {
            "all_args": [
                "signature"
            ],
            "docstring": "lex-models.get_builtin_intent(['signature'])",
            "method_name": "get_builtin_intent",
            "required_args": [
                "signature"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(BuiltinIntentSlotList)>",
        "result_key": "slots"
    },
    "lex_models_slots_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(SlotList)>",
        "result_key": "slots"
    },
    "lex_models_status": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Status)>",
        "result_key": "status"
    },
    "lex_models_supported_locales": {
        "fetch": {
            "all_args": [
                "signature"
            ],
            "docstring": "lex-models.get_builtin_intent(['signature'])",
            "method_name": "get_builtin_intent",
            "required_args": [
                "signature"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(LocaleList)>",
        "result_key": "supportedLocales"
    },
    "lex_models_type": {
        "fetch": {
            "all_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "docstring": "lex-models.get_bot_channel_association(['name', 'botName', 'botAlias'])",
            "method_name": "get_bot_channel_association",
            "required_args": [
                "name",
                "botName",
                "botAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(ChannelType)>",
        "result_key": "type"
    },
    "lex_models_url": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "url"
    },
    "lex_models_utterance": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Utterance)>",
        "parametrize_id_source": [
            "Utterance"
        ],
        "result_key": "sampleUtterances"
    },
    "lex_models_utterance_list": {
        "fetch": {
            "all_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "docstring": "lex-models.get_utterances_view(['botName', 'botVersions', 'statusType'])",
            "method_name": "get_utterances_view",
            "required_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StructureShape(UtteranceList)>",
        "parametrize_id_source": [
            "botVersion"
        ],
        "result_key": "utterances"
    },
    "lex_models_utterances": {
        "fetch": {
            "all_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "docstring": "lex-models.get_utterances_view(['botName', 'botVersions', 'statusType'])",
            "method_name": "get_utterances_view",
            "required_args": [
                "botName",
                "botVersions",
                "statusType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<ListShape(ListsOfUtterances)>",
        "result_key": "utterances"
    },
    "lex_models_value_selection_strategy": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(SlotValueSelectionStrategy)>",
        "result_key": "valueSelectionStrategy"
    },
    "lex_models_version_from_get_bot": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "version"
    },
    "lex_models_version_from_get_export": {
        "fetch": {
            "all_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "docstring": "lex-models.get_export(['name', 'version', 'resourceType', 'exportType'])",
            "method_name": "get_export",
            "required_args": [
                "name",
                "version",
                "resourceType",
                "exportType"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(NumericalVersion)>",
        "result_key": "version"
    },
    "lex_models_version_from_get_intent": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_intent(['name', 'version'])",
            "method_name": "get_intent",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "version"
    },
    "lex_models_version_from_get_slot_type": {
        "fetch": {
            "all_args": [
                "name",
                "version"
            ],
            "docstring": "lex-models.get_slot_type(['name', 'version'])",
            "method_name": "get_slot_type",
            "required_args": [
                "name",
                "version"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(Version)>",
        "result_key": "version"
    },
    "lex_models_voice_id": {
        "fetch": {
            "all_args": [
                "name",
                "versionOrAlias"
            ],
            "docstring": "lex-models.get_bot(['name', 'versionOrAlias'])",
            "method_name": "get_bot",
            "required_args": [
                "name",
                "versionOrAlias"
            ],
            "service_name": "lex-models"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "voiceId"
    },
    "lightsail_access_details": {
        "fetch": {
            "all_args": [
                "instanceName",
                "protocol"
            ],
            "docstring": "lightsail.get_instance_access_details(['instanceName'])",
            "method_name": "get_instance_access_details",
            "required_args": [
                "instanceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(InstanceAccessDetails)>",
        "result_key": "accessDetails"
    },
    "lightsail_active_names": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_active_names([])",
            "method_name": "get_active_names",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(StringList)>",
        "result_key": "activeNames"
    },
    "lightsail_blueprint": {
        "fetch": {
            "all_args": [
                "includeInactive",
                "pageToken"
            ],
            "docstring": "lightsail.get_blueprints([])",
            "method_name": "get_blueprints",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Blueprint)>",
        "parametrize_id_source": [
            "blueprintId"
        ],
        "result_key": "blueprints"
    },
    "lightsail_blueprints": {
        "fetch": {
            "all_args": [
                "includeInactive",
                "pageToken"
            ],
            "docstring": "lightsail.get_blueprints([])",
            "method_name": "get_blueprints",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(BlueprintList)>",
        "result_key": "blueprints"
    },
    "lightsail_bundle": {
        "fetch": {
            "all_args": [
                "includeInactive",
                "pageToken"
            ],
            "docstring": "lightsail.get_bundles([])",
            "method_name": "get_bundles",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Bundle)>",
        "parametrize_id_source": [
            "bundleId"
        ],
        "result_key": "bundles"
    },
    "lightsail_bundles": {
        "fetch": {
            "all_args": [
                "includeInactive",
                "pageToken"
            ],
            "docstring": "lightsail.get_bundles([])",
            "method_name": "get_bundles",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(BundleList)>",
        "result_key": "bundles"
    },
    "lightsail_domain_from_get_domain": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "lightsail.get_domain(['domainName'])",
            "method_name": "get_domain",
            "required_args": [
                "domainName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Domain)>",
        "result_key": "domain"
    },
    "lightsail_domain_from_get_domains": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_domains([])",
            "method_name": "get_domains",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Domain)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "domains"
    },
    "lightsail_domains": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_domains([])",
            "method_name": "get_domains",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(DomainList)>",
        "result_key": "domains"
    },
    "lightsail_instance_from_get_instance": {
        "fetch": {
            "all_args": [
                "instanceName"
            ],
            "docstring": "lightsail.get_instance(['instanceName'])",
            "method_name": "get_instance",
            "required_args": [
                "instanceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Instance)>",
        "result_key": "instance"
    },
    "lightsail_instance_from_get_instances": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_instances([])",
            "method_name": "get_instances",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Instance)>",
        "parametrize_id_source": [
            "blueprintId"
        ],
        "result_key": "instances"
    },
    "lightsail_instance_port_state": {
        "fetch": {
            "all_args": [
                "instanceName"
            ],
            "docstring": "lightsail.get_instance_port_states(['instanceName'])",
            "method_name": "get_instance_port_states",
            "required_args": [
                "instanceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(InstancePortState)>",
        "parametrize_id_source": null,
        "result_key": "portStates"
    },
    "lightsail_instance_snapshot_from_get_instance_snapshot": {
        "fetch": {
            "all_args": [
                "instanceSnapshotName"
            ],
            "docstring": "lightsail.get_instance_snapshot(['instanceSnapshotName'])",
            "method_name": "get_instance_snapshot",
            "required_args": [
                "instanceSnapshotName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(InstanceSnapshot)>",
        "result_key": "instanceSnapshot"
    },
    "lightsail_instance_snapshot_from_get_instance_snapshots": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_instance_snapshots([])",
            "method_name": "get_instance_snapshots",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(InstanceSnapshot)>",
        "parametrize_id_source": [
            "fromBlueprintId"
        ],
        "result_key": "instanceSnapshots"
    },
    "lightsail_instance_snapshots": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_instance_snapshots([])",
            "method_name": "get_instance_snapshots",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(InstanceSnapshotList)>",
        "result_key": "instanceSnapshots"
    },
    "lightsail_instances": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_instances([])",
            "method_name": "get_instances",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(InstanceList)>",
        "result_key": "instances"
    },
    "lightsail_key_pair_from_get_key_pair": {
        "fetch": {
            "all_args": [
                "keyPairName"
            ],
            "docstring": "lightsail.get_key_pair(['keyPairName'])",
            "method_name": "get_key_pair",
            "required_args": [
                "keyPairName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(KeyPair)>",
        "result_key": "keyPair"
    },
    "lightsail_key_pair_from_get_key_pairs": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_key_pairs([])",
            "method_name": "get_key_pairs",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(KeyPair)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "keyPairs"
    },
    "lightsail_key_pairs": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_key_pairs([])",
            "method_name": "get_key_pairs",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(KeyPairList)>",
        "result_key": "keyPairs"
    },
    "lightsail_metric_data": {
        "fetch": {
            "all_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "docstring": "lightsail.get_instance_metric_data(['instanceName', 'metricName', 'period', 'startTime', 'endTime', 'unit', 'statistics'])",
            "method_name": "get_instance_metric_data",
            "required_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(MetricDatapointList)>",
        "result_key": "metricData"
    },
    "lightsail_metric_datapoint": {
        "fetch": {
            "all_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "docstring": "lightsail.get_instance_metric_data(['instanceName', 'metricName', 'period', 'startTime', 'endTime', 'unit', 'statistics'])",
            "method_name": "get_instance_metric_data",
            "required_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(MetricDatapoint)>",
        "parametrize_id_source": [
            "unit"
        ],
        "result_key": "metricData"
    },
    "lightsail_metric_name": {
        "fetch": {
            "all_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "docstring": "lightsail.get_instance_metric_data(['instanceName', 'metricName', 'period', 'startTime', 'endTime', 'unit', 'statistics'])",
            "method_name": "get_instance_metric_data",
            "required_args": [
                "instanceName",
                "metricName",
                "period",
                "startTime",
                "endTime",
                "unit",
                "statistics"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StringShape(InstanceMetricName)>",
        "result_key": "metricName"
    },
    "lightsail_next_page_count": {
        "fetch": {
            "all_args": [
                "resourceName",
                "pageToken"
            ],
            "docstring": "lightsail.get_operations_for_resource(['resourceName'])",
            "method_name": "get_operations_for_resource",
            "required_args": [
                "resourceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "nextPageCount"
    },
    "lightsail_operation_from_get_operation": {
        "fetch": {
            "all_args": [
                "operationId"
            ],
            "docstring": "lightsail.get_operation(['operationId'])",
            "method_name": "get_operation",
            "required_args": [
                "operationId"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Operation)>",
        "result_key": "operation"
    },
    "lightsail_operation_from_get_operations": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_operations([])",
            "method_name": "get_operations",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Operation)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "operations"
    },
    "lightsail_operation_from_get_operations_for_resource": {
        "fetch": {
            "all_args": [
                "resourceName",
                "pageToken"
            ],
            "docstring": "lightsail.get_operations_for_resource(['resourceName'])",
            "method_name": "get_operations_for_resource",
            "required_args": [
                "resourceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Operation)>",
        "parametrize_id_source": [
            "resourceName"
        ],
        "result_key": "operations"
    },
    "lightsail_operations_from_get_operations": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_operations([])",
            "method_name": "get_operations",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(OperationList)>",
        "result_key": "operations"
    },
    "lightsail_operations_from_get_operations_for_resource": {
        "fetch": {
            "all_args": [
                "resourceName",
                "pageToken"
            ],
            "docstring": "lightsail.get_operations_for_resource(['resourceName'])",
            "method_name": "get_operations_for_resource",
            "required_args": [
                "resourceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(OperationList)>",
        "result_key": "operations"
    },
    "lightsail_port_states": {
        "fetch": {
            "all_args": [
                "instanceName"
            ],
            "docstring": "lightsail.get_instance_port_states(['instanceName'])",
            "method_name": "get_instance_port_states",
            "required_args": [
                "instanceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(InstancePortStateList)>",
        "result_key": "portStates"
    },
    "lightsail_region": {
        "fetch": {
            "all_args": [
                "includeAvailabilityZones"
            ],
            "docstring": "lightsail.get_regions([])",
            "method_name": "get_regions",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(Region)>",
        "parametrize_id_source": null,
        "result_key": "regions"
    },
    "lightsail_regions": {
        "fetch": {
            "all_args": [
                "includeAvailabilityZones"
            ],
            "docstring": "lightsail.get_regions([])",
            "method_name": "get_regions",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(RegionList)>",
        "result_key": "regions"
    },
    "lightsail_state": {
        "fetch": {
            "all_args": [
                "instanceName"
            ],
            "docstring": "lightsail.get_instance_state(['instanceName'])",
            "method_name": "get_instance_state",
            "required_args": [
                "instanceName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(InstanceState)>",
        "result_key": "state"
    },
    "lightsail_static_ip_from_get_static_ip": {
        "fetch": {
            "all_args": [
                "staticIpName"
            ],
            "docstring": "lightsail.get_static_ip(['staticIpName'])",
            "method_name": "get_static_ip",
            "required_args": [
                "staticIpName"
            ],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(StaticIp)>",
        "result_key": "staticIp"
    },
    "lightsail_static_ip_from_get_static_ips": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_static_ips([])",
            "method_name": "get_static_ips",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StructureShape(StaticIp)>",
        "parametrize_id_source": [
            "arn"
        ],
        "result_key": "staticIps"
    },
    "lightsail_static_ips": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_static_ips([])",
            "method_name": "get_static_ips",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<ListShape(StaticIpList)>",
        "result_key": "staticIps"
    },
    "lightsail_string": {
        "fetch": {
            "all_args": [
                "pageToken"
            ],
            "docstring": "lightsail.get_active_names([])",
            "method_name": "get_active_names",
            "required_args": [],
            "service_name": "lightsail"
        },
        "output_shape": "<StringShape(string)>",
        "parametrize_id_source": [
            "string"
        ],
        "result_key": "activeNames"
    },
    "logs_destination": {
        "fetch": {
            "all_args": [
                "DestinationNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_destinations([])",
            "method_name": "describe_destinations",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(Destination)>",
        "parametrize_id_source": [
            "targetArn"
        ],
        "result_key": "destinations"
    },
    "logs_destinations": {
        "fetch": {
            "all_args": [
                "DestinationNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_destinations([])",
            "method_name": "describe_destinations",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(Destinations)>",
        "result_key": "destinations"
    },
    "logs_events": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamName",
                "startTime",
                "endTime",
                "limit",
                "startFromHead"
            ],
            "docstring": "logs.get_log_events(['logGroupName', 'logStreamName'])",
            "method_name": "get_log_events",
            "required_args": [
                "logGroupName",
                "logStreamName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(OutputLogEvents)>",
        "result_key": "events"
    },
    "logs_export_task": {
        "fetch": {
            "all_args": [
                "taskId",
                "statusCode",
                "limit"
            ],
            "docstring": "logs.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(ExportTask)>",
        "parametrize_id_source": [
            "taskId"
        ],
        "result_key": "exportTasks"
    },
    "logs_export_tasks": {
        "fetch": {
            "all_args": [
                "taskId",
                "statusCode",
                "limit"
            ],
            "docstring": "logs.describe_export_tasks([])",
            "method_name": "describe_export_tasks",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(ExportTasks)>",
        "result_key": "exportTasks"
    },
    "logs_log_group": {
        "fetch": {
            "all_args": [
                "logGroupNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_log_groups([])",
            "method_name": "describe_log_groups",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(LogGroup)>",
        "parametrize_id_source": [
            "logGroupName"
        ],
        "result_key": "logGroups"
    },
    "logs_log_groups": {
        "fetch": {
            "all_args": [
                "logGroupNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_log_groups([])",
            "method_name": "describe_log_groups",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(LogGroups)>",
        "result_key": "logGroups"
    },
    "logs_log_stream": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamNamePrefix",
                "orderBy",
                "descending",
                "limit"
            ],
            "docstring": "logs.describe_log_streams(['logGroupName'])",
            "method_name": "describe_log_streams",
            "required_args": [
                "logGroupName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(LogStream)>",
        "parametrize_id_source": [
            "logStreamName"
        ],
        "result_key": "logStreams"
    },
    "logs_log_streams": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamNamePrefix",
                "orderBy",
                "descending",
                "limit"
            ],
            "docstring": "logs.describe_log_streams(['logGroupName'])",
            "method_name": "describe_log_streams",
            "required_args": [
                "logGroupName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(LogStreams)>",
        "result_key": "logStreams"
    },
    "logs_metric_filter": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "filterNamePrefix",
                "limit",
                "metricName",
                "metricNamespace"
            ],
            "docstring": "logs.describe_metric_filters([])",
            "method_name": "describe_metric_filters",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(MetricFilter)>",
        "parametrize_id_source": [
            "filterName"
        ],
        "result_key": "metricFilters"
    },
    "logs_metric_filters": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "filterNamePrefix",
                "limit",
                "metricName",
                "metricNamespace"
            ],
            "docstring": "logs.describe_metric_filters([])",
            "method_name": "describe_metric_filters",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(MetricFilters)>",
        "result_key": "metricFilters"
    },
    "logs_next_backward_token": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamName",
                "startTime",
                "endTime",
                "limit",
                "startFromHead"
            ],
            "docstring": "logs.get_log_events(['logGroupName', 'logStreamName'])",
            "method_name": "get_log_events",
            "required_args": [
                "logGroupName",
                "logStreamName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<StringShape(NextToken)>",
        "result_key": "nextBackwardToken"
    },
    "logs_next_forward_token": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamName",
                "startTime",
                "endTime",
                "limit",
                "startFromHead"
            ],
            "docstring": "logs.get_log_events(['logGroupName', 'logStreamName'])",
            "method_name": "get_log_events",
            "required_args": [
                "logGroupName",
                "logStreamName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<StringShape(NextToken)>",
        "result_key": "nextForwardToken"
    },
    "logs_output_log_event": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "logStreamName",
                "startTime",
                "endTime",
                "limit",
                "startFromHead"
            ],
            "docstring": "logs.get_log_events(['logGroupName', 'logStreamName'])",
            "method_name": "get_log_events",
            "required_args": [
                "logGroupName",
                "logStreamName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(OutputLogEvent)>",
        "parametrize_id_source": null,
        "result_key": "events"
    },
    "logs_resource_policies": {
        "fetch": {
            "all_args": [
                "limit"
            ],
            "docstring": "logs.describe_resource_policies([])",
            "method_name": "describe_resource_policies",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(ResourcePolicies)>",
        "result_key": "resourcePolicies"
    },
    "logs_resource_policy": {
        "fetch": {
            "all_args": [
                "limit"
            ],
            "docstring": "logs.describe_resource_policies([])",
            "method_name": "describe_resource_policies",
            "required_args": [],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(ResourcePolicy)>",
        "parametrize_id_source": null,
        "result_key": "resourcePolicies"
    },
    "logs_subscription_filter": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "filterNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_subscription_filters(['logGroupName'])",
            "method_name": "describe_subscription_filters",
            "required_args": [
                "logGroupName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<StructureShape(SubscriptionFilter)>",
        "parametrize_id_source": [
            "logGroupName"
        ],
        "result_key": "subscriptionFilters"
    },
    "logs_subscription_filters": {
        "fetch": {
            "all_args": [
                "logGroupName",
                "filterNamePrefix",
                "limit"
            ],
            "docstring": "logs.describe_subscription_filters(['logGroupName'])",
            "method_name": "describe_subscription_filters",
            "required_args": [
                "logGroupName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<ListShape(SubscriptionFilters)>",
        "result_key": "subscriptionFilters"
    },
    "logs_tags": {
        "fetch": {
            "all_args": [
                "logGroupName"
            ],
            "docstring": "logs.list_tags_log_group(['logGroupName'])",
            "method_name": "list_tags_log_group",
            "required_args": [
                "logGroupName"
            ],
            "service_name": "logs"
        },
        "output_shape": "<MapShape(Tags)>",
        "result_key": "tags"
    },
    "machinelearning_batch_prediction": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_batch_predictions([])",
            "method_name": "describe_batch_predictions",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(BatchPrediction)>",
        "parametrize_id_source": [
            "BatchPredictionId"
        ],
        "result_key": "Results"
    },
    "machinelearning_batch_prediction_data_source_id": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "BatchPredictionDataSourceId"
    },
    "machinelearning_batch_prediction_id": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "BatchPredictionId"
    },
    "machinelearning_compute_statistics": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(ComputeStatistics)>",
        "result_key": "ComputeStatistics"
    },
    "machinelearning_compute_time_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "ComputeTime"
    },
    "machinelearning_compute_time_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "ComputeTime"
    },
    "machinelearning_compute_time_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "ComputeTime"
    },
    "machinelearning_compute_time_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "ComputeTime"
    },
    "machinelearning_created_at_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "CreatedAt"
    },
    "machinelearning_created_at_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "CreatedAt"
    },
    "machinelearning_created_at_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "CreatedAt"
    },
    "machinelearning_created_at_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "CreatedAt"
    },
    "machinelearning_created_by_iam_user_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(AwsUserArn)>",
        "result_key": "CreatedByIamUser"
    },
    "machinelearning_created_by_iam_user_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(AwsUserArn)>",
        "result_key": "CreatedByIamUser"
    },
    "machinelearning_created_by_iam_user_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(AwsUserArn)>",
        "result_key": "CreatedByIamUser"
    },
    "machinelearning_created_by_iam_user_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(AwsUserArn)>",
        "result_key": "CreatedByIamUser"
    },
    "machinelearning_data_location_s3": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(S3Url)>",
        "result_key": "DataLocationS3"
    },
    "machinelearning_data_rearrangement": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(DataRearrangement)>",
        "result_key": "DataRearrangement"
    },
    "machinelearning_data_size_in_bytes": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "DataSizeInBytes"
    },
    "machinelearning_data_source": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_data_sources([])",
            "method_name": "describe_data_sources",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(DataSource)>",
        "parametrize_id_source": [
            "DataSourceId"
        ],
        "result_key": "Results"
    },
    "machinelearning_data_source_id": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "DataSourceId"
    },
    "machinelearning_data_source_schema": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(DataSchema)>",
        "result_key": "DataSourceSchema"
    },
    "machinelearning_endpoint_info": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(RealtimeEndpointInfo)>",
        "result_key": "EndpointInfo"
    },
    "machinelearning_evaluation": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_evaluations([])",
            "method_name": "describe_evaluations",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(Evaluation)>",
        "parametrize_id_source": [
            "EvaluationId"
        ],
        "result_key": "Results"
    },
    "machinelearning_evaluation_data_source_id": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "EvaluationDataSourceId"
    },
    "machinelearning_evaluation_id": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "EvaluationId"
    },
    "machinelearning_finished_at_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "FinishedAt"
    },
    "machinelearning_finished_at_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "FinishedAt"
    },
    "machinelearning_finished_at_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "FinishedAt"
    },
    "machinelearning_finished_at_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "FinishedAt"
    },
    "machinelearning_input_data_location_s3_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(S3Url)>",
        "result_key": "InputDataLocationS3"
    },
    "machinelearning_input_data_location_s3_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(S3Url)>",
        "result_key": "InputDataLocationS3"
    },
    "machinelearning_input_data_location_s3_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(S3Url)>",
        "result_key": "InputDataLocationS3"
    },
    "machinelearning_invalid_record_count": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "InvalidRecordCount"
    },
    "machinelearning_last_updated_at_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "LastUpdatedAt"
    },
    "machinelearning_last_updated_at_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "LastUpdatedAt"
    },
    "machinelearning_last_updated_at_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "LastUpdatedAt"
    },
    "machinelearning_last_updated_at_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "LastUpdatedAt"
    },
    "machinelearning_log_uri_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(PresignedS3Url)>",
        "result_key": "LogUri"
    },
    "machinelearning_log_uri_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(PresignedS3Url)>",
        "result_key": "LogUri"
    },
    "machinelearning_log_uri_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(PresignedS3Url)>",
        "result_key": "LogUri"
    },
    "machinelearning_log_uri_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(PresignedS3Url)>",
        "result_key": "LogUri"
    },
    "machinelearning_message_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(Message)>",
        "result_key": "Message"
    },
    "machinelearning_message_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(Message)>",
        "result_key": "Message"
    },
    "machinelearning_message_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(Message)>",
        "result_key": "Message"
    },
    "machinelearning_message_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(Message)>",
        "result_key": "Message"
    },
    "machinelearning_ml_model": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_ml_models([])",
            "method_name": "describe_ml_models",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(MLModel)>",
        "parametrize_id_source": [
            "MLModelId"
        ],
        "result_key": "Results"
    },
    "machinelearning_ml_model_id_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "MLModelId"
    },
    "machinelearning_ml_model_id_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "MLModelId"
    },
    "machinelearning_ml_model_id_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "MLModelId"
    },
    "machinelearning_ml_model_type": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(MLModelType)>",
        "result_key": "MLModelType"
    },
    "machinelearning_name_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityName)>",
        "result_key": "Name"
    },
    "machinelearning_name_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityName)>",
        "result_key": "Name"
    },
    "machinelearning_name_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityName)>",
        "result_key": "Name"
    },
    "machinelearning_name_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(MLModelName)>",
        "result_key": "Name"
    },
    "machinelearning_number_of_files": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "NumberOfFiles"
    },
    "machinelearning_output_uri": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(S3Url)>",
        "result_key": "OutputUri"
    },
    "machinelearning_performance_metrics": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(PerformanceMetrics)>",
        "result_key": "PerformanceMetrics"
    },
    "machinelearning_rds_metadata": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(RDSMetadata)>",
        "result_key": "RDSMetadata"
    },
    "machinelearning_recipe": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(Recipe)>",
        "result_key": "Recipe"
    },
    "machinelearning_redshift_metadata": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(RedshiftMetadata)>",
        "result_key": "RedshiftMetadata"
    },
    "machinelearning_resource_id": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "ResourceType"
            ],
            "docstring": "machinelearning.describe_tags(['ResourceId', 'ResourceType'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId",
                "ResourceType"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "ResourceId"
    },
    "machinelearning_resource_type": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "ResourceType"
            ],
            "docstring": "machinelearning.describe_tags(['ResourceId', 'ResourceType'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId",
                "ResourceType"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(TaggableResourceType)>",
        "result_key": "ResourceType"
    },
    "machinelearning_results_from_describe_batch_predictions": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_batch_predictions([])",
            "method_name": "describe_batch_predictions",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<ListShape(BatchPredictions)>",
        "result_key": "Results"
    },
    "machinelearning_results_from_describe_data_sources": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_data_sources([])",
            "method_name": "describe_data_sources",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<ListShape(DataSources)>",
        "result_key": "Results"
    },
    "machinelearning_results_from_describe_evaluations": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_evaluations([])",
            "method_name": "describe_evaluations",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<ListShape(Evaluations)>",
        "result_key": "Results"
    },
    "machinelearning_results_from_describe_ml_models": {
        "fetch": {
            "all_args": [
                "FilterVariable",
                "EQ",
                "GT",
                "LT",
                "GE",
                "LE",
                "NE",
                "Prefix",
                "SortOrder",
                "Limit"
            ],
            "docstring": "machinelearning.describe_ml_models([])",
            "method_name": "describe_ml_models",
            "required_args": [],
            "service_name": "machinelearning"
        },
        "output_shape": "<ListShape(MLModels)>",
        "result_key": "Results"
    },
    "machinelearning_role_arn": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(RoleARN)>",
        "result_key": "RoleARN"
    },
    "machinelearning_schema": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(DataSchema)>",
        "result_key": "Schema"
    },
    "machinelearning_score_threshold": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(ScoreThreshold)>",
        "result_key": "ScoreThreshold"
    },
    "machinelearning_score_threshold_last_updated_at": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "ScoreThresholdLastUpdatedAt"
    },
    "machinelearning_size_in_bytes": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "SizeInBytes"
    },
    "machinelearning_started_at_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "StartedAt"
    },
    "machinelearning_started_at_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "StartedAt"
    },
    "machinelearning_started_at_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "StartedAt"
    },
    "machinelearning_started_at_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(EpochTime)>",
        "result_key": "StartedAt"
    },
    "machinelearning_status_from_get_batch_prediction": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityStatus)>",
        "result_key": "Status"
    },
    "machinelearning_status_from_get_data_source": {
        "fetch": {
            "all_args": [
                "DataSourceId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_data_source(['DataSourceId'])",
            "method_name": "get_data_source",
            "required_args": [
                "DataSourceId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityStatus)>",
        "result_key": "Status"
    },
    "machinelearning_status_from_get_evaluation": {
        "fetch": {
            "all_args": [
                "EvaluationId"
            ],
            "docstring": "machinelearning.get_evaluation(['EvaluationId'])",
            "method_name": "get_evaluation",
            "required_args": [
                "EvaluationId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityStatus)>",
        "result_key": "Status"
    },
    "machinelearning_status_from_get_ml_model": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityStatus)>",
        "result_key": "Status"
    },
    "machinelearning_tag": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "ResourceType"
            ],
            "docstring": "machinelearning.describe_tags(['ResourceId', 'ResourceType'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId",
                "ResourceType"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "machinelearning_tags": {
        "fetch": {
            "all_args": [
                "ResourceId",
                "ResourceType"
            ],
            "docstring": "machinelearning.describe_tags(['ResourceId', 'ResourceType'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId",
                "ResourceType"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "Tags"
    },
    "machinelearning_total_record_count": {
        "fetch": {
            "all_args": [
                "BatchPredictionId"
            ],
            "docstring": "machinelearning.get_batch_prediction(['BatchPredictionId'])",
            "method_name": "get_batch_prediction",
            "required_args": [
                "BatchPredictionId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<Shape(LongType)>",
        "result_key": "TotalRecordCount"
    },
    "machinelearning_training_data_source_id": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "TrainingDataSourceId"
    },
    "machinelearning_training_parameters": {
        "fetch": {
            "all_args": [
                "MLModelId",
                "Verbose"
            ],
            "docstring": "machinelearning.get_ml_model(['MLModelId'])",
            "method_name": "get_ml_model",
            "required_args": [
                "MLModelId"
            ],
            "service_name": "machinelearning"
        },
        "output_shape": "<MapShape(TrainingParameters)>",
        "result_key": "TrainingParameters"
    },
    "marketplace_entitlement_entitlement": {
        "fetch": {
            "all_args": [
                "ProductCode",
                "Filter"
            ],
            "docstring": "marketplace-entitlement.get_entitlements(['ProductCode'])",
            "method_name": "get_entitlements",
            "required_args": [
                "ProductCode"
            ],
            "service_name": "marketplace-entitlement"
        },
        "output_shape": "<StructureShape(Entitlement)>",
        "parametrize_id_source": [
            "ProductCode"
        ],
        "result_key": "Entitlements"
    },
    "marketplace_entitlement_entitlements": {
        "fetch": {
            "all_args": [
                "ProductCode",
                "Filter"
            ],
            "docstring": "marketplace-entitlement.get_entitlements(['ProductCode'])",
            "method_name": "get_entitlements",
            "required_args": [
                "ProductCode"
            ],
            "service_name": "marketplace-entitlement"
        },
        "output_shape": "<ListShape(EntitlementList)>",
        "result_key": "Entitlements"
    },
    "mgh_application_status": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "mgh.describe_application_state(['ApplicationId'])",
            "method_name": "describe_application_state",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<StringShape(ApplicationStatus)>",
        "result_key": "ApplicationStatus"
    },
    "mgh_created_artifact": {
        "fetch": {
            "all_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "docstring": "mgh.list_created_artifacts(['ProgressUpdateStream', 'MigrationTaskName'])",
            "method_name": "list_created_artifacts",
            "required_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<StructureShape(CreatedArtifact)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "CreatedArtifactList"
    },
    "mgh_created_artifact_list": {
        "fetch": {
            "all_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "docstring": "mgh.list_created_artifacts(['ProgressUpdateStream', 'MigrationTaskName'])",
            "method_name": "list_created_artifacts",
            "required_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<ListShape(CreatedArtifactList)>",
        "result_key": "CreatedArtifactList"
    },
    "mgh_discovered_resource": {
        "fetch": {
            "all_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "docstring": "mgh.list_discovered_resources(['ProgressUpdateStream', 'MigrationTaskName'])",
            "method_name": "list_discovered_resources",
            "required_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<StructureShape(DiscoveredResource)>",
        "parametrize_id_source": [
            "ConfigurationId"
        ],
        "result_key": "DiscoveredResourceList"
    },
    "mgh_discovered_resource_list": {
        "fetch": {
            "all_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "docstring": "mgh.list_discovered_resources(['ProgressUpdateStream', 'MigrationTaskName'])",
            "method_name": "list_discovered_resources",
            "required_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<ListShape(DiscoveredResourceList)>",
        "result_key": "DiscoveredResourceList"
    },
    "mgh_last_updated_time": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "mgh.describe_application_state(['ApplicationId'])",
            "method_name": "describe_application_state",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<Shape(UpdateDateTime)>",
        "result_key": "LastUpdatedTime"
    },
    "mgh_migration_task": {
        "fetch": {
            "all_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "docstring": "mgh.describe_migration_task(['ProgressUpdateStream', 'MigrationTaskName'])",
            "method_name": "describe_migration_task",
            "required_args": [
                "ProgressUpdateStream",
                "MigrationTaskName"
            ],
            "service_name": "mgh"
        },
        "output_shape": "<StructureShape(MigrationTask)>",
        "result_key": "MigrationTask"
    },
    "mgh_migration_task_summary": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "mgh.list_migration_tasks([])",
            "method_name": "list_migration_tasks",
            "required_args": [],
            "service_name": "mgh"
        },
        "output_shape": "<StructureShape(MigrationTaskSummary)>",
        "parametrize_id_source": null,
        "result_key": "MigrationTaskSummaryList"
    },
    "mgh_migration_task_summary_list": {
        "fetch": {
            "all_args": [
                "ResourceName"
            ],
            "docstring": "mgh.list_migration_tasks([])",
            "method_name": "list_migration_tasks",
            "required_args": [],
            "service_name": "mgh"
        },
        "output_shape": "<ListShape(MigrationTaskSummaryList)>",
        "result_key": "MigrationTaskSummaryList"
    },
    "mgh_progress_update_stream_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "mgh.list_progress_update_streams([])",
            "method_name": "list_progress_update_streams",
            "required_args": [],
            "service_name": "mgh"
        },
        "output_shape": "<StructureShape(ProgressUpdateStreamSummary)>",
        "parametrize_id_source": null,
        "result_key": "ProgressUpdateStreamSummaryList"
    },
    "mgh_progress_update_stream_summary_list": {
        "fetch": {
            "all_args": [],
            "docstring": "mgh.list_progress_update_streams([])",
            "method_name": "list_progress_update_streams",
            "required_args": [],
            "service_name": "mgh"
        },
        "output_shape": "<ListShape(ProgressUpdateStreamSummaryList)>",
        "result_key": "ProgressUpdateStreamSummaryList"
    },
    "mobile_bundle_details": {
        "fetch": {
            "all_args": [],
            "docstring": "mobile.list_bundles([])",
            "method_name": "list_bundles",
            "required_args": [],
            "service_name": "mobile"
        },
        "output_shape": "<StructureShape(BundleDetails)>",
        "parametrize_id_source": [
            "bundleId"
        ],
        "result_key": "bundleList"
    },
    "mobile_bundle_list": {
        "fetch": {
            "all_args": [],
            "docstring": "mobile.list_bundles([])",
            "method_name": "list_bundles",
            "required_args": [],
            "service_name": "mobile"
        },
        "output_shape": "<ListShape(BundleList)>",
        "result_key": "bundleList"
    },
    "mobile_details_from_describe_bundle": {
        "fetch": {
            "all_args": [
                "bundleId"
            ],
            "docstring": "mobile.describe_bundle(['bundleId'])",
            "method_name": "describe_bundle",
            "required_args": [
                "bundleId"
            ],
            "service_name": "mobile"
        },
        "output_shape": "<StructureShape(BundleDetails)>",
        "result_key": "details"
    },
    "mobile_details_from_describe_project": {
        "fetch": {
            "all_args": [
                "projectId",
                "syncFromResources"
            ],
            "docstring": "mobile.describe_project(['projectId'])",
            "method_name": "describe_project",
            "required_args": [
                "projectId"
            ],
            "service_name": "mobile"
        },
        "output_shape": "<StructureShape(ProjectDetails)>",
        "result_key": "details"
    },
    "mobile_project_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "mobile.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "mobile"
        },
        "output_shape": "<StructureShape(ProjectSummary)>",
        "parametrize_id_source": [
            "projectId"
        ],
        "result_key": "projects"
    },
    "mobile_projects": {
        "fetch": {
            "all_args": [],
            "docstring": "mobile.list_projects([])",
            "method_name": "list_projects",
            "required_args": [],
            "service_name": "mobile"
        },
        "output_shape": "<ListShape(ProjectSummaries)>",
        "result_key": "projects"
    },
    "mturk__hits_from_list_hits": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.list_hits([])",
            "method_name": "list_hits",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(HITList)>",
        "result_key": "HITs"
    },
    "mturk__hits_from_list_hits_for_qualification_type": {
        "fetch": {
            "all_args": [
                "QualificationTypeId"
            ],
            "docstring": "mturk.list_hits_for_qualification_type(['QualificationTypeId'])",
            "method_name": "list_hits_for_qualification_type",
            "required_args": [
                "QualificationTypeId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(HITList)>",
        "result_key": "HITs"
    },
    "mturk__hits_from_list_reviewable_hits": {
        "fetch": {
            "all_args": [
                "HITTypeId",
                "Status"
            ],
            "docstring": "mturk.list_reviewable_hits([])",
            "method_name": "list_reviewable_hits",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(HITList)>",
        "result_key": "HITs"
    },
    "mturk_assignment_from_get_assignment": {
        "fetch": {
            "all_args": [
                "AssignmentId"
            ],
            "docstring": "mturk.get_assignment(['AssignmentId'])",
            "method_name": "get_assignment",
            "required_args": [
                "AssignmentId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(Assignment)>",
        "result_key": "Assignment"
    },
    "mturk_assignment_from_list_assignments_for_hit": {
        "fetch": {
            "all_args": [
                "HITId",
                "AssignmentStatuses"
            ],
            "docstring": "mturk.list_assignments_for_hit(['HITId'])",
            "method_name": "list_assignments_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(Assignment)>",
        "parametrize_id_source": [
            "HITId"
        ],
        "result_key": "Assignments"
    },
    "mturk_assignment_review_policy": {
        "fetch": {
            "all_args": [
                "HITId",
                "PolicyLevels",
                "RetrieveActions",
                "RetrieveResults"
            ],
            "docstring": "mturk.list_review_policy_results_for_hit(['HITId'])",
            "method_name": "list_review_policy_results_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(ReviewPolicy)>",
        "result_key": "AssignmentReviewPolicy"
    },
    "mturk_assignment_review_report": {
        "fetch": {
            "all_args": [
                "HITId",
                "PolicyLevels",
                "RetrieveActions",
                "RetrieveResults"
            ],
            "docstring": "mturk.list_review_policy_results_for_hit(['HITId'])",
            "method_name": "list_review_policy_results_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(ReviewReport)>",
        "result_key": "AssignmentReviewReport"
    },
    "mturk_assignments": {
        "fetch": {
            "all_args": [
                "HITId",
                "AssignmentStatuses"
            ],
            "docstring": "mturk.list_assignments_for_hit(['HITId'])",
            "method_name": "list_assignments_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(AssignmentList)>",
        "result_key": "Assignments"
    },
    "mturk_available_balance": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.get_account_balance([])",
            "method_name": "get_account_balance",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StringShape(CurrencyAmount)>",
        "result_key": "AvailableBalance"
    },
    "mturk_bonus_payment": {
        "fetch": {
            "all_args": [
                "HITId",
                "AssignmentId"
            ],
            "docstring": "mturk.list_bonus_payments([])",
            "method_name": "list_bonus_payments",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(BonusPayment)>",
        "parametrize_id_source": [
            "AssignmentId"
        ],
        "result_key": "BonusPayments"
    },
    "mturk_bonus_payments": {
        "fetch": {
            "all_args": [
                "HITId",
                "AssignmentId"
            ],
            "docstring": "mturk.list_bonus_payments([])",
            "method_name": "list_bonus_payments",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(BonusPaymentList)>",
        "result_key": "BonusPayments"
    },
    "mturk_file_upload_url": {
        "fetch": {
            "all_args": [
                "AssignmentId",
                "QuestionIdentifier"
            ],
            "docstring": "mturk.get_file_upload_url(['AssignmentId', 'QuestionIdentifier'])",
            "method_name": "get_file_upload_url",
            "required_args": [
                "AssignmentId",
                "QuestionIdentifier"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "FileUploadURL"
    },
    "mturk_hit_from_get_assignment": {
        "fetch": {
            "all_args": [
                "AssignmentId"
            ],
            "docstring": "mturk.get_assignment(['AssignmentId'])",
            "method_name": "get_assignment",
            "required_args": [
                "AssignmentId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(HIT)>",
        "result_key": "HIT"
    },
    "mturk_hit_from_get_hit": {
        "fetch": {
            "all_args": [
                "HITId"
            ],
            "docstring": "mturk.get_hit(['HITId'])",
            "method_name": "get_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(HIT)>",
        "result_key": "HIT"
    },
    "mturk_hit_from_list_hits": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.list_hits([])",
            "method_name": "list_hits",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(HIT)>",
        "parametrize_id_source": [
            "HITId"
        ],
        "result_key": "HITs"
    },
    "mturk_hit_from_list_hits_for_qualification_type": {
        "fetch": {
            "all_args": [
                "QualificationTypeId"
            ],
            "docstring": "mturk.list_hits_for_qualification_type(['QualificationTypeId'])",
            "method_name": "list_hits_for_qualification_type",
            "required_args": [
                "QualificationTypeId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(HIT)>",
        "parametrize_id_source": [
            "HITId"
        ],
        "result_key": "HITs"
    },
    "mturk_hit_from_list_reviewable_hits": {
        "fetch": {
            "all_args": [
                "HITTypeId",
                "Status"
            ],
            "docstring": "mturk.list_reviewable_hits([])",
            "method_name": "list_reviewable_hits",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(HIT)>",
        "parametrize_id_source": [
            "HITTypeId"
        ],
        "result_key": "HITs"
    },
    "mturk_hit_id": {
        "fetch": {
            "all_args": [
                "HITId",
                "PolicyLevels",
                "RetrieveActions",
                "RetrieveResults"
            ],
            "docstring": "mturk.list_review_policy_results_for_hit(['HITId'])",
            "method_name": "list_review_policy_results_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StringShape(EntityId)>",
        "result_key": "HITId"
    },
    "mturk_hit_review_policy": {
        "fetch": {
            "all_args": [
                "HITId",
                "PolicyLevels",
                "RetrieveActions",
                "RetrieveResults"
            ],
            "docstring": "mturk.list_review_policy_results_for_hit(['HITId'])",
            "method_name": "list_review_policy_results_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(ReviewPolicy)>",
        "result_key": "HITReviewPolicy"
    },
    "mturk_hit_review_report": {
        "fetch": {
            "all_args": [
                "HITId",
                "PolicyLevels",
                "RetrieveActions",
                "RetrieveResults"
            ],
            "docstring": "mturk.list_review_policy_results_for_hit(['HITId'])",
            "method_name": "list_review_policy_results_for_hit",
            "required_args": [
                "HITId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(ReviewReport)>",
        "result_key": "HITReviewReport"
    },
    "mturk_on_hold_balance": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.get_account_balance([])",
            "method_name": "get_account_balance",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StringShape(CurrencyAmount)>",
        "result_key": "OnHoldBalance"
    },
    "mturk_qualification_from_get_qualification_score": {
        "fetch": {
            "all_args": [
                "QualificationTypeId",
                "WorkerId"
            ],
            "docstring": "mturk.get_qualification_score(['QualificationTypeId', 'WorkerId'])",
            "method_name": "get_qualification_score",
            "required_args": [
                "QualificationTypeId",
                "WorkerId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(Qualification)>",
        "result_key": "Qualification"
    },
    "mturk_qualification_from_list_workers_with_qualification_type": {
        "fetch": {
            "all_args": [
                "QualificationTypeId",
                "Status"
            ],
            "docstring": "mturk.list_workers_with_qualification_type(['QualificationTypeId'])",
            "method_name": "list_workers_with_qualification_type",
            "required_args": [
                "QualificationTypeId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(Qualification)>",
        "parametrize_id_source": [
            "QualificationTypeId"
        ],
        "result_key": "Qualifications"
    },
    "mturk_qualification_request": {
        "fetch": {
            "all_args": [
                "QualificationTypeId"
            ],
            "docstring": "mturk.list_qualification_requests([])",
            "method_name": "list_qualification_requests",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(QualificationRequest)>",
        "parametrize_id_source": [
            "QualificationTypeId"
        ],
        "result_key": "QualificationRequests"
    },
    "mturk_qualification_requests": {
        "fetch": {
            "all_args": [
                "QualificationTypeId"
            ],
            "docstring": "mturk.list_qualification_requests([])",
            "method_name": "list_qualification_requests",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(QualificationRequestList)>",
        "result_key": "QualificationRequests"
    },
    "mturk_qualification_type_from_get_qualification_type": {
        "fetch": {
            "all_args": [
                "QualificationTypeId"
            ],
            "docstring": "mturk.get_qualification_type(['QualificationTypeId'])",
            "method_name": "get_qualification_type",
            "required_args": [
                "QualificationTypeId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(QualificationType)>",
        "result_key": "QualificationType"
    },
    "mturk_qualification_type_from_list_qualification_types": {
        "fetch": {
            "all_args": [
                "Query",
                "MustBeRequestable",
                "MustBeOwnedByCaller"
            ],
            "docstring": "mturk.list_qualification_types(['MustBeRequestable'])",
            "method_name": "list_qualification_types",
            "required_args": [
                "MustBeRequestable"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(QualificationType)>",
        "parametrize_id_source": [
            "QualificationTypeId"
        ],
        "result_key": "QualificationTypes"
    },
    "mturk_qualification_types": {
        "fetch": {
            "all_args": [
                "Query",
                "MustBeRequestable",
                "MustBeOwnedByCaller"
            ],
            "docstring": "mturk.list_qualification_types(['MustBeRequestable'])",
            "method_name": "list_qualification_types",
            "required_args": [
                "MustBeRequestable"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(QualificationTypeList)>",
        "result_key": "QualificationTypes"
    },
    "mturk_qualifications": {
        "fetch": {
            "all_args": [
                "QualificationTypeId",
                "Status"
            ],
            "docstring": "mturk.list_workers_with_qualification_type(['QualificationTypeId'])",
            "method_name": "list_workers_with_qualification_type",
            "required_args": [
                "QualificationTypeId"
            ],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(QualificationList)>",
        "result_key": "Qualifications"
    },
    "mturk_worker_block": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.list_worker_blocks([])",
            "method_name": "list_worker_blocks",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<StructureShape(WorkerBlock)>",
        "parametrize_id_source": [
            "WorkerId"
        ],
        "result_key": "WorkerBlocks"
    },
    "mturk_worker_blocks": {
        "fetch": {
            "all_args": [],
            "docstring": "mturk.list_worker_blocks([])",
            "method_name": "list_worker_blocks",
            "required_args": [],
            "service_name": "mturk"
        },
        "output_shape": "<ListShape(WorkerBlockList)>",
        "result_key": "WorkerBlocks"
    },
    "opsworks_agent_installer_url": {
        "fetch": {
            "all_args": [
                "StackId"
            ],
            "docstring": "opsworks.describe_stack_provisioning_parameters(['StackId'])",
            "method_name": "describe_stack_provisioning_parameters",
            "required_args": [
                "StackId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "AgentInstallerUrl"
    },
    "opsworks_agent_version": {
        "fetch": {
            "all_args": [
                "StackId",
                "ConfigurationManager"
            ],
            "docstring": "opsworks.describe_agent_versions([])",
            "method_name": "describe_agent_versions",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(AgentVersion)>",
        "parametrize_id_source": [
            "ConfigurationManager"
        ],
        "result_key": "AgentVersions"
    },
    "opsworks_agent_versions": {
        "fetch": {
            "all_args": [
                "StackId",
                "ConfigurationManager"
            ],
            "docstring": "opsworks.describe_agent_versions([])",
            "method_name": "describe_agent_versions",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(AgentVersions)>",
        "result_key": "AgentVersions"
    },
    "opsworks_app": {
        "fetch": {
            "all_args": [
                "StackId",
                "AppIds"
            ],
            "docstring": "opsworks.describe_apps([])",
            "method_name": "describe_apps",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(App)>",
        "parametrize_id_source": [
            "AppId"
        ],
        "result_key": "Apps"
    },
    "opsworks_apps": {
        "fetch": {
            "all_args": [
                "StackId",
                "AppIds"
            ],
            "docstring": "opsworks.describe_apps([])",
            "method_name": "describe_apps",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Apps)>",
        "result_key": "Apps"
    },
    "opsworks_command": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "InstanceId",
                "CommandIds"
            ],
            "docstring": "opsworks.describe_commands([])",
            "method_name": "describe_commands",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Command)>",
        "parametrize_id_source": [
            "CommandId"
        ],
        "result_key": "Commands"
    },
    "opsworks_commands": {
        "fetch": {
            "all_args": [
                "DeploymentId",
                "InstanceId",
                "CommandIds"
            ],
            "docstring": "opsworks.describe_commands([])",
            "method_name": "describe_commands",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Commands)>",
        "result_key": "Commands"
    },
    "opsworks_deployment": {
        "fetch": {
            "all_args": [
                "StackId",
                "AppId",
                "DeploymentIds"
            ],
            "docstring": "opsworks.describe_deployments([])",
            "method_name": "describe_deployments",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Deployment)>",
        "parametrize_id_source": [
            "DeploymentId"
        ],
        "result_key": "Deployments"
    },
    "opsworks_deployments": {
        "fetch": {
            "all_args": [
                "StackId",
                "AppId",
                "DeploymentIds"
            ],
            "docstring": "opsworks.describe_deployments([])",
            "method_name": "describe_deployments",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Deployments)>",
        "result_key": "Deployments"
    },
    "opsworks_ecs_cluster": {
        "fetch": {
            "all_args": [
                "EcsClusterArns",
                "StackId"
            ],
            "docstring": "opsworks.describe_ecs_clusters([])",
            "method_name": "describe_ecs_clusters",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(EcsCluster)>",
        "parametrize_id_source": [
            "EcsClusterArn"
        ],
        "result_key": "EcsClusters"
    },
    "opsworks_ecs_clusters": {
        "fetch": {
            "all_args": [
                "EcsClusterArns",
                "StackId"
            ],
            "docstring": "opsworks.describe_ecs_clusters([])",
            "method_name": "describe_ecs_clusters",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(EcsClusters)>",
        "result_key": "EcsClusters"
    },
    "opsworks_elastic_ip": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "Ips"
            ],
            "docstring": "opsworks.describe_elastic_ips([])",
            "method_name": "describe_elastic_ips",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(ElasticIp)>",
        "parametrize_id_source": [
            "Ip"
        ],
        "result_key": "ElasticIps"
    },
    "opsworks_elastic_ips": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "Ips"
            ],
            "docstring": "opsworks.describe_elastic_ips([])",
            "method_name": "describe_elastic_ips",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(ElasticIps)>",
        "result_key": "ElasticIps"
    },
    "opsworks_elastic_load_balancer": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerIds"
            ],
            "docstring": "opsworks.describe_elastic_load_balancers([])",
            "method_name": "describe_elastic_load_balancers",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(ElasticLoadBalancer)>",
        "parametrize_id_source": [
            "StackId"
        ],
        "result_key": "ElasticLoadBalancers"
    },
    "opsworks_elastic_load_balancers": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerIds"
            ],
            "docstring": "opsworks.describe_elastic_load_balancers([])",
            "method_name": "describe_elastic_load_balancers",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(ElasticLoadBalancers)>",
        "result_key": "ElasticLoadBalancers"
    },
    "opsworks_hostname": {
        "fetch": {
            "all_args": [
                "LayerId"
            ],
            "docstring": "opsworks.get_hostname_suggestion(['LayerId'])",
            "method_name": "get_hostname_suggestion",
            "required_args": [
                "LayerId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Hostname"
    },
    "opsworks_instance": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerId",
                "InstanceIds"
            ],
            "docstring": "opsworks.describe_instances([])",
            "method_name": "describe_instances",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Instance)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "Instances"
    },
    "opsworks_instances": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerId",
                "InstanceIds"
            ],
            "docstring": "opsworks.describe_instances([])",
            "method_name": "describe_instances",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Instances)>",
        "result_key": "Instances"
    },
    "opsworks_layer": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerIds"
            ],
            "docstring": "opsworks.describe_layers([])",
            "method_name": "describe_layers",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Layer)>",
        "parametrize_id_source": [
            "StackId"
        ],
        "result_key": "Layers"
    },
    "opsworks_layer_id": {
        "fetch": {
            "all_args": [
                "LayerId"
            ],
            "docstring": "opsworks.get_hostname_suggestion(['LayerId'])",
            "method_name": "get_hostname_suggestion",
            "required_args": [
                "LayerId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LayerId"
    },
    "opsworks_layers": {
        "fetch": {
            "all_args": [
                "StackId",
                "LayerIds"
            ],
            "docstring": "opsworks.describe_layers([])",
            "method_name": "describe_layers",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Layers)>",
        "result_key": "Layers"
    },
    "opsworks_load_based_auto_scaling_configuration": {
        "fetch": {
            "all_args": [
                "LayerIds"
            ],
            "docstring": "opsworks.describe_load_based_auto_scaling(['LayerIds'])",
            "method_name": "describe_load_based_auto_scaling",
            "required_args": [
                "LayerIds"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(LoadBasedAutoScalingConfiguration)>",
        "parametrize_id_source": [
            "LayerId"
        ],
        "result_key": "LoadBasedAutoScalingConfigurations"
    },
    "opsworks_load_based_auto_scaling_configurations": {
        "fetch": {
            "all_args": [
                "LayerIds"
            ],
            "docstring": "opsworks.describe_load_based_auto_scaling(['LayerIds'])",
            "method_name": "describe_load_based_auto_scaling",
            "required_args": [
                "LayerIds"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(LoadBasedAutoScalingConfigurations)>",
        "result_key": "LoadBasedAutoScalingConfigurations"
    },
    "opsworks_parameters": {
        "fetch": {
            "all_args": [
                "StackId"
            ],
            "docstring": "opsworks.describe_stack_provisioning_parameters(['StackId'])",
            "method_name": "describe_stack_provisioning_parameters",
            "required_args": [
                "StackId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<MapShape(Parameters)>",
        "result_key": "Parameters"
    },
    "opsworks_permission": {
        "fetch": {
            "all_args": [
                "IamUserArn",
                "StackId"
            ],
            "docstring": "opsworks.describe_permissions([])",
            "method_name": "describe_permissions",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Permission)>",
        "parametrize_id_source": [
            "StackId"
        ],
        "result_key": "Permissions"
    },
    "opsworks_permissions": {
        "fetch": {
            "all_args": [
                "IamUserArn",
                "StackId"
            ],
            "docstring": "opsworks.describe_permissions([])",
            "method_name": "describe_permissions",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Permissions)>",
        "result_key": "Permissions"
    },
    "opsworks_raid_array": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "RaidArrayIds"
            ],
            "docstring": "opsworks.describe_raid_arrays([])",
            "method_name": "describe_raid_arrays",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(RaidArray)>",
        "parametrize_id_source": [
            "RaidArrayId"
        ],
        "result_key": "RaidArrays"
    },
    "opsworks_raid_arrays": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "RaidArrayIds"
            ],
            "docstring": "opsworks.describe_raid_arrays([])",
            "method_name": "describe_raid_arrays",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(RaidArrays)>",
        "result_key": "RaidArrays"
    },
    "opsworks_rds_db_instance": {
        "fetch": {
            "all_args": [
                "StackId",
                "RdsDbInstanceArns"
            ],
            "docstring": "opsworks.describe_rds_db_instances(['StackId'])",
            "method_name": "describe_rds_db_instances",
            "required_args": [
                "StackId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(RdsDbInstance)>",
        "parametrize_id_source": [
            "StackId"
        ],
        "result_key": "RdsDbInstances"
    },
    "opsworks_rds_db_instances": {
        "fetch": {
            "all_args": [
                "StackId",
                "RdsDbInstanceArns"
            ],
            "docstring": "opsworks.describe_rds_db_instances(['StackId'])",
            "method_name": "describe_rds_db_instances",
            "required_args": [
                "StackId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(RdsDbInstances)>",
        "result_key": "RdsDbInstances"
    },
    "opsworks_service_error": {
        "fetch": {
            "all_args": [
                "StackId",
                "InstanceId",
                "ServiceErrorIds"
            ],
            "docstring": "opsworks.describe_service_errors([])",
            "method_name": "describe_service_errors",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(ServiceError)>",
        "parametrize_id_source": [
            "ServiceErrorId"
        ],
        "result_key": "ServiceErrors"
    },
    "opsworks_service_errors": {
        "fetch": {
            "all_args": [
                "StackId",
                "InstanceId",
                "ServiceErrorIds"
            ],
            "docstring": "opsworks.describe_service_errors([])",
            "method_name": "describe_service_errors",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(ServiceErrors)>",
        "result_key": "ServiceErrors"
    },
    "opsworks_stack": {
        "fetch": {
            "all_args": [
                "StackIds"
            ],
            "docstring": "opsworks.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Stack)>",
        "parametrize_id_source": [
            "StackId"
        ],
        "result_key": "Stacks"
    },
    "opsworks_stack_summary": {
        "fetch": {
            "all_args": [
                "StackId"
            ],
            "docstring": "opsworks.describe_stack_summary(['StackId'])",
            "method_name": "describe_stack_summary",
            "required_args": [
                "StackId"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(StackSummary)>",
        "result_key": "StackSummary"
    },
    "opsworks_stacks": {
        "fetch": {
            "all_args": [
                "StackIds"
            ],
            "docstring": "opsworks.describe_stacks([])",
            "method_name": "describe_stacks",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Stacks)>",
        "result_key": "Stacks"
    },
    "opsworks_tags": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "opsworks.list_tags(['ResourceArn'])",
            "method_name": "list_tags",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<MapShape(Tags)>",
        "result_key": "Tags"
    },
    "opsworks_time_based_auto_scaling_configuration": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "opsworks.describe_time_based_auto_scaling(['InstanceIds'])",
            "method_name": "describe_time_based_auto_scaling",
            "required_args": [
                "InstanceIds"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(TimeBasedAutoScalingConfiguration)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "TimeBasedAutoScalingConfigurations"
    },
    "opsworks_time_based_auto_scaling_configurations": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "opsworks.describe_time_based_auto_scaling(['InstanceIds'])",
            "method_name": "describe_time_based_auto_scaling",
            "required_args": [
                "InstanceIds"
            ],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(TimeBasedAutoScalingConfigurations)>",
        "result_key": "TimeBasedAutoScalingConfigurations"
    },
    "opsworks_user_profile_from_describe_my_user_profile": {
        "fetch": {
            "all_args": [],
            "docstring": "opsworks.describe_my_user_profile([])",
            "method_name": "describe_my_user_profile",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(SelfUserProfile)>",
        "result_key": "UserProfile"
    },
    "opsworks_user_profile_from_describe_user_profiles": {
        "fetch": {
            "all_args": [
                "IamUserArns"
            ],
            "docstring": "opsworks.describe_user_profiles([])",
            "method_name": "describe_user_profiles",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(UserProfile)>",
        "parametrize_id_source": [
            "IamUserArn"
        ],
        "result_key": "UserProfiles"
    },
    "opsworks_user_profiles": {
        "fetch": {
            "all_args": [
                "IamUserArns"
            ],
            "docstring": "opsworks.describe_user_profiles([])",
            "method_name": "describe_user_profiles",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(UserProfiles)>",
        "result_key": "UserProfiles"
    },
    "opsworks_volume": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "RaidArrayId",
                "VolumeIds"
            ],
            "docstring": "opsworks.describe_volumes([])",
            "method_name": "describe_volumes",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<StructureShape(Volume)>",
        "parametrize_id_source": [
            "VolumeId"
        ],
        "result_key": "Volumes"
    },
    "opsworks_volumes": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "StackId",
                "RaidArrayId",
                "VolumeIds"
            ],
            "docstring": "opsworks.describe_volumes([])",
            "method_name": "describe_volumes",
            "required_args": [],
            "service_name": "opsworks"
        },
        "output_shape": "<ListShape(Volumes)>",
        "result_key": "Volumes"
    },
    "opsworkscm_account_attribute": {
        "fetch": {
            "all_args": [],
            "docstring": "opsworkscm.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StructureShape(AccountAttribute)>",
        "parametrize_id_source": null,
        "result_key": "Attributes"
    },
    "opsworkscm_attributes": {
        "fetch": {
            "all_args": [],
            "docstring": "opsworkscm.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<ListShape(AccountAttributes)>",
        "result_key": "Attributes"
    },
    "opsworkscm_backup": {
        "fetch": {
            "all_args": [
                "BackupId",
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_backups([])",
            "method_name": "describe_backups",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StructureShape(Backup)>",
        "parametrize_id_source": [
            "BackupId"
        ],
        "result_key": "Backups"
    },
    "opsworkscm_backups": {
        "fetch": {
            "all_args": [
                "BackupId",
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_backups([])",
            "method_name": "describe_backups",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<ListShape(Backups)>",
        "result_key": "Backups"
    },
    "opsworkscm_engine_attribute": {
        "fetch": {
            "all_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_node_association_status(['NodeAssociationStatusToken', 'ServerName'])",
            "method_name": "describe_node_association_status",
            "required_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StructureShape(EngineAttribute)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "EngineAttributes"
    },
    "opsworkscm_engine_attributes": {
        "fetch": {
            "all_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_node_association_status(['NodeAssociationStatusToken', 'ServerName'])",
            "method_name": "describe_node_association_status",
            "required_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "service_name": "opsworkscm"
        },
        "output_shape": "<ListShape(EngineAttributes)>",
        "result_key": "EngineAttributes"
    },
    "opsworkscm_node_association_status": {
        "fetch": {
            "all_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_node_association_status(['NodeAssociationStatusToken', 'ServerName'])",
            "method_name": "describe_node_association_status",
            "required_args": [
                "NodeAssociationStatusToken",
                "ServerName"
            ],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StringShape(NodeAssociationStatus)>",
        "result_key": "NodeAssociationStatus"
    },
    "opsworkscm_server": {
        "fetch": {
            "all_args": [
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_servers([])",
            "method_name": "describe_servers",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StructureShape(Server)>",
        "parametrize_id_source": [
            "ServerName"
        ],
        "result_key": "Servers"
    },
    "opsworkscm_server_event": {
        "fetch": {
            "all_args": [
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_events(['ServerName'])",
            "method_name": "describe_events",
            "required_args": [
                "ServerName"
            ],
            "service_name": "opsworkscm"
        },
        "output_shape": "<StructureShape(ServerEvent)>",
        "parametrize_id_source": [
            "ServerName"
        ],
        "result_key": "ServerEvents"
    },
    "opsworkscm_server_events": {
        "fetch": {
            "all_args": [
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_events(['ServerName'])",
            "method_name": "describe_events",
            "required_args": [
                "ServerName"
            ],
            "service_name": "opsworkscm"
        },
        "output_shape": "<ListShape(ServerEvents)>",
        "result_key": "ServerEvents"
    },
    "opsworkscm_servers": {
        "fetch": {
            "all_args": [
                "ServerName"
            ],
            "docstring": "opsworkscm.describe_servers([])",
            "method_name": "describe_servers",
            "required_args": [],
            "service_name": "opsworkscm"
        },
        "output_shape": "<ListShape(Servers)>",
        "result_key": "Servers"
    },
    "organizations_account_from_describe_account": {
        "fetch": {
            "all_args": [
                "AccountId"
            ],
            "docstring": "organizations.describe_account(['AccountId'])",
            "method_name": "describe_account",
            "required_args": [
                "AccountId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Account)>",
        "result_key": "Account"
    },
    "organizations_account_from_list_accounts": {
        "fetch": {
            "all_args": [],
            "docstring": "organizations.list_accounts([])",
            "method_name": "list_accounts",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Account)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Accounts"
    },
    "organizations_account_from_list_accounts_for_parent": {
        "fetch": {
            "all_args": [
                "ParentId"
            ],
            "docstring": "organizations.list_accounts_for_parent(['ParentId'])",
            "method_name": "list_accounts_for_parent",
            "required_args": [
                "ParentId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Account)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Accounts"
    },
    "organizations_accounts_from_list_accounts": {
        "fetch": {
            "all_args": [],
            "docstring": "organizations.list_accounts([])",
            "method_name": "list_accounts",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Accounts)>",
        "result_key": "Accounts"
    },
    "organizations_accounts_from_list_accounts_for_parent": {
        "fetch": {
            "all_args": [
                "ParentId"
            ],
            "docstring": "organizations.list_accounts_for_parent(['ParentId'])",
            "method_name": "list_accounts_for_parent",
            "required_args": [
                "ParentId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Accounts)>",
        "result_key": "Accounts"
    },
    "organizations_child": {
        "fetch": {
            "all_args": [
                "ParentId",
                "ChildType"
            ],
            "docstring": "organizations.list_children(['ParentId', 'ChildType'])",
            "method_name": "list_children",
            "required_args": [
                "ParentId",
                "ChildType"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Child)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Children"
    },
    "organizations_children": {
        "fetch": {
            "all_args": [
                "ParentId",
                "ChildType"
            ],
            "docstring": "organizations.list_children(['ParentId', 'ChildType'])",
            "method_name": "list_children",
            "required_args": [
                "ParentId",
                "ChildType"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Children)>",
        "result_key": "Children"
    },
    "organizations_create_account_status_from_describe_create_account_status": {
        "fetch": {
            "all_args": [
                "CreateAccountRequestId"
            ],
            "docstring": "organizations.describe_create_account_status(['CreateAccountRequestId'])",
            "method_name": "describe_create_account_status",
            "required_args": [
                "CreateAccountRequestId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(CreateAccountStatus)>",
        "result_key": "CreateAccountStatus"
    },
    "organizations_create_account_status_from_list_create_account_status": {
        "fetch": {
            "all_args": [
                "States"
            ],
            "docstring": "organizations.list_create_account_status([])",
            "method_name": "list_create_account_status",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(CreateAccountStatus)>",
        "parametrize_id_source": [
            "State"
        ],
        "result_key": "CreateAccountStatuses"
    },
    "organizations_create_account_statuses": {
        "fetch": {
            "all_args": [
                "States"
            ],
            "docstring": "organizations.list_create_account_status([])",
            "method_name": "list_create_account_status",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(CreateAccountStatuses)>",
        "result_key": "CreateAccountStatuses"
    },
    "organizations_handshake_from_describe_handshake": {
        "fetch": {
            "all_args": [
                "HandshakeId"
            ],
            "docstring": "organizations.describe_handshake(['HandshakeId'])",
            "method_name": "describe_handshake",
            "required_args": [
                "HandshakeId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Handshake)>",
        "result_key": "Handshake"
    },
    "organizations_handshake_from_list_handshakes_for_account": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_handshakes_for_account([])",
            "method_name": "list_handshakes_for_account",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Handshake)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Handshakes"
    },
    "organizations_handshake_from_list_handshakes_for_organization": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_handshakes_for_organization([])",
            "method_name": "list_handshakes_for_organization",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Handshake)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Handshakes"
    },
    "organizations_handshakes_from_list_handshakes_for_account": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_handshakes_for_account([])",
            "method_name": "list_handshakes_for_account",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Handshakes)>",
        "result_key": "Handshakes"
    },
    "organizations_handshakes_from_list_handshakes_for_organization": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_handshakes_for_organization([])",
            "method_name": "list_handshakes_for_organization",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Handshakes)>",
        "result_key": "Handshakes"
    },
    "organizations_organization": {
        "fetch": {
            "all_args": [],
            "docstring": "organizations.describe_organization([])",
            "method_name": "describe_organization",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Organization)>",
        "result_key": "Organization"
    },
    "organizations_organizational_unit_from_describe_organizational_unit": {
        "fetch": {
            "all_args": [
                "OrganizationalUnitId"
            ],
            "docstring": "organizations.describe_organizational_unit(['OrganizationalUnitId'])",
            "method_name": "describe_organizational_unit",
            "required_args": [
                "OrganizationalUnitId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(OrganizationalUnit)>",
        "result_key": "OrganizationalUnit"
    },
    "organizations_organizational_unit_from_list_organizational_units_for_parent": {
        "fetch": {
            "all_args": [
                "ParentId"
            ],
            "docstring": "organizations.list_organizational_units_for_parent(['ParentId'])",
            "method_name": "list_organizational_units_for_parent",
            "required_args": [
                "ParentId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(OrganizationalUnit)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "OrganizationalUnits"
    },
    "organizations_organizational_units": {
        "fetch": {
            "all_args": [
                "ParentId"
            ],
            "docstring": "organizations.list_organizational_units_for_parent(['ParentId'])",
            "method_name": "list_organizational_units_for_parent",
            "required_args": [
                "ParentId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(OrganizationalUnits)>",
        "result_key": "OrganizationalUnits"
    },
    "organizations_parent": {
        "fetch": {
            "all_args": [
                "ChildId"
            ],
            "docstring": "organizations.list_parents(['ChildId'])",
            "method_name": "list_parents",
            "required_args": [
                "ChildId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Parent)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Parents"
    },
    "organizations_parents": {
        "fetch": {
            "all_args": [
                "ChildId"
            ],
            "docstring": "organizations.list_parents(['ChildId'])",
            "method_name": "list_parents",
            "required_args": [
                "ChildId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Parents)>",
        "result_key": "Parents"
    },
    "organizations_policies_from_list_policies": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_policies(['Filter'])",
            "method_name": "list_policies",
            "required_args": [
                "Filter"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Policies)>",
        "result_key": "Policies"
    },
    "organizations_policies_from_list_policies_for_target": {
        "fetch": {
            "all_args": [
                "TargetId",
                "Filter"
            ],
            "docstring": "organizations.list_policies_for_target(['TargetId', 'Filter'])",
            "method_name": "list_policies_for_target",
            "required_args": [
                "TargetId",
                "Filter"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Policies)>",
        "result_key": "Policies"
    },
    "organizations_policy": {
        "fetch": {
            "all_args": [
                "PolicyId"
            ],
            "docstring": "organizations.describe_policy(['PolicyId'])",
            "method_name": "describe_policy",
            "required_args": [
                "PolicyId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Policy)>",
        "result_key": "Policy"
    },
    "organizations_policy_summary_from_list_policies": {
        "fetch": {
            "all_args": [
                "Filter"
            ],
            "docstring": "organizations.list_policies(['Filter'])",
            "method_name": "list_policies",
            "required_args": [
                "Filter"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(PolicySummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Policies"
    },
    "organizations_policy_summary_from_list_policies_for_target": {
        "fetch": {
            "all_args": [
                "TargetId",
                "Filter"
            ],
            "docstring": "organizations.list_policies_for_target(['TargetId', 'Filter'])",
            "method_name": "list_policies_for_target",
            "required_args": [
                "TargetId",
                "Filter"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(PolicySummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Policies"
    },
    "organizations_policy_target_summary": {
        "fetch": {
            "all_args": [
                "PolicyId"
            ],
            "docstring": "organizations.list_targets_for_policy(['PolicyId'])",
            "method_name": "list_targets_for_policy",
            "required_args": [
                "PolicyId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(PolicyTargetSummary)>",
        "parametrize_id_source": [
            "TargetId"
        ],
        "result_key": "Targets"
    },
    "organizations_root": {
        "fetch": {
            "all_args": [],
            "docstring": "organizations.list_roots([])",
            "method_name": "list_roots",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<StructureShape(Root)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Roots"
    },
    "organizations_roots": {
        "fetch": {
            "all_args": [],
            "docstring": "organizations.list_roots([])",
            "method_name": "list_roots",
            "required_args": [],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(Roots)>",
        "result_key": "Roots"
    },
    "organizations_targets": {
        "fetch": {
            "all_args": [
                "PolicyId"
            ],
            "docstring": "organizations.list_targets_for_policy(['PolicyId'])",
            "method_name": "list_targets_for_policy",
            "required_args": [
                "PolicyId"
            ],
            "service_name": "organizations"
        },
        "output_shape": "<ListShape(PolicyTargets)>",
        "result_key": "Targets"
    },
    "pinpoint_activities_response": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "CampaignId",
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_campaign_activities(['ApplicationId', 'CampaignId'])",
            "method_name": "get_campaign_activities",
            "required_args": [
                "ApplicationId",
                "CampaignId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ActivitiesResponse)>",
        "result_key": "ActivitiesResponse"
    },
    "pinpoint_adm_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_adm_channel(['ApplicationId'])",
            "method_name": "get_adm_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ADMChannelResponse)>",
        "result_key": "ADMChannelResponse"
    },
    "pinpoint_apns_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_apns_channel(['ApplicationId'])",
            "method_name": "get_apns_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(APNSChannelResponse)>",
        "result_key": "APNSChannelResponse"
    },
    "pinpoint_apns_sandbox_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_apns_sandbox_channel(['ApplicationId'])",
            "method_name": "get_apns_sandbox_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(APNSSandboxChannelResponse)>",
        "result_key": "APNSSandboxChannelResponse"
    },
    "pinpoint_application_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_app(['ApplicationId'])",
            "method_name": "get_app",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ApplicationResponse)>",
        "result_key": "ApplicationResponse"
    },
    "pinpoint_application_settings_resource": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_application_settings(['ApplicationId'])",
            "method_name": "get_application_settings",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ApplicationSettingsResource)>",
        "result_key": "ApplicationSettingsResource"
    },
    "pinpoint_applications_response": {
        "fetch": {
            "all_args": [
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_apps([])",
            "method_name": "get_apps",
            "required_args": [],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ApplicationsResponse)>",
        "result_key": "ApplicationsResponse"
    },
    "pinpoint_baidu_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_baidu_channel(['ApplicationId'])",
            "method_name": "get_baidu_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(BaiduChannelResponse)>",
        "result_key": "BaiduChannelResponse"
    },
    "pinpoint_campaign_response_from_get_campaign": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "CampaignId"
            ],
            "docstring": "pinpoint.get_campaign(['CampaignId', 'ApplicationId'])",
            "method_name": "get_campaign",
            "required_args": [
                "CampaignId",
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(CampaignResponse)>",
        "result_key": "CampaignResponse"
    },
    "pinpoint_campaign_response_from_get_campaign_version": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "CampaignId",
                "Version"
            ],
            "docstring": "pinpoint.get_campaign_version(['Version', 'ApplicationId', 'CampaignId'])",
            "method_name": "get_campaign_version",
            "required_args": [
                "Version",
                "ApplicationId",
                "CampaignId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(CampaignResponse)>",
        "result_key": "CampaignResponse"
    },
    "pinpoint_campaigns_response_from_get_campaign_versions": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "CampaignId",
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_campaign_versions(['ApplicationId', 'CampaignId'])",
            "method_name": "get_campaign_versions",
            "required_args": [
                "ApplicationId",
                "CampaignId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(CampaignsResponse)>",
        "result_key": "CampaignsResponse"
    },
    "pinpoint_campaigns_response_from_get_campaigns": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_campaigns(['ApplicationId'])",
            "method_name": "get_campaigns",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(CampaignsResponse)>",
        "result_key": "CampaignsResponse"
    },
    "pinpoint_email_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_email_channel(['ApplicationId'])",
            "method_name": "get_email_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(EmailChannelResponse)>",
        "result_key": "EmailChannelResponse"
    },
    "pinpoint_endpoint_response": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "EndpointId"
            ],
            "docstring": "pinpoint.get_endpoint(['ApplicationId', 'EndpointId'])",
            "method_name": "get_endpoint",
            "required_args": [
                "ApplicationId",
                "EndpointId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(EndpointResponse)>",
        "result_key": "EndpointResponse"
    },
    "pinpoint_event_stream": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_event_stream(['ApplicationId'])",
            "method_name": "get_event_stream",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(EventStream)>",
        "result_key": "EventStream"
    },
    "pinpoint_gcm_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_gcm_channel(['ApplicationId'])",
            "method_name": "get_gcm_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(GCMChannelResponse)>",
        "result_key": "GCMChannelResponse"
    },
    "pinpoint_import_job_response": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "JobId"
            ],
            "docstring": "pinpoint.get_import_job(['ApplicationId', 'JobId'])",
            "method_name": "get_import_job",
            "required_args": [
                "ApplicationId",
                "JobId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ImportJobResponse)>",
        "result_key": "ImportJobResponse"
    },
    "pinpoint_import_jobs_response_from_get_import_jobs": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_import_jobs(['ApplicationId'])",
            "method_name": "get_import_jobs",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ImportJobsResponse)>",
        "result_key": "ImportJobsResponse"
    },
    "pinpoint_import_jobs_response_from_get_segment_import_jobs": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "PageSize",
                "SegmentId",
                "Token"
            ],
            "docstring": "pinpoint.get_segment_import_jobs(['SegmentId', 'ApplicationId'])",
            "method_name": "get_segment_import_jobs",
            "required_args": [
                "SegmentId",
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(ImportJobsResponse)>",
        "result_key": "ImportJobsResponse"
    },
    "pinpoint_segment_response_from_get_segment": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "SegmentId"
            ],
            "docstring": "pinpoint.get_segment(['SegmentId', 'ApplicationId'])",
            "method_name": "get_segment",
            "required_args": [
                "SegmentId",
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(SegmentResponse)>",
        "result_key": "SegmentResponse"
    },
    "pinpoint_segment_response_from_get_segment_version": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "SegmentId",
                "Version"
            ],
            "docstring": "pinpoint.get_segment_version(['SegmentId', 'Version', 'ApplicationId'])",
            "method_name": "get_segment_version",
            "required_args": [
                "SegmentId",
                "Version",
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(SegmentResponse)>",
        "result_key": "SegmentResponse"
    },
    "pinpoint_segments_response_from_get_segment_versions": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "PageSize",
                "SegmentId",
                "Token"
            ],
            "docstring": "pinpoint.get_segment_versions(['SegmentId', 'ApplicationId'])",
            "method_name": "get_segment_versions",
            "required_args": [
                "SegmentId",
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(SegmentsResponse)>",
        "result_key": "SegmentsResponse"
    },
    "pinpoint_segments_response_from_get_segments": {
        "fetch": {
            "all_args": [
                "ApplicationId",
                "PageSize",
                "Token"
            ],
            "docstring": "pinpoint.get_segments(['ApplicationId'])",
            "method_name": "get_segments",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(SegmentsResponse)>",
        "result_key": "SegmentsResponse"
    },
    "pinpoint_sms_channel_response": {
        "fetch": {
            "all_args": [
                "ApplicationId"
            ],
            "docstring": "pinpoint.get_sms_channel(['ApplicationId'])",
            "method_name": "get_sms_channel",
            "required_args": [
                "ApplicationId"
            ],
            "service_name": "pinpoint"
        },
        "output_shape": "<StructureShape(SMSChannelResponse)>",
        "result_key": "SMSChannelResponse"
    },
    "polly_lexicon": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "polly.get_lexicon(['Name'])",
            "method_name": "get_lexicon",
            "required_args": [
                "Name"
            ],
            "service_name": "polly"
        },
        "output_shape": "<StructureShape(Lexicon)>",
        "result_key": "Lexicon"
    },
    "polly_lexicon_attributes": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "polly.get_lexicon(['Name'])",
            "method_name": "get_lexicon",
            "required_args": [
                "Name"
            ],
            "service_name": "polly"
        },
        "output_shape": "<StructureShape(LexiconAttributes)>",
        "result_key": "LexiconAttributes"
    },
    "polly_lexicon_description": {
        "fetch": {
            "all_args": [],
            "docstring": "polly.list_lexicons([])",
            "method_name": "list_lexicons",
            "required_args": [],
            "service_name": "polly"
        },
        "output_shape": "<StructureShape(LexiconDescription)>",
        "parametrize_id_source": null,
        "result_key": "Lexicons"
    },
    "polly_lexicons": {
        "fetch": {
            "all_args": [],
            "docstring": "polly.list_lexicons([])",
            "method_name": "list_lexicons",
            "required_args": [],
            "service_name": "polly"
        },
        "output_shape": "<ListShape(LexiconDescriptionList)>",
        "result_key": "Lexicons"
    },
    "polly_voice": {
        "fetch": {
            "all_args": [
                "LanguageCode"
            ],
            "docstring": "polly.describe_voices([])",
            "method_name": "describe_voices",
            "required_args": [],
            "service_name": "polly"
        },
        "output_shape": "<StructureShape(Voice)>",
        "parametrize_id_source": [
            "LanguageCode"
        ],
        "result_key": "Voices"
    },
    "polly_voices": {
        "fetch": {
            "all_args": [
                "LanguageCode"
            ],
            "docstring": "polly.describe_voices([])",
            "method_name": "describe_voices",
            "required_args": [],
            "service_name": "polly"
        },
        "output_shape": "<ListShape(VoiceList)>",
        "result_key": "Voices"
    },
    "rds_account_quota": {
        "fetch": {
            "all_args": [],
            "docstring": "rds.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(AccountQuota)>",
        "parametrize_id_source": null,
        "result_key": "AccountQuotas"
    },
    "rds_account_quotas": {
        "fetch": {
            "all_args": [],
            "docstring": "rds.describe_account_attributes([])",
            "method_name": "describe_account_attributes",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(AccountQuotaList)>",
        "result_key": "AccountQuotas"
    },
    "rds_certificate": {
        "fetch": {
            "all_args": [
                "CertificateIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_certificates([])",
            "method_name": "describe_certificates",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(Certificate)>",
        "parametrize_id_source": [
            "CertificateIdentifier"
        ],
        "result_key": "Certificates"
    },
    "rds_certificates": {
        "fetch": {
            "all_args": [
                "CertificateIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_certificates([])",
            "method_name": "describe_certificates",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(CertificateList)>",
        "result_key": "Certificates"
    },
    "rds_db_cluster": {
        "fetch": {
            "all_args": [
                "DBClusterIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_db_clusters([])",
            "method_name": "describe_db_clusters",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBCluster)>",
        "parametrize_id_source": [
            "DBClusterIdentifier"
        ],
        "result_key": "DBClusters"
    },
    "rds_db_cluster_parameter_group": {
        "fetch": {
            "all_args": [
                "DBClusterParameterGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_cluster_parameter_groups([])",
            "method_name": "describe_db_cluster_parameter_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBClusterParameterGroup)>",
        "parametrize_id_source": [
            "DBClusterParameterGroupName"
        ],
        "result_key": "DBClusterParameterGroups"
    },
    "rds_db_cluster_parameter_groups": {
        "fetch": {
            "all_args": [
                "DBClusterParameterGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_cluster_parameter_groups([])",
            "method_name": "describe_db_cluster_parameter_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBClusterParameterGroupList)>",
        "result_key": "DBClusterParameterGroups"
    },
    "rds_db_cluster_snapshot": {
        "fetch": {
            "all_args": [
                "DBClusterIdentifier",
                "DBClusterSnapshotIdentifier",
                "SnapshotType",
                "Filters",
                "IncludeShared",
                "IncludePublic"
            ],
            "docstring": "rds.describe_db_cluster_snapshots([])",
            "method_name": "describe_db_cluster_snapshots",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBClusterSnapshot)>",
        "parametrize_id_source": [
            "DBClusterSnapshotIdentifier"
        ],
        "result_key": "DBClusterSnapshots"
    },
    "rds_db_cluster_snapshot_attributes_result": {
        "fetch": {
            "all_args": [
                "DBClusterSnapshotIdentifier"
            ],
            "docstring": "rds.describe_db_cluster_snapshot_attributes(['DBClusterSnapshotIdentifier'])",
            "method_name": "describe_db_cluster_snapshot_attributes",
            "required_args": [
                "DBClusterSnapshotIdentifier"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBClusterSnapshotAttributesResult)>",
        "result_key": "DBClusterSnapshotAttributesResult"
    },
    "rds_db_cluster_snapshots": {
        "fetch": {
            "all_args": [
                "DBClusterIdentifier",
                "DBClusterSnapshotIdentifier",
                "SnapshotType",
                "Filters",
                "IncludeShared",
                "IncludePublic"
            ],
            "docstring": "rds.describe_db_cluster_snapshots([])",
            "method_name": "describe_db_cluster_snapshots",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBClusterSnapshotList)>",
        "result_key": "DBClusterSnapshots"
    },
    "rds_db_clusters": {
        "fetch": {
            "all_args": [
                "DBClusterIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_db_clusters([])",
            "method_name": "describe_db_clusters",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBClusterList)>",
        "result_key": "DBClusters"
    },
    "rds_db_engine_version": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "DBParameterGroupFamily",
                "Filters",
                "DefaultOnly",
                "ListSupportedCharacterSets",
                "ListSupportedTimezones"
            ],
            "docstring": "rds.describe_db_engine_versions([])",
            "method_name": "describe_db_engine_versions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBEngineVersion)>",
        "parametrize_id_source": [
            "Engine"
        ],
        "result_key": "DBEngineVersions"
    },
    "rds_db_engine_versions": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "DBParameterGroupFamily",
                "Filters",
                "DefaultOnly",
                "ListSupportedCharacterSets",
                "ListSupportedTimezones"
            ],
            "docstring": "rds.describe_db_engine_versions([])",
            "method_name": "describe_db_engine_versions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBEngineVersionList)>",
        "result_key": "DBEngineVersions"
    },
    "rds_db_instance": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_db_instances([])",
            "method_name": "describe_db_instances",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBInstance)>",
        "parametrize_id_source": [
            "DBInstanceIdentifier"
        ],
        "result_key": "DBInstances"
    },
    "rds_db_instances": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_db_instances([])",
            "method_name": "describe_db_instances",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBInstanceList)>",
        "result_key": "DBInstances"
    },
    "rds_db_parameter_group": {
        "fetch": {
            "all_args": [
                "DBParameterGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_parameter_groups([])",
            "method_name": "describe_db_parameter_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBParameterGroup)>",
        "parametrize_id_source": [
            "DBParameterGroupName"
        ],
        "result_key": "DBParameterGroups"
    },
    "rds_db_parameter_groups": {
        "fetch": {
            "all_args": [
                "DBParameterGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_parameter_groups([])",
            "method_name": "describe_db_parameter_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBParameterGroupList)>",
        "result_key": "DBParameterGroups"
    },
    "rds_db_security_group": {
        "fetch": {
            "all_args": [
                "DBSecurityGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_security_groups([])",
            "method_name": "describe_db_security_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBSecurityGroup)>",
        "parametrize_id_source": [
            "DBSecurityGroupName"
        ],
        "result_key": "DBSecurityGroups"
    },
    "rds_db_security_groups": {
        "fetch": {
            "all_args": [
                "DBSecurityGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_security_groups([])",
            "method_name": "describe_db_security_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBSecurityGroups)>",
        "result_key": "DBSecurityGroups"
    },
    "rds_db_snapshot": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "DBSnapshotIdentifier",
                "SnapshotType",
                "Filters",
                "IncludeShared",
                "IncludePublic"
            ],
            "docstring": "rds.describe_db_snapshots([])",
            "method_name": "describe_db_snapshots",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBSnapshot)>",
        "parametrize_id_source": [
            "DBSnapshotIdentifier"
        ],
        "result_key": "DBSnapshots"
    },
    "rds_db_snapshot_attributes_result": {
        "fetch": {
            "all_args": [
                "DBSnapshotIdentifier"
            ],
            "docstring": "rds.describe_db_snapshot_attributes(['DBSnapshotIdentifier'])",
            "method_name": "describe_db_snapshot_attributes",
            "required_args": [
                "DBSnapshotIdentifier"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBSnapshotAttributesResult)>",
        "result_key": "DBSnapshotAttributesResult"
    },
    "rds_db_snapshots": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "DBSnapshotIdentifier",
                "SnapshotType",
                "Filters",
                "IncludeShared",
                "IncludePublic"
            ],
            "docstring": "rds.describe_db_snapshots([])",
            "method_name": "describe_db_snapshots",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBSnapshotList)>",
        "result_key": "DBSnapshots"
    },
    "rds_db_subnet_group": {
        "fetch": {
            "all_args": [
                "DBSubnetGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_subnet_groups([])",
            "method_name": "describe_db_subnet_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DBSubnetGroup)>",
        "parametrize_id_source": [
            "DBSubnetGroupName"
        ],
        "result_key": "DBSubnetGroups"
    },
    "rds_db_subnet_groups": {
        "fetch": {
            "all_args": [
                "DBSubnetGroupName",
                "Filters"
            ],
            "docstring": "rds.describe_db_subnet_groups([])",
            "method_name": "describe_db_subnet_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DBSubnetGroups)>",
        "result_key": "DBSubnetGroups"
    },
    "rds_describe_db_log_files": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "FilenameContains",
                "FileLastWritten",
                "FileSize",
                "Filters"
            ],
            "docstring": "rds.describe_db_log_files(['DBInstanceIdentifier'])",
            "method_name": "describe_db_log_files",
            "required_args": [
                "DBInstanceIdentifier"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(DescribeDBLogFilesList)>",
        "result_key": "DescribeDBLogFiles"
    },
    "rds_describe_db_log_files_details": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier",
                "FilenameContains",
                "FileLastWritten",
                "FileSize",
                "Filters"
            ],
            "docstring": "rds.describe_db_log_files(['DBInstanceIdentifier'])",
            "method_name": "describe_db_log_files",
            "required_args": [
                "DBInstanceIdentifier"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(DescribeDBLogFilesDetails)>",
        "parametrize_id_source": [
            "LastWritten"
        ],
        "result_key": "DescribeDBLogFiles"
    },
    "rds_engine_defaults_from_describe_engine_default_cluster_parameters": {
        "fetch": {
            "all_args": [
                "DBParameterGroupFamily",
                "Filters"
            ],
            "docstring": "rds.describe_engine_default_cluster_parameters(['DBParameterGroupFamily'])",
            "method_name": "describe_engine_default_cluster_parameters",
            "required_args": [
                "DBParameterGroupFamily"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(EngineDefaults)>",
        "result_key": "EngineDefaults"
    },
    "rds_engine_defaults_from_describe_engine_default_parameters": {
        "fetch": {
            "all_args": [
                "DBParameterGroupFamily",
                "Filters"
            ],
            "docstring": "rds.describe_engine_default_parameters(['DBParameterGroupFamily'])",
            "method_name": "describe_engine_default_parameters",
            "required_args": [
                "DBParameterGroupFamily"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(EngineDefaults)>",
        "result_key": "EngineDefaults"
    },
    "rds_event": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration",
                "EventCategories",
                "Filters"
            ],
            "docstring": "rds.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "SourceIdentifier"
        ],
        "result_key": "Events"
    },
    "rds_event_categories_map": {
        "fetch": {
            "all_args": [
                "SourceType",
                "Filters"
            ],
            "docstring": "rds.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(EventCategoriesMap)>",
        "parametrize_id_source": [
            "SourceType"
        ],
        "result_key": "EventCategoriesMapList"
    },
    "rds_event_categories_map_list": {
        "fetch": {
            "all_args": [
                "SourceType",
                "Filters"
            ],
            "docstring": "rds.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(EventCategoriesMapList)>",
        "result_key": "EventCategoriesMapList"
    },
    "rds_event_subscription": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "Filters"
            ],
            "docstring": "rds.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(EventSubscription)>",
        "parametrize_id_source": [
            "CustomerAwsId"
        ],
        "result_key": "EventSubscriptionsList"
    },
    "rds_event_subscriptions_list": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "Filters"
            ],
            "docstring": "rds.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(EventSubscriptionsList)>",
        "result_key": "EventSubscriptionsList"
    },
    "rds_events": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration",
                "EventCategories",
                "Filters"
            ],
            "docstring": "rds.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "rds_option_group": {
        "fetch": {
            "all_args": [
                "OptionGroupName",
                "Filters",
                "EngineName",
                "MajorEngineVersion"
            ],
            "docstring": "rds.describe_option_groups([])",
            "method_name": "describe_option_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(OptionGroup)>",
        "parametrize_id_source": [
            "OptionGroupName"
        ],
        "result_key": "OptionGroupsList"
    },
    "rds_option_group_option": {
        "fetch": {
            "all_args": [
                "EngineName",
                "MajorEngineVersion",
                "Filters"
            ],
            "docstring": "rds.describe_option_group_options(['EngineName'])",
            "method_name": "describe_option_group_options",
            "required_args": [
                "EngineName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(OptionGroupOption)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "OptionGroupOptions"
    },
    "rds_option_group_options": {
        "fetch": {
            "all_args": [
                "EngineName",
                "MajorEngineVersion",
                "Filters"
            ],
            "docstring": "rds.describe_option_group_options(['EngineName'])",
            "method_name": "describe_option_group_options",
            "required_args": [
                "EngineName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(OptionGroupOptionsList)>",
        "result_key": "OptionGroupOptions"
    },
    "rds_option_groups_list": {
        "fetch": {
            "all_args": [
                "OptionGroupName",
                "Filters",
                "EngineName",
                "MajorEngineVersion"
            ],
            "docstring": "rds.describe_option_groups([])",
            "method_name": "describe_option_groups",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(OptionGroupsList)>",
        "result_key": "OptionGroupsList"
    },
    "rds_orderable_db_instance_option": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "DBInstanceClass",
                "LicenseModel",
                "Vpc",
                "Filters"
            ],
            "docstring": "rds.describe_orderable_db_instance_options(['Engine'])",
            "method_name": "describe_orderable_db_instance_options",
            "required_args": [
                "Engine"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(OrderableDBInstanceOption)>",
        "parametrize_id_source": [
            "Engine"
        ],
        "result_key": "OrderableDBInstanceOptions"
    },
    "rds_orderable_db_instance_options": {
        "fetch": {
            "all_args": [
                "Engine",
                "EngineVersion",
                "DBInstanceClass",
                "LicenseModel",
                "Vpc",
                "Filters"
            ],
            "docstring": "rds.describe_orderable_db_instance_options(['Engine'])",
            "method_name": "describe_orderable_db_instance_options",
            "required_args": [
                "Engine"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(OrderableDBInstanceOptionsList)>",
        "result_key": "OrderableDBInstanceOptions"
    },
    "rds_parameter_from_describe_db_cluster_parameters": {
        "fetch": {
            "all_args": [
                "DBClusterParameterGroupName",
                "Source",
                "Filters"
            ],
            "docstring": "rds.describe_db_cluster_parameters(['DBClusterParameterGroupName'])",
            "method_name": "describe_db_cluster_parameters",
            "required_args": [
                "DBClusterParameterGroupName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "Parameters"
    },
    "rds_parameter_from_describe_db_parameters": {
        "fetch": {
            "all_args": [
                "DBParameterGroupName",
                "Source",
                "Filters"
            ],
            "docstring": "rds.describe_db_parameters(['DBParameterGroupName'])",
            "method_name": "describe_db_parameters",
            "required_args": [
                "DBParameterGroupName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "Parameters"
    },
    "rds_parameters_from_describe_db_cluster_parameters": {
        "fetch": {
            "all_args": [
                "DBClusterParameterGroupName",
                "Source",
                "Filters"
            ],
            "docstring": "rds.describe_db_cluster_parameters(['DBClusterParameterGroupName'])",
            "method_name": "describe_db_cluster_parameters",
            "required_args": [
                "DBClusterParameterGroupName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(ParametersList)>",
        "result_key": "Parameters"
    },
    "rds_parameters_from_describe_db_parameters": {
        "fetch": {
            "all_args": [
                "DBParameterGroupName",
                "Source",
                "Filters"
            ],
            "docstring": "rds.describe_db_parameters(['DBParameterGroupName'])",
            "method_name": "describe_db_parameters",
            "required_args": [
                "DBParameterGroupName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(ParametersList)>",
        "result_key": "Parameters"
    },
    "rds_pending_maintenance_actions": {
        "fetch": {
            "all_args": [
                "ResourceIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_pending_maintenance_actions([])",
            "method_name": "describe_pending_maintenance_actions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(PendingMaintenanceActions)>",
        "result_key": "PendingMaintenanceActions"
    },
    "rds_reserved_db_instance": {
        "fetch": {
            "all_args": [
                "ReservedDBInstanceId",
                "ReservedDBInstancesOfferingId",
                "DBInstanceClass",
                "Duration",
                "ProductDescription",
                "OfferingType",
                "MultiAZ",
                "Filters"
            ],
            "docstring": "rds.describe_reserved_db_instances([])",
            "method_name": "describe_reserved_db_instances",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(ReservedDBInstance)>",
        "parametrize_id_source": [
            "ReservedDBInstanceId"
        ],
        "result_key": "ReservedDBInstances"
    },
    "rds_reserved_db_instances": {
        "fetch": {
            "all_args": [
                "ReservedDBInstanceId",
                "ReservedDBInstancesOfferingId",
                "DBInstanceClass",
                "Duration",
                "ProductDescription",
                "OfferingType",
                "MultiAZ",
                "Filters"
            ],
            "docstring": "rds.describe_reserved_db_instances([])",
            "method_name": "describe_reserved_db_instances",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(ReservedDBInstanceList)>",
        "result_key": "ReservedDBInstances"
    },
    "rds_reserved_db_instances_offering": {
        "fetch": {
            "all_args": [
                "ReservedDBInstancesOfferingId",
                "DBInstanceClass",
                "Duration",
                "ProductDescription",
                "OfferingType",
                "MultiAZ",
                "Filters"
            ],
            "docstring": "rds.describe_reserved_db_instances_offerings([])",
            "method_name": "describe_reserved_db_instances_offerings",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(ReservedDBInstancesOffering)>",
        "parametrize_id_source": [
            "ReservedDBInstancesOfferingId"
        ],
        "result_key": "ReservedDBInstancesOfferings"
    },
    "rds_reserved_db_instances_offerings": {
        "fetch": {
            "all_args": [
                "ReservedDBInstancesOfferingId",
                "DBInstanceClass",
                "Duration",
                "ProductDescription",
                "OfferingType",
                "MultiAZ",
                "Filters"
            ],
            "docstring": "rds.describe_reserved_db_instances_offerings([])",
            "method_name": "describe_reserved_db_instances_offerings",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(ReservedDBInstancesOfferingList)>",
        "result_key": "ReservedDBInstancesOfferings"
    },
    "rds_resource_pending_maintenance_actions": {
        "fetch": {
            "all_args": [
                "ResourceIdentifier",
                "Filters"
            ],
            "docstring": "rds.describe_pending_maintenance_actions([])",
            "method_name": "describe_pending_maintenance_actions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(ResourcePendingMaintenanceActions)>",
        "parametrize_id_source": [
            "ResourceIdentifier"
        ],
        "result_key": "PendingMaintenanceActions"
    },
    "rds_source_region": {
        "fetch": {
            "all_args": [
                "RegionName",
                "Filters"
            ],
            "docstring": "rds.describe_source_regions([])",
            "method_name": "describe_source_regions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(SourceRegion)>",
        "parametrize_id_source": [
            "RegionName"
        ],
        "result_key": "SourceRegions"
    },
    "rds_source_regions": {
        "fetch": {
            "all_args": [
                "RegionName",
                "Filters"
            ],
            "docstring": "rds.describe_source_regions([])",
            "method_name": "describe_source_regions",
            "required_args": [],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(SourceRegionList)>",
        "result_key": "SourceRegions"
    },
    "rds_tag": {
        "fetch": {
            "all_args": [
                "ResourceName",
                "Filters"
            ],
            "docstring": "rds.list_tags_for_resource(['ResourceName'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "rds_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceName",
                "Filters"
            ],
            "docstring": "rds.list_tags_for_resource(['ResourceName'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceName"
            ],
            "service_name": "rds"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "rds_valid_db_instance_modifications_message": {
        "fetch": {
            "all_args": [
                "DBInstanceIdentifier"
            ],
            "docstring": "rds.describe_valid_db_instance_modifications(['DBInstanceIdentifier'])",
            "method_name": "describe_valid_db_instance_modifications",
            "required_args": [
                "DBInstanceIdentifier"
            ],
            "service_name": "rds"
        },
        "output_shape": "<StructureShape(ValidDBInstanceModificationsMessage)>",
        "result_key": "ValidDBInstanceModificationsMessage"
    },
    "redshift_avg_resize_rate_in_mega_bytes_per_second": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(DoubleOptional)>",
        "result_key": "AvgResizeRateInMegaBytesPerSecond"
    },
    "redshift_bucket_name": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "BucketName"
    },
    "redshift_cluster": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(Cluster)>",
        "parametrize_id_source": [
            "ClusterIdentifier"
        ],
        "result_key": "Clusters"
    },
    "redshift_cluster_parameter_group": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_parameter_groups([])",
            "method_name": "describe_cluster_parameter_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ClusterParameterGroup)>",
        "parametrize_id_source": [
            "ParameterGroupName"
        ],
        "result_key": "ParameterGroups"
    },
    "redshift_cluster_security_group": {
        "fetch": {
            "all_args": [
                "ClusterSecurityGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_security_groups([])",
            "method_name": "describe_cluster_security_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ClusterSecurityGroup)>",
        "parametrize_id_source": [
            "ClusterSecurityGroupName"
        ],
        "result_key": "ClusterSecurityGroups"
    },
    "redshift_cluster_security_groups": {
        "fetch": {
            "all_args": [
                "ClusterSecurityGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_security_groups([])",
            "method_name": "describe_cluster_security_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ClusterSecurityGroups)>",
        "result_key": "ClusterSecurityGroups"
    },
    "redshift_cluster_subnet_group": {
        "fetch": {
            "all_args": [
                "ClusterSubnetGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_subnet_groups([])",
            "method_name": "describe_cluster_subnet_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ClusterSubnetGroup)>",
        "parametrize_id_source": [
            "ClusterSubnetGroupName"
        ],
        "result_key": "ClusterSubnetGroups"
    },
    "redshift_cluster_subnet_groups": {
        "fetch": {
            "all_args": [
                "ClusterSubnetGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_subnet_groups([])",
            "method_name": "describe_cluster_subnet_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ClusterSubnetGroups)>",
        "result_key": "ClusterSubnetGroups"
    },
    "redshift_cluster_version": {
        "fetch": {
            "all_args": [
                "ClusterVersion",
                "ClusterParameterGroupFamily"
            ],
            "docstring": "redshift.describe_cluster_versions([])",
            "method_name": "describe_cluster_versions",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ClusterVersion)>",
        "parametrize_id_source": [
            "ClusterVersion"
        ],
        "result_key": "ClusterVersions"
    },
    "redshift_cluster_versions": {
        "fetch": {
            "all_args": [
                "ClusterVersion",
                "ClusterParameterGroupFamily"
            ],
            "docstring": "redshift.describe_cluster_versions([])",
            "method_name": "describe_cluster_versions",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ClusterVersionList)>",
        "result_key": "ClusterVersions"
    },
    "redshift_clusters": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_clusters([])",
            "method_name": "describe_clusters",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ClusterList)>",
        "result_key": "Clusters"
    },
    "redshift_db_password": {
        "fetch": {
            "all_args": [
                "DbUser",
                "DbName",
                "ClusterIdentifier",
                "DurationSeconds",
                "AutoCreate",
                "DbGroups"
            ],
            "docstring": "redshift.get_cluster_credentials(['DbUser', 'ClusterIdentifier'])",
            "method_name": "get_cluster_credentials",
            "required_args": [
                "DbUser",
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(SensitiveString)>",
        "result_key": "DbPassword"
    },
    "redshift_db_user": {
        "fetch": {
            "all_args": [
                "DbUser",
                "DbName",
                "ClusterIdentifier",
                "DurationSeconds",
                "AutoCreate",
                "DbGroups"
            ],
            "docstring": "redshift.get_cluster_credentials(['DbUser', 'ClusterIdentifier'])",
            "method_name": "get_cluster_credentials",
            "required_args": [
                "DbUser",
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "DbUser"
    },
    "redshift_default_cluster_parameters": {
        "fetch": {
            "all_args": [
                "ParameterGroupFamily"
            ],
            "docstring": "redshift.describe_default_cluster_parameters(['ParameterGroupFamily'])",
            "method_name": "describe_default_cluster_parameters",
            "required_args": [
                "ParameterGroupFamily"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(DefaultClusterParameters)>",
        "result_key": "DefaultClusterParameters"
    },
    "redshift_elapsed_time_in_seconds": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(LongOptional)>",
        "result_key": "ElapsedTimeInSeconds"
    },
    "redshift_estimated_time_to_completion_in_seconds": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(LongOptional)>",
        "result_key": "EstimatedTimeToCompletionInSeconds"
    },
    "redshift_event": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "redshift.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(Event)>",
        "parametrize_id_source": [
            "SourceIdentifier"
        ],
        "result_key": "Events"
    },
    "redshift_event_categories_map": {
        "fetch": {
            "all_args": [
                "SourceType"
            ],
            "docstring": "redshift.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(EventCategoriesMap)>",
        "parametrize_id_source": [
            "SourceType"
        ],
        "result_key": "EventCategoriesMapList"
    },
    "redshift_event_categories_map_list": {
        "fetch": {
            "all_args": [
                "SourceType"
            ],
            "docstring": "redshift.describe_event_categories([])",
            "method_name": "describe_event_categories",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(EventCategoriesMapList)>",
        "result_key": "EventCategoriesMapList"
    },
    "redshift_event_subscription": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(EventSubscription)>",
        "parametrize_id_source": [
            "CustomerAwsId"
        ],
        "result_key": "EventSubscriptionsList"
    },
    "redshift_event_subscriptions_list": {
        "fetch": {
            "all_args": [
                "SubscriptionName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_event_subscriptions([])",
            "method_name": "describe_event_subscriptions",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(EventSubscriptionsList)>",
        "result_key": "EventSubscriptionsList"
    },
    "redshift_events": {
        "fetch": {
            "all_args": [
                "SourceIdentifier",
                "SourceType",
                "StartTime",
                "EndTime",
                "Duration"
            ],
            "docstring": "redshift.describe_events([])",
            "method_name": "describe_events",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(EventList)>",
        "result_key": "Events"
    },
    "redshift_expiration": {
        "fetch": {
            "all_args": [
                "DbUser",
                "DbName",
                "ClusterIdentifier",
                "DurationSeconds",
                "AutoCreate",
                "DbGroups"
            ],
            "docstring": "redshift.get_cluster_credentials(['DbUser', 'ClusterIdentifier'])",
            "method_name": "get_cluster_credentials",
            "required_args": [
                "DbUser",
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(TStamp)>",
        "result_key": "Expiration"
    },
    "redshift_hsm_client_certificate": {
        "fetch": {
            "all_args": [
                "HsmClientCertificateIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_hsm_client_certificates([])",
            "method_name": "describe_hsm_client_certificates",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(HsmClientCertificate)>",
        "parametrize_id_source": [
            "HsmClientCertificateIdentifier"
        ],
        "result_key": "HsmClientCertificates"
    },
    "redshift_hsm_client_certificates": {
        "fetch": {
            "all_args": [
                "HsmClientCertificateIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_hsm_client_certificates([])",
            "method_name": "describe_hsm_client_certificates",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(HsmClientCertificateList)>",
        "result_key": "HsmClientCertificates"
    },
    "redshift_hsm_configuration": {
        "fetch": {
            "all_args": [
                "HsmConfigurationIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_hsm_configurations([])",
            "method_name": "describe_hsm_configurations",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(HsmConfiguration)>",
        "parametrize_id_source": [
            "HsmConfigurationIdentifier"
        ],
        "result_key": "HsmConfigurations"
    },
    "redshift_hsm_configurations": {
        "fetch": {
            "all_args": [
                "HsmConfigurationIdentifier",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_hsm_configurations([])",
            "method_name": "describe_hsm_configurations",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(HsmConfigurationList)>",
        "result_key": "HsmConfigurations"
    },
    "redshift_import_tables_completed": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ImportTablesCompleted)>",
        "result_key": "ImportTablesCompleted"
    },
    "redshift_import_tables_in_progress": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ImportTablesInProgress)>",
        "result_key": "ImportTablesInProgress"
    },
    "redshift_import_tables_not_started": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ImportTablesNotStarted)>",
        "result_key": "ImportTablesNotStarted"
    },
    "redshift_last_failure_message": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "LastFailureMessage"
    },
    "redshift_last_failure_time": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(TStamp)>",
        "result_key": "LastFailureTime"
    },
    "redshift_last_successful_delivery_time": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(TStamp)>",
        "result_key": "LastSuccessfulDeliveryTime"
    },
    "redshift_logging_enabled": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "LoggingEnabled"
    },
    "redshift_orderable_cluster_option": {
        "fetch": {
            "all_args": [
                "ClusterVersion",
                "NodeType"
            ],
            "docstring": "redshift.describe_orderable_cluster_options([])",
            "method_name": "describe_orderable_cluster_options",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(OrderableClusterOption)>",
        "parametrize_id_source": [
            "ClusterVersion"
        ],
        "result_key": "OrderableClusterOptions"
    },
    "redshift_orderable_cluster_options": {
        "fetch": {
            "all_args": [
                "ClusterVersion",
                "NodeType"
            ],
            "docstring": "redshift.describe_orderable_cluster_options([])",
            "method_name": "describe_orderable_cluster_options",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(OrderableClusterOptionsList)>",
        "result_key": "OrderableClusterOptions"
    },
    "redshift_parameter": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "Source"
            ],
            "docstring": "redshift.describe_cluster_parameters(['ParameterGroupName'])",
            "method_name": "describe_cluster_parameters",
            "required_args": [
                "ParameterGroupName"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Source"
        ],
        "result_key": "Parameters"
    },
    "redshift_parameter_groups": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_parameter_groups([])",
            "method_name": "describe_cluster_parameter_groups",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ParameterGroupList)>",
        "result_key": "ParameterGroups"
    },
    "redshift_parameters": {
        "fetch": {
            "all_args": [
                "ParameterGroupName",
                "Source"
            ],
            "docstring": "redshift.describe_cluster_parameters(['ParameterGroupName'])",
            "method_name": "describe_cluster_parameters",
            "required_args": [
                "ParameterGroupName"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ParametersList)>",
        "result_key": "Parameters"
    },
    "redshift_progress_in_mega_bytes": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(LongOptional)>",
        "result_key": "ProgressInMegaBytes"
    },
    "redshift_reserved_node": {
        "fetch": {
            "all_args": [
                "ReservedNodeId"
            ],
            "docstring": "redshift.describe_reserved_nodes([])",
            "method_name": "describe_reserved_nodes",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ReservedNode)>",
        "parametrize_id_source": [
            "ReservedNodeId"
        ],
        "result_key": "ReservedNodes"
    },
    "redshift_reserved_node_offering": {
        "fetch": {
            "all_args": [
                "ReservedNodeOfferingId"
            ],
            "docstring": "redshift.describe_reserved_node_offerings([])",
            "method_name": "describe_reserved_node_offerings",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(ReservedNodeOffering)>",
        "parametrize_id_source": [
            "ReservedNodeOfferingId"
        ],
        "result_key": "ReservedNodeOfferings"
    },
    "redshift_reserved_node_offerings": {
        "fetch": {
            "all_args": [
                "ReservedNodeOfferingId"
            ],
            "docstring": "redshift.describe_reserved_node_offerings([])",
            "method_name": "describe_reserved_node_offerings",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ReservedNodeOfferingList)>",
        "result_key": "ReservedNodeOfferings"
    },
    "redshift_reserved_nodes": {
        "fetch": {
            "all_args": [
                "ReservedNodeId"
            ],
            "docstring": "redshift.describe_reserved_nodes([])",
            "method_name": "describe_reserved_nodes",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(ReservedNodeList)>",
        "result_key": "ReservedNodes"
    },
    "redshift_s3_key_prefix": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_logging_status(['ClusterIdentifier'])",
            "method_name": "describe_logging_status",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "S3KeyPrefix"
    },
    "redshift_snapshot": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "SnapshotIdentifier",
                "SnapshotType",
                "StartTime",
                "EndTime",
                "OwnerAccount",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_snapshots([])",
            "method_name": "describe_cluster_snapshots",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(Snapshot)>",
        "parametrize_id_source": [
            "SnapshotIdentifier"
        ],
        "result_key": "Snapshots"
    },
    "redshift_snapshot_copy_grant": {
        "fetch": {
            "all_args": [
                "SnapshotCopyGrantName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_snapshot_copy_grants([])",
            "method_name": "describe_snapshot_copy_grants",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(SnapshotCopyGrant)>",
        "parametrize_id_source": [
            "SnapshotCopyGrantName"
        ],
        "result_key": "SnapshotCopyGrants"
    },
    "redshift_snapshot_copy_grants": {
        "fetch": {
            "all_args": [
                "SnapshotCopyGrantName",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_snapshot_copy_grants([])",
            "method_name": "describe_snapshot_copy_grants",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(SnapshotCopyGrantList)>",
        "result_key": "SnapshotCopyGrants"
    },
    "redshift_snapshots": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "SnapshotIdentifier",
                "SnapshotType",
                "StartTime",
                "EndTime",
                "OwnerAccount",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_cluster_snapshots([])",
            "method_name": "describe_cluster_snapshots",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(SnapshotList)>",
        "result_key": "Snapshots"
    },
    "redshift_status": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Status"
    },
    "redshift_string_from_describe_resize": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "ImportTablesNotStarted"
    },
    "redshift_table_restore_status": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "TableRestoreRequestId"
            ],
            "docstring": "redshift.describe_table_restore_status([])",
            "method_name": "describe_table_restore_status",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(TableRestoreStatus)>",
        "parametrize_id_source": [
            "TableRestoreRequestId"
        ],
        "result_key": "TableRestoreStatusDetails"
    },
    "redshift_table_restore_status_details": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier",
                "TableRestoreRequestId"
            ],
            "docstring": "redshift.describe_table_restore_status([])",
            "method_name": "describe_table_restore_status",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(TableRestoreStatusList)>",
        "result_key": "TableRestoreStatusDetails"
    },
    "redshift_tagged_resource": {
        "fetch": {
            "all_args": [
                "ResourceName",
                "ResourceType",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<StructureShape(TaggedResource)>",
        "parametrize_id_source": [
            "Tag"
        ],
        "result_key": "TaggedResources"
    },
    "redshift_tagged_resources": {
        "fetch": {
            "all_args": [
                "ResourceName",
                "ResourceType",
                "TagKeys",
                "TagValues"
            ],
            "docstring": "redshift.describe_tags([])",
            "method_name": "describe_tags",
            "required_args": [],
            "service_name": "redshift"
        },
        "output_shape": "<ListShape(TaggedResourceList)>",
        "result_key": "TaggedResources"
    },
    "redshift_target_cluster_type": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TargetClusterType"
    },
    "redshift_target_node_type": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "TargetNodeType"
    },
    "redshift_target_number_of_nodes": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(IntegerOptional)>",
        "result_key": "TargetNumberOfNodes"
    },
    "redshift_total_resize_data_in_mega_bytes": {
        "fetch": {
            "all_args": [
                "ClusterIdentifier"
            ],
            "docstring": "redshift.describe_resize(['ClusterIdentifier'])",
            "method_name": "describe_resize",
            "required_args": [
                "ClusterIdentifier"
            ],
            "service_name": "redshift"
        },
        "output_shape": "<Shape(LongOptional)>",
        "result_key": "TotalResizeDataInMegaBytes"
    },
    "rekognition_collection_id": {
        "fetch": {
            "all_args": [],
            "docstring": "rekognition.list_collections([])",
            "method_name": "list_collections",
            "required_args": [],
            "service_name": "rekognition"
        },
        "output_shape": "<StringShape(CollectionId)>",
        "parametrize_id_source": [
            "CollectionId"
        ],
        "result_key": "CollectionIds"
    },
    "rekognition_collection_ids": {
        "fetch": {
            "all_args": [],
            "docstring": "rekognition.list_collections([])",
            "method_name": "list_collections",
            "required_args": [],
            "service_name": "rekognition"
        },
        "output_shape": "<ListShape(CollectionIdList)>",
        "result_key": "CollectionIds"
    },
    "rekognition_face": {
        "fetch": {
            "all_args": [
                "CollectionId"
            ],
            "docstring": "rekognition.list_faces(['CollectionId'])",
            "method_name": "list_faces",
            "required_args": [
                "CollectionId"
            ],
            "service_name": "rekognition"
        },
        "output_shape": "<StructureShape(Face)>",
        "parametrize_id_source": [
            "FaceId"
        ],
        "result_key": "Faces"
    },
    "rekognition_faces": {
        "fetch": {
            "all_args": [
                "CollectionId"
            ],
            "docstring": "rekognition.list_faces(['CollectionId'])",
            "method_name": "list_faces",
            "required_args": [
                "CollectionId"
            ],
            "service_name": "rekognition"
        },
        "output_shape": "<ListShape(FaceList)>",
        "result_key": "Faces"
    },
    "rekognition_name": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "rekognition.get_celebrity_info(['Id'])",
            "method_name": "get_celebrity_info",
            "required_args": [
                "Id"
            ],
            "service_name": "rekognition"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "Name"
    },
    "rekognition_url": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "rekognition.get_celebrity_info(['Id'])",
            "method_name": "get_celebrity_info",
            "required_args": [
                "Id"
            ],
            "service_name": "rekognition"
        },
        "output_shape": "<StringShape(Url)>",
        "parametrize_id_source": [
            "Url"
        ],
        "result_key": "Urls"
    },
    "rekognition_urls": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "rekognition.get_celebrity_info(['Id'])",
            "method_name": "get_celebrity_info",
            "required_args": [
                "Id"
            ],
            "service_name": "rekognition"
        },
        "output_shape": "<ListShape(Urls)>",
        "result_key": "Urls"
    },
    "resourcegroupstaggingapi_resource_tag_mapping": {
        "fetch": {
            "all_args": [
                "TagFilters",
                "ResourcesPerPage",
                "TagsPerPage",
                "ResourceTypeFilters"
            ],
            "docstring": "resourcegroupstaggingapi.get_resources([])",
            "method_name": "get_resources",
            "required_args": [],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<StructureShape(ResourceTagMapping)>",
        "parametrize_id_source": [
            "Tags"
        ],
        "result_key": "ResourceTagMappingList"
    },
    "resourcegroupstaggingapi_resource_tag_mapping_list": {
        "fetch": {
            "all_args": [
                "TagFilters",
                "ResourcesPerPage",
                "TagsPerPage",
                "ResourceTypeFilters"
            ],
            "docstring": "resourcegroupstaggingapi.get_resources([])",
            "method_name": "get_resources",
            "required_args": [],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<ListShape(ResourceTagMappingList)>",
        "result_key": "ResourceTagMappingList"
    },
    "resourcegroupstaggingapi_tag_key": {
        "fetch": {
            "all_args": [],
            "docstring": "resourcegroupstaggingapi.get_tag_keys([])",
            "method_name": "get_tag_keys",
            "required_args": [],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<StringShape(TagKey)>",
        "parametrize_id_source": [
            "TagKey"
        ],
        "result_key": "TagKeys"
    },
    "resourcegroupstaggingapi_tag_keys": {
        "fetch": {
            "all_args": [],
            "docstring": "resourcegroupstaggingapi.get_tag_keys([])",
            "method_name": "get_tag_keys",
            "required_args": [],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<ListShape(TagKeyList)>",
        "result_key": "TagKeys"
    },
    "resourcegroupstaggingapi_tag_value": {
        "fetch": {
            "all_args": [
                "Key"
            ],
            "docstring": "resourcegroupstaggingapi.get_tag_values(['Key'])",
            "method_name": "get_tag_values",
            "required_args": [
                "Key"
            ],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<StringShape(TagValue)>",
        "parametrize_id_source": [
            "TagValue"
        ],
        "result_key": "TagValues"
    },
    "resourcegroupstaggingapi_tag_values": {
        "fetch": {
            "all_args": [
                "Key"
            ],
            "docstring": "resourcegroupstaggingapi.get_tag_values(['Key'])",
            "method_name": "get_tag_values",
            "required_args": [
                "Key"
            ],
            "service_name": "resourcegroupstaggingapi"
        },
        "output_shape": "<ListShape(TagValuesOutputList)>",
        "result_key": "TagValues"
    },
    "route53__vpcs_from_get_hosted_zone": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_hosted_zone(['Id'])",
            "method_name": "get_hosted_zone",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(VPCs)>",
        "result_key": "VPCs"
    },
    "route53__vpcs_from_list_vpc_association_authorizations": {
        "fetch": {
            "all_args": [
                "HostedZoneId"
            ],
            "docstring": "route53.list_vpc_association_authorizations(['HostedZoneId'])",
            "method_name": "list_vpc_association_authorizations",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(VPCs)>",
        "result_key": "VPCs"
    },
    "route53_change_info": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_change(['Id'])",
            "method_name": "get_change",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(ChangeInfo)>",
        "result_key": "ChangeInfo"
    },
    "route53_checker_ip_ranges": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.get_checker_ip_ranges([])",
            "method_name": "get_checker_ip_ranges",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(CheckerIpRanges)>",
        "result_key": "CheckerIpRanges"
    },
    "route53_delegation_set_from_get_hosted_zone": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_hosted_zone(['Id'])",
            "method_name": "get_hosted_zone",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(DelegationSet)>",
        "result_key": "DelegationSet"
    },
    "route53_delegation_set_from_get_reusable_delegation_set": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_reusable_delegation_set(['Id'])",
            "method_name": "get_reusable_delegation_set",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(DelegationSet)>",
        "result_key": "DelegationSet"
    },
    "route53_delegation_set_from_list_reusable_delegation_sets": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.list_reusable_delegation_sets([])",
            "method_name": "list_reusable_delegation_sets",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(DelegationSet)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "DelegationSets"
    },
    "route53_delegation_sets": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.list_reusable_delegation_sets([])",
            "method_name": "list_reusable_delegation_sets",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(DelegationSets)>",
        "result_key": "DelegationSets"
    },
    "route53_dns_name": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "DNSName"
    },
    "route53_geo_location_details_from_get_geo_location": {
        "fetch": {
            "all_args": [
                "ContinentCode",
                "CountryCode",
                "SubdivisionCode"
            ],
            "docstring": "route53.get_geo_location([])",
            "method_name": "get_geo_location",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(GeoLocationDetails)>",
        "result_key": "GeoLocationDetails"
    },
    "route53_geo_location_details_from_list_geo_locations": {
        "fetch": {
            "all_args": [
                "StartContinentCode",
                "StartCountryCode",
                "StartSubdivisionCode"
            ],
            "docstring": "route53.list_geo_locations([])",
            "method_name": "list_geo_locations",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(GeoLocationDetails)>",
        "parametrize_id_source": [
            "ContinentCode"
        ],
        "result_key": "GeoLocationDetailsList"
    },
    "route53_geo_location_details_list": {
        "fetch": {
            "all_args": [
                "StartContinentCode",
                "StartCountryCode",
                "StartSubdivisionCode"
            ],
            "docstring": "route53.list_geo_locations([])",
            "method_name": "list_geo_locations",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(GeoLocationDetailsList)>",
        "result_key": "GeoLocationDetailsList"
    },
    "route53_health_check_count": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.get_health_check_count([])",
            "method_name": "get_health_check_count",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<Shape(HealthCheckCount)>",
        "result_key": "HealthCheckCount"
    },
    "route53_health_check_from_get_health_check": {
        "fetch": {
            "all_args": [
                "HealthCheckId"
            ],
            "docstring": "route53.get_health_check(['HealthCheckId'])",
            "method_name": "get_health_check",
            "required_args": [
                "HealthCheckId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HealthCheck)>",
        "result_key": "HealthCheck"
    },
    "route53_health_check_from_list_health_checks": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.list_health_checks([])",
            "method_name": "list_health_checks",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HealthCheck)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "HealthChecks"
    },
    "route53_health_check_observation_from_get_health_check_last_failure_reason": {
        "fetch": {
            "all_args": [
                "HealthCheckId"
            ],
            "docstring": "route53.get_health_check_last_failure_reason(['HealthCheckId'])",
            "method_name": "get_health_check_last_failure_reason",
            "required_args": [
                "HealthCheckId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HealthCheckObservation)>",
        "parametrize_id_source": null,
        "result_key": "HealthCheckObservations"
    },
    "route53_health_check_observation_from_get_health_check_status": {
        "fetch": {
            "all_args": [
                "HealthCheckId"
            ],
            "docstring": "route53.get_health_check_status(['HealthCheckId'])",
            "method_name": "get_health_check_status",
            "required_args": [
                "HealthCheckId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HealthCheckObservation)>",
        "parametrize_id_source": null,
        "result_key": "HealthCheckObservations"
    },
    "route53_health_check_observations_from_get_health_check_last_failure_reason": {
        "fetch": {
            "all_args": [
                "HealthCheckId"
            ],
            "docstring": "route53.get_health_check_last_failure_reason(['HealthCheckId'])",
            "method_name": "get_health_check_last_failure_reason",
            "required_args": [
                "HealthCheckId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(HealthCheckObservations)>",
        "result_key": "HealthCheckObservations"
    },
    "route53_health_check_observations_from_get_health_check_status": {
        "fetch": {
            "all_args": [
                "HealthCheckId"
            ],
            "docstring": "route53.get_health_check_status(['HealthCheckId'])",
            "method_name": "get_health_check_status",
            "required_args": [
                "HealthCheckId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(HealthCheckObservations)>",
        "result_key": "HealthCheckObservations"
    },
    "route53_health_checks": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.list_health_checks([])",
            "method_name": "list_health_checks",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(HealthChecks)>",
        "result_key": "HealthChecks"
    },
    "route53_hosted_zone_count": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.get_hosted_zone_count([])",
            "method_name": "get_hosted_zone_count",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<Shape(HostedZoneCount)>",
        "result_key": "HostedZoneCount"
    },
    "route53_hosted_zone_from_get_hosted_zone": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_hosted_zone(['Id'])",
            "method_name": "get_hosted_zone",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HostedZone)>",
        "result_key": "HostedZone"
    },
    "route53_hosted_zone_from_list_hosted_zones": {
        "fetch": {
            "all_args": [
                "DelegationSetId"
            ],
            "docstring": "route53.list_hosted_zones([])",
            "method_name": "list_hosted_zones",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HostedZone)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "HostedZones"
    },
    "route53_hosted_zone_from_list_hosted_zones_by_name": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(HostedZone)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "HostedZones"
    },
    "route53_hosted_zone_id_from_list_hosted_zones_by_name": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceId)>",
        "result_key": "HostedZoneId"
    },
    "route53_hosted_zone_id_from_list_vpc_association_authorizations": {
        "fetch": {
            "all_args": [
                "HostedZoneId"
            ],
            "docstring": "route53.list_vpc_association_authorizations(['HostedZoneId'])",
            "method_name": "list_vpc_association_authorizations",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceId)>",
        "result_key": "HostedZoneId"
    },
    "route53_hosted_zone_id_marker_from_list_traffic_policy_instances": {
        "fetch": {
            "all_args": [
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances([])",
            "method_name": "list_traffic_policy_instances",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceId)>",
        "result_key": "HostedZoneIdMarker"
    },
    "route53_hosted_zone_id_marker_from_list_traffic_policy_instances_by_policy": {
        "fetch": {
            "all_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion",
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_policy(['TrafficPolicyId', 'TrafficPolicyVersion'])",
            "method_name": "list_traffic_policy_instances_by_policy",
            "required_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceId)>",
        "result_key": "HostedZoneIdMarker"
    },
    "route53_hosted_zones_from_list_hosted_zones": {
        "fetch": {
            "all_args": [
                "DelegationSetId"
            ],
            "docstring": "route53.list_hosted_zones([])",
            "method_name": "list_hosted_zones",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(HostedZones)>",
        "result_key": "HostedZones"
    },
    "route53_hosted_zones_from_list_hosted_zones_by_name": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(HostedZones)>",
        "result_key": "HostedZones"
    },
    "route53_ip_address_cidr": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.get_checker_ip_ranges([])",
            "method_name": "get_checker_ip_ranges",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(IPAddressCidr)>",
        "parametrize_id_source": [
            "IPAddressCidr"
        ],
        "result_key": "CheckerIpRanges"
    },
    "route53_next_continent_code": {
        "fetch": {
            "all_args": [
                "StartContinentCode",
                "StartCountryCode",
                "StartSubdivisionCode"
            ],
            "docstring": "route53.list_geo_locations([])",
            "method_name": "list_geo_locations",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(GeoLocationContinentCode)>",
        "result_key": "NextContinentCode"
    },
    "route53_next_country_code": {
        "fetch": {
            "all_args": [
                "StartContinentCode",
                "StartCountryCode",
                "StartSubdivisionCode"
            ],
            "docstring": "route53.list_geo_locations([])",
            "method_name": "list_geo_locations",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(GeoLocationCountryCode)>",
        "result_key": "NextCountryCode"
    },
    "route53_next_dns_name": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "NextDNSName"
    },
    "route53_next_hosted_zone_id": {
        "fetch": {
            "all_args": [
                "DNSName",
                "HostedZoneId"
            ],
            "docstring": "route53.list_hosted_zones_by_name([])",
            "method_name": "list_hosted_zones_by_name",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceId)>",
        "result_key": "NextHostedZoneId"
    },
    "route53_next_record_identifier": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "StartRecordName",
                "StartRecordType",
                "StartRecordIdentifier"
            ],
            "docstring": "route53.list_resource_record_sets(['HostedZoneId'])",
            "method_name": "list_resource_record_sets",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(ResourceRecordSetIdentifier)>",
        "result_key": "NextRecordIdentifier"
    },
    "route53_next_record_name": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "StartRecordName",
                "StartRecordType",
                "StartRecordIdentifier"
            ],
            "docstring": "route53.list_resource_record_sets(['HostedZoneId'])",
            "method_name": "list_resource_record_sets",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "NextRecordName"
    },
    "route53_next_record_type": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "StartRecordName",
                "StartRecordType",
                "StartRecordIdentifier"
            ],
            "docstring": "route53.list_resource_record_sets(['HostedZoneId'])",
            "method_name": "list_resource_record_sets",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(RRType)>",
        "result_key": "NextRecordType"
    },
    "route53_next_subdivision_code": {
        "fetch": {
            "all_args": [
                "StartContinentCode",
                "StartCountryCode",
                "StartSubdivisionCode"
            ],
            "docstring": "route53.list_geo_locations([])",
            "method_name": "list_geo_locations",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(GeoLocationSubdivisionCode)>",
        "result_key": "NextSubdivisionCode"
    },
    "route53_query_logging_config_from_get_query_logging_config": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_query_logging_config(['Id'])",
            "method_name": "get_query_logging_config",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(QueryLoggingConfig)>",
        "result_key": "QueryLoggingConfig"
    },
    "route53_query_logging_config_from_list_query_logging_configs": {
        "fetch": {
            "all_args": [
                "HostedZoneId"
            ],
            "docstring": "route53.list_query_logging_configs([])",
            "method_name": "list_query_logging_configs",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(QueryLoggingConfig)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "QueryLoggingConfigs"
    },
    "route53_query_logging_configs": {
        "fetch": {
            "all_args": [
                "HostedZoneId"
            ],
            "docstring": "route53.list_query_logging_configs([])",
            "method_name": "list_query_logging_configs",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(QueryLoggingConfigs)>",
        "result_key": "QueryLoggingConfigs"
    },
    "route53_resource_record_set": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "StartRecordName",
                "StartRecordType",
                "StartRecordIdentifier"
            ],
            "docstring": "route53.list_resource_record_sets(['HostedZoneId'])",
            "method_name": "list_resource_record_sets",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(ResourceRecordSet)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "ResourceRecordSets"
    },
    "route53_resource_record_sets": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "StartRecordName",
                "StartRecordType",
                "StartRecordIdentifier"
            ],
            "docstring": "route53.list_resource_record_sets(['HostedZoneId'])",
            "method_name": "list_resource_record_sets",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(ResourceRecordSets)>",
        "result_key": "ResourceRecordSets"
    },
    "route53_resource_tag_set_from_list_tags_for_resource": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId"
            ],
            "docstring": "route53.list_tags_for_resource(['ResourceType', 'ResourceId'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceType",
                "ResourceId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(ResourceTagSet)>",
        "result_key": "ResourceTagSet"
    },
    "route53_resource_tag_set_from_list_tags_for_resources": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceIds"
            ],
            "docstring": "route53.list_tags_for_resources(['ResourceType', 'ResourceIds'])",
            "method_name": "list_tags_for_resources",
            "required_args": [
                "ResourceType",
                "ResourceIds"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(ResourceTagSet)>",
        "parametrize_id_source": [
            "ResourceType"
        ],
        "result_key": "ResourceTagSets"
    },
    "route53_resource_tag_sets": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceIds"
            ],
            "docstring": "route53.list_tags_for_resources(['ResourceType', 'ResourceIds'])",
            "method_name": "list_tags_for_resources",
            "required_args": [
                "ResourceType",
                "ResourceIds"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(ResourceTagSetList)>",
        "result_key": "ResourceTagSets"
    },
    "route53_traffic_policies": {
        "fetch": {
            "all_args": [
                "Id",
                "TrafficPolicyVersionMarker"
            ],
            "docstring": "route53.list_traffic_policy_versions(['Id'])",
            "method_name": "list_traffic_policy_versions",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(TrafficPolicies)>",
        "result_key": "TrafficPolicies"
    },
    "route53_traffic_policy_from_get_traffic_policy": {
        "fetch": {
            "all_args": [
                "Id",
                "Version"
            ],
            "docstring": "route53.get_traffic_policy(['Id', 'Version'])",
            "method_name": "get_traffic_policy",
            "required_args": [
                "Id",
                "Version"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicy)>",
        "result_key": "TrafficPolicy"
    },
    "route53_traffic_policy_from_list_traffic_policy_versions": {
        "fetch": {
            "all_args": [
                "Id",
                "TrafficPolicyVersionMarker"
            ],
            "docstring": "route53.list_traffic_policy_versions(['Id'])",
            "method_name": "list_traffic_policy_versions",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicy)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TrafficPolicies"
    },
    "route53_traffic_policy_id_marker": {
        "fetch": {
            "all_args": [
                "TrafficPolicyIdMarker"
            ],
            "docstring": "route53.list_traffic_policies([])",
            "method_name": "list_traffic_policies",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(TrafficPolicyId)>",
        "result_key": "TrafficPolicyIdMarker"
    },
    "route53_traffic_policy_instance_count": {
        "fetch": {
            "all_args": [],
            "docstring": "route53.get_traffic_policy_instance_count([])",
            "method_name": "get_traffic_policy_instance_count",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<Shape(TrafficPolicyInstanceCount)>",
        "result_key": "TrafficPolicyInstanceCount"
    },
    "route53_traffic_policy_instance_from_get_traffic_policy_instance": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_traffic_policy_instance(['Id'])",
            "method_name": "get_traffic_policy_instance",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicyInstance)>",
        "result_key": "TrafficPolicyInstance"
    },
    "route53_traffic_policy_instance_from_list_traffic_policy_instances": {
        "fetch": {
            "all_args": [
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances([])",
            "method_name": "list_traffic_policy_instances",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicyInstance)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_instance_from_list_traffic_policy_instances_by_hosted_zone": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_hosted_zone(['HostedZoneId'])",
            "method_name": "list_traffic_policy_instances_by_hosted_zone",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicyInstance)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_instance_from_list_traffic_policy_instances_by_policy": {
        "fetch": {
            "all_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion",
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_policy(['TrafficPolicyId', 'TrafficPolicyVersion'])",
            "method_name": "list_traffic_policy_instances_by_policy",
            "required_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicyInstance)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_instance_name_marker_from_list_traffic_policy_instances": {
        "fetch": {
            "all_args": [
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances([])",
            "method_name": "list_traffic_policy_instances",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "TrafficPolicyInstanceNameMarker"
    },
    "route53_traffic_policy_instance_name_marker_from_list_traffic_policy_instances_by_hosted_zone": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_hosted_zone(['HostedZoneId'])",
            "method_name": "list_traffic_policy_instances_by_hosted_zone",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "TrafficPolicyInstanceNameMarker"
    },
    "route53_traffic_policy_instance_name_marker_from_list_traffic_policy_instances_by_policy": {
        "fetch": {
            "all_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion",
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_policy(['TrafficPolicyId', 'TrafficPolicyVersion'])",
            "method_name": "list_traffic_policy_instances_by_policy",
            "required_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(DNSName)>",
        "result_key": "TrafficPolicyInstanceNameMarker"
    },
    "route53_traffic_policy_instance_type_marker_from_list_traffic_policy_instances": {
        "fetch": {
            "all_args": [
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances([])",
            "method_name": "list_traffic_policy_instances",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(RRType)>",
        "result_key": "TrafficPolicyInstanceTypeMarker"
    },
    "route53_traffic_policy_instance_type_marker_from_list_traffic_policy_instances_by_hosted_zone": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_hosted_zone(['HostedZoneId'])",
            "method_name": "list_traffic_policy_instances_by_hosted_zone",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(RRType)>",
        "result_key": "TrafficPolicyInstanceTypeMarker"
    },
    "route53_traffic_policy_instance_type_marker_from_list_traffic_policy_instances_by_policy": {
        "fetch": {
            "all_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion",
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_policy(['TrafficPolicyId', 'TrafficPolicyVersion'])",
            "method_name": "list_traffic_policy_instances_by_policy",
            "required_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(RRType)>",
        "result_key": "TrafficPolicyInstanceTypeMarker"
    },
    "route53_traffic_policy_instances_from_list_traffic_policy_instances": {
        "fetch": {
            "all_args": [
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances([])",
            "method_name": "list_traffic_policy_instances",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(TrafficPolicyInstances)>",
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_instances_from_list_traffic_policy_instances_by_hosted_zone": {
        "fetch": {
            "all_args": [
                "HostedZoneId",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_hosted_zone(['HostedZoneId'])",
            "method_name": "list_traffic_policy_instances_by_hosted_zone",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(TrafficPolicyInstances)>",
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_instances_from_list_traffic_policy_instances_by_policy": {
        "fetch": {
            "all_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion",
                "HostedZoneIdMarker",
                "TrafficPolicyInstanceNameMarker",
                "TrafficPolicyInstanceTypeMarker"
            ],
            "docstring": "route53.list_traffic_policy_instances_by_policy(['TrafficPolicyId', 'TrafficPolicyVersion'])",
            "method_name": "list_traffic_policy_instances_by_policy",
            "required_args": [
                "TrafficPolicyId",
                "TrafficPolicyVersion"
            ],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(TrafficPolicyInstances)>",
        "result_key": "TrafficPolicyInstances"
    },
    "route53_traffic_policy_summaries": {
        "fetch": {
            "all_args": [
                "TrafficPolicyIdMarker"
            ],
            "docstring": "route53.list_traffic_policies([])",
            "method_name": "list_traffic_policies",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<ListShape(TrafficPolicySummaries)>",
        "result_key": "TrafficPolicySummaries"
    },
    "route53_traffic_policy_summary": {
        "fetch": {
            "all_args": [
                "TrafficPolicyIdMarker"
            ],
            "docstring": "route53.list_traffic_policies([])",
            "method_name": "list_traffic_policies",
            "required_args": [],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(TrafficPolicySummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TrafficPolicySummaries"
    },
    "route53_traffic_policy_version_marker": {
        "fetch": {
            "all_args": [
                "Id",
                "TrafficPolicyVersionMarker"
            ],
            "docstring": "route53.list_traffic_policy_versions(['Id'])",
            "method_name": "list_traffic_policy_versions",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StringShape(TrafficPolicyVersionMarker)>",
        "result_key": "TrafficPolicyVersionMarker"
    },
    "route53_vpc_from_get_hosted_zone": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "route53.get_hosted_zone(['Id'])",
            "method_name": "get_hosted_zone",
            "required_args": [
                "Id"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(VPC)>",
        "parametrize_id_source": [
            "VPCId"
        ],
        "result_key": "VPCs"
    },
    "route53_vpc_from_list_vpc_association_authorizations": {
        "fetch": {
            "all_args": [
                "HostedZoneId"
            ],
            "docstring": "route53.list_vpc_association_authorizations(['HostedZoneId'])",
            "method_name": "list_vpc_association_authorizations",
            "required_args": [
                "HostedZoneId"
            ],
            "service_name": "route53"
        },
        "output_shape": "<StructureShape(VPC)>",
        "parametrize_id_source": [
            "VPCId"
        ],
        "result_key": "VPCs"
    },
    "route53domains_abuse_contact_email": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(Email)>",
        "result_key": "AbuseContactEmail"
    },
    "route53domains_abuse_contact_phone": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(ContactNumber)>",
        "result_key": "AbuseContactPhone"
    },
    "route53domains_admin_contact": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(ContactDetail)>",
        "result_key": "AdminContact"
    },
    "route53domains_admin_privacy": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "AdminPrivacy"
    },
    "route53domains_auto_renew": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "AutoRenew"
    },
    "route53domains_creation_date": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "CreationDate"
    },
    "route53domains_dns_sec": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(DNSSec)>",
        "result_key": "DnsSec"
    },
    "route53domains_domain_name_from_get_contact_reachability_status": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "route53domains.get_contact_reachability_status([])",
            "method_name": "get_contact_reachability_status",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(DomainName)>",
        "result_key": "domainName"
    },
    "route53domains_domain_name_from_get_domain_detail": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(DomainName)>",
        "result_key": "DomainName"
    },
    "route53domains_domain_name_from_get_operation_detail": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(DomainName)>",
        "result_key": "DomainName"
    },
    "route53domains_domain_status": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(DomainStatus)>",
        "parametrize_id_source": [
            "DomainStatus"
        ],
        "result_key": "StatusList"
    },
    "route53domains_domain_suggestion": {
        "fetch": {
            "all_args": [
                "DomainName",
                "SuggestionCount",
                "OnlyAvailable"
            ],
            "docstring": "route53domains.get_domain_suggestions(['DomainName', 'SuggestionCount', 'OnlyAvailable'])",
            "method_name": "get_domain_suggestions",
            "required_args": [
                "DomainName",
                "SuggestionCount",
                "OnlyAvailable"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(DomainSuggestion)>",
        "parametrize_id_source": [
            "DomainName"
        ],
        "result_key": "SuggestionsList"
    },
    "route53domains_domain_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "route53domains.list_domains([])",
            "method_name": "list_domains",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(DomainSummary)>",
        "parametrize_id_source": null,
        "result_key": "Domains"
    },
    "route53domains_domains": {
        "fetch": {
            "all_args": [],
            "docstring": "route53domains.list_domains([])",
            "method_name": "list_domains",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(DomainSummaryList)>",
        "result_key": "Domains"
    },
    "route53domains_expiration_date": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "ExpirationDate"
    },
    "route53domains_message": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(ErrorMessage)>",
        "result_key": "Message"
    },
    "route53domains_nameserver": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(Nameserver)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Nameservers"
    },
    "route53domains_nameservers": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(NameserverList)>",
        "result_key": "Nameservers"
    },
    "route53domains_operation_id": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(OperationId)>",
        "result_key": "OperationId"
    },
    "route53domains_operation_summary": {
        "fetch": {
            "all_args": [],
            "docstring": "route53domains.list_operations([])",
            "method_name": "list_operations",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(OperationSummary)>",
        "parametrize_id_source": [
            "OperationId"
        ],
        "result_key": "Operations"
    },
    "route53domains_operations": {
        "fetch": {
            "all_args": [],
            "docstring": "route53domains.list_operations([])",
            "method_name": "list_operations",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(OperationSummaryList)>",
        "result_key": "Operations"
    },
    "route53domains_registrant_contact": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(ContactDetail)>",
        "result_key": "RegistrantContact"
    },
    "route53domains_registrant_privacy": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "RegistrantPrivacy"
    },
    "route53domains_registrar_name": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(RegistrarName)>",
        "result_key": "RegistrarName"
    },
    "route53domains_registrar_url": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(RegistrarUrl)>",
        "result_key": "RegistrarUrl"
    },
    "route53domains_registry_domain_id": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(RegistryDomainId)>",
        "result_key": "RegistryDomainId"
    },
    "route53domains_reseller": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(Reseller)>",
        "result_key": "Reseller"
    },
    "route53domains_status_from_get_contact_reachability_status": {
        "fetch": {
            "all_args": [
                "domainName"
            ],
            "docstring": "route53domains.get_contact_reachability_status([])",
            "method_name": "get_contact_reachability_status",
            "required_args": [],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(ReachabilityStatus)>",
        "result_key": "status"
    },
    "route53domains_status_from_get_operation_detail": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(OperationStatus)>",
        "result_key": "Status"
    },
    "route53domains_status_list": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(DomainStatusList)>",
        "result_key": "StatusList"
    },
    "route53domains_submitted_date": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "SubmittedDate"
    },
    "route53domains_suggestions_list": {
        "fetch": {
            "all_args": [
                "DomainName",
                "SuggestionCount",
                "OnlyAvailable"
            ],
            "docstring": "route53domains.get_domain_suggestions(['DomainName', 'SuggestionCount', 'OnlyAvailable'])",
            "method_name": "get_domain_suggestions",
            "required_args": [
                "DomainName",
                "SuggestionCount",
                "OnlyAvailable"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(DomainSuggestionsList)>",
        "result_key": "SuggestionsList"
    },
    "route53domains_tag": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.list_tags_for_domain(['DomainName'])",
            "method_name": "list_tags_for_domain",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "route53domains_tag_list": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.list_tags_for_domain(['DomainName'])",
            "method_name": "list_tags_for_domain",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "route53domains_tech_contact": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StructureShape(ContactDetail)>",
        "result_key": "TechContact"
    },
    "route53domains_tech_privacy": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Boolean)>",
        "result_key": "TechPrivacy"
    },
    "route53domains_type": {
        "fetch": {
            "all_args": [
                "OperationId"
            ],
            "docstring": "route53domains.get_operation_detail(['OperationId'])",
            "method_name": "get_operation_detail",
            "required_args": [
                "OperationId"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(OperationType)>",
        "result_key": "Type"
    },
    "route53domains_updated_date": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "UpdatedDate"
    },
    "route53domains_who_is_server": {
        "fetch": {
            "all_args": [
                "DomainName"
            ],
            "docstring": "route53domains.get_domain_detail(['DomainName'])",
            "method_name": "get_domain_detail",
            "required_args": [
                "DomainName"
            ],
            "service_name": "route53domains"
        },
        "output_shape": "<StringShape(RegistrarWhoIsServer)>",
        "result_key": "WhoIsServer"
    },
    "s3_abort_date": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(AbortDate)>",
        "result_key": "AbortDate"
    },
    "s3_abort_rule_id": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(AbortRuleId)>",
        "result_key": "AbortRuleId"
    },
    "s3_accept_ranges": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(AcceptRanges)>",
        "result_key": "AcceptRanges"
    },
    "s3_analytics_configuration_from_get_bucket_analytics_configuration": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Id"
            ],
            "docstring": "s3.get_bucket_analytics_configuration(['Bucket', 'Id'])",
            "method_name": "get_bucket_analytics_configuration",
            "required_args": [
                "Bucket",
                "Id"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(AnalyticsConfiguration)>",
        "result_key": "AnalyticsConfiguration"
    },
    "s3_analytics_configuration_from_list_bucket_analytics_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_analytics_configurations(['Bucket'])",
            "method_name": "list_bucket_analytics_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(AnalyticsConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "AnalyticsConfigurationList"
    },
    "s3_analytics_configuration_list": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_analytics_configurations(['Bucket'])",
            "method_name": "list_bucket_analytics_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(AnalyticsConfigurationList)>",
        "result_key": "AnalyticsConfigurationList"
    },
    "s3_body_from_get_object": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(Body)>",
        "result_key": "Body"
    },
    "s3_body_from_get_object_torrent": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_torrent(['Bucket', 'Key'])",
            "method_name": "get_object_torrent",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(Body)>",
        "result_key": "Body"
    },
    "s3_bucket_from_list_buckets": {
        "fetch": {
            "all_args": [],
            "docstring": "s3.list_buckets([])",
            "method_name": "list_buckets",
            "required_args": [],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Bucket)>",
        "parametrize_id_source": null,
        "result_key": "Buckets"
    },
    "s3_bucket_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketName)>",
        "result_key": "Bucket"
    },
    "s3_bucket_from_list_parts": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketName)>",
        "result_key": "Bucket"
    },
    "s3_buckets": {
        "fetch": {
            "all_args": [],
            "docstring": "s3.list_buckets([])",
            "method_name": "list_buckets",
            "required_args": [],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(Buckets)>",
        "result_key": "Buckets"
    },
    "s3_cache_control": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(CacheControl)>",
        "result_key": "CacheControl"
    },
    "s3_cloud_function_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification(['Bucket'])",
            "method_name": "get_bucket_notification",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CloudFunctionConfiguration)>",
        "result_key": "CloudFunctionConfiguration"
    },
    "s3_common_prefix_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CommonPrefix)>",
        "parametrize_id_source": [
            "Prefix"
        ],
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefix_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CommonPrefix)>",
        "parametrize_id_source": [
            "Prefix"
        ],
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefix_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CommonPrefix)>",
        "parametrize_id_source": [
            "Prefix"
        ],
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefix_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CommonPrefix)>",
        "parametrize_id_source": [
            "Prefix"
        ],
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefixes_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(CommonPrefixList)>",
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefixes_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(CommonPrefixList)>",
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefixes_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(CommonPrefixList)>",
        "result_key": "CommonPrefixes"
    },
    "s3_common_prefixes_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(CommonPrefixList)>",
        "result_key": "CommonPrefixes"
    },
    "s3_content_disposition": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ContentDisposition)>",
        "result_key": "ContentDisposition"
    },
    "s3_content_encoding": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ContentEncoding)>",
        "result_key": "ContentEncoding"
    },
    "s3_content_language": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ContentLanguage)>",
        "result_key": "ContentLanguage"
    },
    "s3_content_length": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(ContentLength)>",
        "result_key": "ContentLength"
    },
    "s3_content_range": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ContentRange)>",
        "result_key": "ContentRange"
    },
    "s3_content_type": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ContentType)>",
        "result_key": "ContentType"
    },
    "s3_contents_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(ObjectList)>",
        "result_key": "Contents"
    },
    "s3_contents_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(ObjectList)>",
        "result_key": "Contents"
    },
    "s3_cors_rule": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_cors(['Bucket'])",
            "method_name": "get_bucket_cors",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(CORSRule)>",
        "parametrize_id_source": null,
        "result_key": "CORSRules"
    },
    "s3_cors_rules": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_cors(['Bucket'])",
            "method_name": "get_bucket_cors",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(CORSRules)>",
        "result_key": "CORSRules"
    },
    "s3_delete_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(DeleteMarker)>",
        "result_key": "DeleteMarker"
    },
    "s3_delete_marker_entry": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(DeleteMarkerEntry)>",
        "parametrize_id_source": [
            "Key"
        ],
        "result_key": "DeleteMarkers"
    },
    "s3_delete_markers": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(DeleteMarkers)>",
        "result_key": "DeleteMarkers"
    },
    "s3_delimiter_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Delimiter)>",
        "result_key": "Delimiter"
    },
    "s3_delimiter_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Delimiter)>",
        "result_key": "Delimiter"
    },
    "s3_delimiter_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Delimiter)>",
        "result_key": "Delimiter"
    },
    "s3_delimiter_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Delimiter)>",
        "result_key": "Delimiter"
    },
    "s3_e_tag": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ETag)>",
        "result_key": "ETag"
    },
    "s3_encoding_type_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(EncodingType)>",
        "result_key": "EncodingType"
    },
    "s3_encoding_type_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(EncodingType)>",
        "result_key": "EncodingType"
    },
    "s3_encoding_type_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(EncodingType)>",
        "result_key": "EncodingType"
    },
    "s3_encoding_type_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(EncodingType)>",
        "result_key": "EncodingType"
    },
    "s3_error_document": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_website(['Bucket'])",
            "method_name": "get_bucket_website",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(ErrorDocument)>",
        "result_key": "ErrorDocument"
    },
    "s3_expiration": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Expiration)>",
        "result_key": "Expiration"
    },
    "s3_expires": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(Expires)>",
        "result_key": "Expires"
    },
    "s3_grant_from_get_bucket_acl": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_acl(['Bucket'])",
            "method_name": "get_bucket_acl",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Grant)>",
        "parametrize_id_source": null,
        "result_key": "Grants"
    },
    "s3_grant_from_get_object_acl": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_acl(['Bucket', 'Key'])",
            "method_name": "get_object_acl",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Grant)>",
        "parametrize_id_source": null,
        "result_key": "Grants"
    },
    "s3_grants_from_get_bucket_acl": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_acl(['Bucket'])",
            "method_name": "get_bucket_acl",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(Grants)>",
        "result_key": "Grants"
    },
    "s3_grants_from_get_object_acl": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_acl(['Bucket', 'Key'])",
            "method_name": "get_object_acl",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(Grants)>",
        "result_key": "Grants"
    },
    "s3_index_document": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_website(['Bucket'])",
            "method_name": "get_bucket_website",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(IndexDocument)>",
        "result_key": "IndexDocument"
    },
    "s3_initiator": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Initiator)>",
        "result_key": "Initiator"
    },
    "s3_inventory_configuration_from_get_bucket_inventory_configuration": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Id"
            ],
            "docstring": "s3.get_bucket_inventory_configuration(['Bucket', 'Id'])",
            "method_name": "get_bucket_inventory_configuration",
            "required_args": [
                "Bucket",
                "Id"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(InventoryConfiguration)>",
        "result_key": "InventoryConfiguration"
    },
    "s3_inventory_configuration_from_list_bucket_inventory_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_inventory_configurations(['Bucket'])",
            "method_name": "list_bucket_inventory_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(InventoryConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "InventoryConfigurationList"
    },
    "s3_inventory_configuration_list": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_inventory_configurations(['Bucket'])",
            "method_name": "list_bucket_inventory_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(InventoryConfigurationList)>",
        "result_key": "InventoryConfigurationList"
    },
    "s3_key": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ObjectKey)>",
        "result_key": "Key"
    },
    "s3_key_count": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(KeyCount)>",
        "result_key": "KeyCount"
    },
    "s3_key_marker_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(KeyMarker)>",
        "result_key": "KeyMarker"
    },
    "s3_key_marker_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(KeyMarker)>",
        "result_key": "KeyMarker"
    },
    "s3_lambda_function_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(LambdaFunctionConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "LambdaFunctionConfigurations"
    },
    "s3_lambda_function_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(LambdaFunctionConfigurationList)>",
        "result_key": "LambdaFunctionConfigurations"
    },
    "s3_last_modified": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(LastModified)>",
        "result_key": "LastModified"
    },
    "s3_lifecycle_rule": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_lifecycle_configuration(['Bucket'])",
            "method_name": "get_bucket_lifecycle_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(LifecycleRule)>",
        "parametrize_id_source": [
            "ID"
        ],
        "result_key": "Rules"
    },
    "s3_location_constraint": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_location(['Bucket'])",
            "method_name": "get_bucket_location",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketLocationConstraint)>",
        "result_key": "LocationConstraint"
    },
    "s3_logging_enabled": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_logging(['Bucket'])",
            "method_name": "get_bucket_logging",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(LoggingEnabled)>",
        "result_key": "LoggingEnabled"
    },
    "s3_metadata": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<MapShape(Metadata)>",
        "result_key": "Metadata"
    },
    "s3_metrics_configuration_from_get_bucket_metrics_configuration": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Id"
            ],
            "docstring": "s3.get_bucket_metrics_configuration(['Bucket', 'Id'])",
            "method_name": "get_bucket_metrics_configuration",
            "required_args": [
                "Bucket",
                "Id"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(MetricsConfiguration)>",
        "result_key": "MetricsConfiguration"
    },
    "s3_metrics_configuration_from_list_bucket_metrics_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_metrics_configurations(['Bucket'])",
            "method_name": "list_bucket_metrics_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(MetricsConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "MetricsConfigurationList"
    },
    "s3_metrics_configuration_list": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.list_bucket_metrics_configurations(['Bucket'])",
            "method_name": "list_bucket_metrics_configurations",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(MetricsConfigurationList)>",
        "result_key": "MetricsConfigurationList"
    },
    "s3_mfa_delete": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_versioning(['Bucket'])",
            "method_name": "get_bucket_versioning",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(MFADeleteStatus)>",
        "result_key": "MFADelete"
    },
    "s3_missing_meta": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(MissingMeta)>",
        "result_key": "MissingMeta"
    },
    "s3_multipart_upload": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(MultipartUpload)>",
        "parametrize_id_source": [
            "UploadId"
        ],
        "result_key": "Uploads"
    },
    "s3_name_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketName)>",
        "result_key": "Name"
    },
    "s3_name_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketName)>",
        "result_key": "Name"
    },
    "s3_name_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketName)>",
        "result_key": "Name"
    },
    "s3_next_key_marker_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(NextKeyMarker)>",
        "result_key": "NextKeyMarker"
    },
    "s3_next_key_marker_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(NextKeyMarker)>",
        "result_key": "NextKeyMarker"
    },
    "s3_next_part_number_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(NextPartNumberMarker)>",
        "result_key": "NextPartNumberMarker"
    },
    "s3_next_version_id_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(NextVersionIdMarker)>",
        "result_key": "NextVersionIdMarker"
    },
    "s3_object_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Object)>",
        "parametrize_id_source": null,
        "result_key": "Contents"
    },
    "s3_object_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Object)>",
        "parametrize_id_source": [
            "Owner"
        ],
        "result_key": "Contents"
    },
    "s3_object_version": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(ObjectVersion)>",
        "parametrize_id_source": [
            "Key"
        ],
        "result_key": "Versions"
    },
    "s3_owner_from_get_bucket_acl": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_acl(['Bucket'])",
            "method_name": "get_bucket_acl",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Owner)>",
        "result_key": "Owner"
    },
    "s3_owner_from_get_object_acl": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_acl(['Bucket', 'Key'])",
            "method_name": "get_object_acl",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Owner)>",
        "result_key": "Owner"
    },
    "s3_owner_from_list_buckets": {
        "fetch": {
            "all_args": [],
            "docstring": "s3.list_buckets([])",
            "method_name": "list_buckets",
            "required_args": [],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Owner)>",
        "result_key": "Owner"
    },
    "s3_owner_from_list_parts": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Owner)>",
        "result_key": "Owner"
    },
    "s3_part": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Part)>",
        "parametrize_id_source": [
            "PartNumber"
        ],
        "result_key": "Parts"
    },
    "s3_part_number_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(PartNumberMarker)>",
        "result_key": "PartNumberMarker"
    },
    "s3_parts": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(Parts)>",
        "result_key": "Parts"
    },
    "s3_parts_count": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(PartsCount)>",
        "result_key": "PartsCount"
    },
    "s3_payer": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_request_payment(['Bucket'])",
            "method_name": "get_bucket_request_payment",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Payer)>",
        "result_key": "Payer"
    },
    "s3_policy": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_policy(['Bucket'])",
            "method_name": "get_bucket_policy",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Policy)>",
        "result_key": "Policy"
    },
    "s3_prefix_from_list_multipart_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Prefix)>",
        "result_key": "Prefix"
    },
    "s3_prefix_from_list_object_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Prefix)>",
        "result_key": "Prefix"
    },
    "s3_prefix_from_list_objects": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects(['Bucket'])",
            "method_name": "list_objects",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Prefix)>",
        "result_key": "Prefix"
    },
    "s3_prefix_from_list_objects_v2": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Prefix)>",
        "result_key": "Prefix"
    },
    "s3_queue_configuration_from_get_bucket_notification": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification(['Bucket'])",
            "method_name": "get_bucket_notification",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(QueueConfigurationDeprecated)>",
        "result_key": "QueueConfiguration"
    },
    "s3_queue_configuration_from_get_bucket_notification_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(QueueConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "QueueConfigurations"
    },
    "s3_queue_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(QueueConfigurationList)>",
        "result_key": "QueueConfigurations"
    },
    "s3_redirect_all_requests_to": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_website(['Bucket'])",
            "method_name": "get_bucket_website",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(RedirectAllRequestsTo)>",
        "result_key": "RedirectAllRequestsTo"
    },
    "s3_replication_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_replication(['Bucket'])",
            "method_name": "get_bucket_replication",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(ReplicationConfiguration)>",
        "result_key": "ReplicationConfiguration"
    },
    "s3_replication_status": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ReplicationStatus)>",
        "result_key": "ReplicationStatus"
    },
    "s3_request_charged_from_get_object": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(RequestCharged)>",
        "result_key": "RequestCharged"
    },
    "s3_request_charged_from_get_object_acl": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_acl(['Bucket', 'Key'])",
            "method_name": "get_object_acl",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(RequestCharged)>",
        "result_key": "RequestCharged"
    },
    "s3_request_charged_from_get_object_torrent": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "RequestPayer"
            ],
            "docstring": "s3.get_object_torrent(['Bucket', 'Key'])",
            "method_name": "get_object_torrent",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(RequestCharged)>",
        "result_key": "RequestCharged"
    },
    "s3_request_charged_from_list_parts": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(RequestCharged)>",
        "result_key": "RequestCharged"
    },
    "s3_restore": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(Restore)>",
        "result_key": "Restore"
    },
    "s3_routing_rule": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_website(['Bucket'])",
            "method_name": "get_bucket_website",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(RoutingRule)>",
        "parametrize_id_source": null,
        "result_key": "RoutingRules"
    },
    "s3_routing_rules": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_website(['Bucket'])",
            "method_name": "get_bucket_website",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(RoutingRules)>",
        "result_key": "RoutingRules"
    },
    "s3_rule": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_lifecycle(['Bucket'])",
            "method_name": "get_bucket_lifecycle",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Rule)>",
        "parametrize_id_source": [
            "ID"
        ],
        "result_key": "Rules"
    },
    "s3_rules_from_get_bucket_lifecycle": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_lifecycle(['Bucket'])",
            "method_name": "get_bucket_lifecycle",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(Rules)>",
        "result_key": "Rules"
    },
    "s3_rules_from_get_bucket_lifecycle_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_lifecycle_configuration(['Bucket'])",
            "method_name": "get_bucket_lifecycle_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(LifecycleRules)>",
        "result_key": "Rules"
    },
    "s3_server_side_encryption": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ServerSideEncryption)>",
        "result_key": "ServerSideEncryption"
    },
    "s3_sse_customer_algorithm": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(SSECustomerAlgorithm)>",
        "result_key": "SSECustomerAlgorithm"
    },
    "s3_sse_customer_key_md5": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(SSECustomerKeyMD5)>",
        "result_key": "SSECustomerKeyMD5"
    },
    "s3_ssekms_key_id": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(SSEKMSKeyId)>",
        "result_key": "SSEKMSKeyId"
    },
    "s3_start_after": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "Prefix",
                "FetchOwner",
                "StartAfter",
                "RequestPayer"
            ],
            "docstring": "s3.list_objects_v2(['Bucket'])",
            "method_name": "list_objects_v2",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(StartAfter)>",
        "result_key": "StartAfter"
    },
    "s3_status_from_get_bucket_accelerate_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_accelerate_configuration(['Bucket'])",
            "method_name": "get_bucket_accelerate_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketAccelerateStatus)>",
        "result_key": "Status"
    },
    "s3_status_from_get_bucket_versioning": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_versioning(['Bucket'])",
            "method_name": "get_bucket_versioning",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(BucketVersioningStatus)>",
        "result_key": "Status"
    },
    "s3_storage_class_from_get_object": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(StorageClass)>",
        "result_key": "StorageClass"
    },
    "s3_storage_class_from_list_parts": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(StorageClass)>",
        "result_key": "StorageClass"
    },
    "s3_tag_count": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<Shape(TagCount)>",
        "result_key": "TagCount"
    },
    "s3_tag_from_get_bucket_tagging": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_tagging(['Bucket'])",
            "method_name": "get_bucket_tagging",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagSet"
    },
    "s3_tag_from_get_object_tagging": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId"
            ],
            "docstring": "s3.get_object_tagging(['Bucket', 'Key'])",
            "method_name": "get_object_tagging",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": [
            "Key"
        ],
        "result_key": "TagSet"
    },
    "s3_tag_set_from_get_bucket_tagging": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_tagging(['Bucket'])",
            "method_name": "get_bucket_tagging",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(TagSet)>",
        "result_key": "TagSet"
    },
    "s3_tag_set_from_get_object_tagging": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId"
            ],
            "docstring": "s3.get_object_tagging(['Bucket', 'Key'])",
            "method_name": "get_object_tagging",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(TagSet)>",
        "result_key": "TagSet"
    },
    "s3_topic_configuration_from_get_bucket_notification": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification(['Bucket'])",
            "method_name": "get_bucket_notification",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(TopicConfigurationDeprecated)>",
        "result_key": "TopicConfiguration"
    },
    "s3_topic_configuration_from_get_bucket_notification_configuration": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StructureShape(TopicConfiguration)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TopicConfigurations"
    },
    "s3_topic_configurations": {
        "fetch": {
            "all_args": [
                "Bucket"
            ],
            "docstring": "s3.get_bucket_notification_configuration(['Bucket'])",
            "method_name": "get_bucket_notification_configuration",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(TopicConfigurationList)>",
        "result_key": "TopicConfigurations"
    },
    "s3_upload_id": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "PartNumberMarker",
                "UploadId",
                "RequestPayer"
            ],
            "docstring": "s3.list_parts(['Bucket', 'Key', 'UploadId'])",
            "method_name": "list_parts",
            "required_args": [
                "Bucket",
                "Key",
                "UploadId"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(MultipartUploadId)>",
        "result_key": "UploadId"
    },
    "s3_upload_id_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(UploadIdMarker)>",
        "result_key": "UploadIdMarker"
    },
    "s3_uploads": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "UploadIdMarker"
            ],
            "docstring": "s3.list_multipart_uploads(['Bucket'])",
            "method_name": "list_multipart_uploads",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(MultipartUploadList)>",
        "result_key": "Uploads"
    },
    "s3_version_id_from_get_object": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ObjectVersionId)>",
        "result_key": "VersionId"
    },
    "s3_version_id_from_get_object_tagging": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Key",
                "VersionId"
            ],
            "docstring": "s3.get_object_tagging(['Bucket', 'Key'])",
            "method_name": "get_object_tagging",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(ObjectVersionId)>",
        "result_key": "VersionId"
    },
    "s3_version_id_marker": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(VersionIdMarker)>",
        "result_key": "VersionIdMarker"
    },
    "s3_versions": {
        "fetch": {
            "all_args": [
                "Bucket",
                "Delimiter",
                "EncodingType",
                "KeyMarker",
                "Prefix",
                "VersionIdMarker"
            ],
            "docstring": "s3.list_object_versions(['Bucket'])",
            "method_name": "list_object_versions",
            "required_args": [
                "Bucket"
            ],
            "service_name": "s3"
        },
        "output_shape": "<ListShape(ObjectVersionList)>",
        "result_key": "Versions"
    },
    "s3_website_redirect_location": {
        "fetch": {
            "all_args": [
                "Bucket",
                "IfMatch",
                "IfModifiedSince",
                "IfNoneMatch",
                "IfUnmodifiedSince",
                "Key",
                "Range",
                "ResponseCacheControl",
                "ResponseContentDisposition",
                "ResponseContentEncoding",
                "ResponseContentLanguage",
                "ResponseContentType",
                "ResponseExpires",
                "VersionId",
                "SSECustomerAlgorithm",
                "SSECustomerKey",
                "SSECustomerKeyMD5",
                "RequestPayer",
                "PartNumber"
            ],
            "docstring": "s3.get_object(['Bucket', 'Key'])",
            "method_name": "get_object",
            "required_args": [
                "Bucket",
                "Key"
            ],
            "service_name": "s3"
        },
        "output_shape": "<StringShape(WebsiteRedirectLocation)>",
        "result_key": "WebsiteRedirectLocation"
    },
    "sdb_attribute": {
        "fetch": {
            "all_args": [
                "DomainName",
                "ItemName",
                "AttributeNames",
                "ConsistentRead"
            ],
            "docstring": "sdb.get_attributes(['DomainName', 'ItemName'])",
            "method_name": "get_attributes",
            "required_args": [
                "DomainName",
                "ItemName"
            ],
            "service_name": "sdb"
        },
        "output_shape": "<StructureShape(Attribute)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Attributes"
    },
    "sdb_attributes": {
        "fetch": {
            "all_args": [
                "DomainName",
                "ItemName",
                "AttributeNames",
                "ConsistentRead"
            ],
            "docstring": "sdb.get_attributes(['DomainName', 'ItemName'])",
            "method_name": "get_attributes",
            "required_args": [
                "DomainName",
                "ItemName"
            ],
            "service_name": "sdb"
        },
        "output_shape": "<ListShape(AttributeList)>",
        "result_key": "Attributes"
    },
    "sdb_domain_names": {
        "fetch": {
            "all_args": [],
            "docstring": "sdb.list_domains([])",
            "method_name": "list_domains",
            "required_args": [],
            "service_name": "sdb"
        },
        "output_shape": "<ListShape(DomainNameList)>",
        "result_key": "DomainNames"
    },
    "sdb_string": {
        "fetch": {
            "all_args": [],
            "docstring": "sdb.list_domains([])",
            "method_name": "list_domains",
            "required_args": [],
            "service_name": "sdb"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "DomainNames"
    },
    "servicecatalog_account_id": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId"
            ],
            "docstring": "servicecatalog.list_portfolio_access(['PortfolioId'])",
            "method_name": "list_portfolio_access",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(AccountId)>",
        "parametrize_id_source": [
            "AccountId"
        ],
        "result_key": "AccountIds"
    },
    "servicecatalog_account_ids": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId"
            ],
            "docstring": "servicecatalog.list_portfolio_access(['PortfolioId'])",
            "method_name": "list_portfolio_access",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(AccountIds)>",
        "result_key": "AccountIds"
    },
    "servicecatalog_constraint_detail_from_describe_constraint": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_constraint(['Id'])",
            "method_name": "describe_constraint",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ConstraintDetail)>",
        "result_key": "ConstraintDetail"
    },
    "servicecatalog_constraint_detail_from_list_constraints_for_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId",
                "ProductId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_constraints_for_portfolio(['PortfolioId'])",
            "method_name": "list_constraints_for_portfolio",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ConstraintDetail)>",
        "parametrize_id_source": [
            "ConstraintId"
        ],
        "result_key": "ConstraintDetails"
    },
    "servicecatalog_constraint_details": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId",
                "ProductId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_constraints_for_portfolio(['PortfolioId'])",
            "method_name": "list_constraints_for_portfolio",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ConstraintDetails)>",
        "result_key": "ConstraintDetails"
    },
    "servicecatalog_constraint_parameters": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_constraint(['Id'])",
            "method_name": "describe_constraint",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(ConstraintParameters)>",
        "result_key": "ConstraintParameters"
    },
    "servicecatalog_constraint_summaries": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ConstraintSummaries)>",
        "result_key": "ConstraintSummaries"
    },
    "servicecatalog_constraint_summary": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ConstraintSummary)>",
        "parametrize_id_source": null,
        "result_key": "ConstraintSummaries"
    },
    "servicecatalog_copy_product_status": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "CopyProductToken"
            ],
            "docstring": "servicecatalog.describe_copy_product_status(['CopyProductToken'])",
            "method_name": "describe_copy_product_status",
            "required_args": [
                "CopyProductToken"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(CopyProductStatus)>",
        "result_key": "CopyProductStatus"
    },
    "servicecatalog_info": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProvisioningArtifactId",
                "ProductId",
                "Verbose"
            ],
            "docstring": "servicecatalog.describe_provisioning_artifact(['ProvisioningArtifactId', 'ProductId'])",
            "method_name": "describe_provisioning_artifact",
            "required_args": [
                "ProvisioningArtifactId",
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<MapShape(ProvisioningArtifactInfo)>",
        "result_key": "Info"
    },
    "servicecatalog_launch_path_summaries": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_launch_paths(['ProductId'])",
            "method_name": "list_launch_paths",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(LaunchPathSummaries)>",
        "result_key": "LaunchPathSummaries"
    },
    "servicecatalog_launch_path_summary": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_launch_paths(['ProductId'])",
            "method_name": "list_launch_paths",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(LaunchPathSummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "LaunchPathSummaries"
    },
    "servicecatalog_page_token_from_list_resources_for_tag_option": {
        "fetch": {
            "all_args": [
                "TagOptionId",
                "ResourceType",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_resources_for_tag_option(['TagOptionId'])",
            "method_name": "list_resources_for_tag_option",
            "required_args": [
                "TagOptionId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(PageToken)>",
        "result_key": "PageToken"
    },
    "servicecatalog_page_token_from_list_tag_options": {
        "fetch": {
            "all_args": [
                "Filters",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_tag_options([])",
            "method_name": "list_tag_options",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(PageToken)>",
        "result_key": "PageToken"
    },
    "servicecatalog_portfolio_detail_from_describe_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_portfolio(['Id'])",
            "method_name": "describe_portfolio",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(PortfolioDetail)>",
        "result_key": "PortfolioDetail"
    },
    "servicecatalog_portfolio_detail_from_list_accepted_portfolio_shares": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_accepted_portfolio_shares([])",
            "method_name": "list_accepted_portfolio_shares",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(PortfolioDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_portfolio_detail_from_list_portfolios": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_portfolios([])",
            "method_name": "list_portfolios",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(PortfolioDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_portfolio_detail_from_list_portfolios_for_product": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_portfolios_for_product(['ProductId'])",
            "method_name": "list_portfolios_for_product",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(PortfolioDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_portfolio_details_from_list_accepted_portfolio_shares": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_accepted_portfolio_shares([])",
            "method_name": "list_accepted_portfolio_shares",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(PortfolioDetails)>",
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_portfolio_details_from_list_portfolios": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_portfolios([])",
            "method_name": "list_portfolios",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(PortfolioDetails)>",
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_portfolio_details_from_list_portfolios_for_product": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.list_portfolios_for_product(['ProductId'])",
            "method_name": "list_portfolios_for_product",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(PortfolioDetails)>",
        "result_key": "PortfolioDetails"
    },
    "servicecatalog_principal": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_principals_for_portfolio(['PortfolioId'])",
            "method_name": "list_principals_for_portfolio",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(Principal)>",
        "parametrize_id_source": [
            "PrincipalARN"
        ],
        "result_key": "Principals"
    },
    "servicecatalog_principals": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "PortfolioId",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_principals_for_portfolio(['PortfolioId'])",
            "method_name": "list_principals_for_portfolio",
            "required_args": [
                "PortfolioId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(Principals)>",
        "result_key": "Principals"
    },
    "servicecatalog_product_view_detail": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProductViewDetail)>",
        "result_key": "ProductViewDetail"
    },
    "servicecatalog_product_view_summary_from_describe_product": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product(['Id'])",
            "method_name": "describe_product",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProductViewSummary)>",
        "result_key": "ProductViewSummary"
    },
    "servicecatalog_product_view_summary_from_describe_product_view": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_view(['Id'])",
            "method_name": "describe_product_view",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProductViewSummary)>",
        "result_key": "ProductViewSummary"
    },
    "servicecatalog_provisioned_product_detail": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_provisioned_product(['Id'])",
            "method_name": "describe_provisioned_product",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisionedProductDetail)>",
        "result_key": "ProvisionedProductDetail"
    },
    "servicecatalog_provisioning_artifact_detail_from_describe_provisioning_artifact": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProvisioningArtifactId",
                "ProductId",
                "Verbose"
            ],
            "docstring": "servicecatalog.describe_provisioning_artifact(['ProvisioningArtifactId', 'ProductId'])",
            "method_name": "describe_provisioning_artifact",
            "required_args": [
                "ProvisioningArtifactId",
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifactDetail)>",
        "result_key": "ProvisioningArtifactDetail"
    },
    "servicecatalog_provisioning_artifact_detail_from_list_provisioning_artifacts": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId"
            ],
            "docstring": "servicecatalog.list_provisioning_artifacts(['ProductId'])",
            "method_name": "list_provisioning_artifacts",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifactDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ProvisioningArtifactDetails"
    },
    "servicecatalog_provisioning_artifact_details": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId"
            ],
            "docstring": "servicecatalog.list_provisioning_artifacts(['ProductId'])",
            "method_name": "list_provisioning_artifacts",
            "required_args": [
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ProvisioningArtifactDetails)>",
        "result_key": "ProvisioningArtifactDetails"
    },
    "servicecatalog_provisioning_artifact_from_describe_product": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product(['Id'])",
            "method_name": "describe_product",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifact)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ProvisioningArtifacts"
    },
    "servicecatalog_provisioning_artifact_from_describe_product_view": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_view(['Id'])",
            "method_name": "describe_product_view",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifact)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ProvisioningArtifacts"
    },
    "servicecatalog_provisioning_artifact_parameter": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifactParameter)>",
        "parametrize_id_source": null,
        "result_key": "ProvisioningArtifactParameters"
    },
    "servicecatalog_provisioning_artifact_parameters": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ProvisioningArtifactParameters)>",
        "result_key": "ProvisioningArtifactParameters"
    },
    "servicecatalog_provisioning_artifact_summaries": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ProvisioningArtifactSummaries)>",
        "result_key": "ProvisioningArtifactSummaries"
    },
    "servicecatalog_provisioning_artifact_summary": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ProvisioningArtifactSummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ProvisioningArtifactSummaries"
    },
    "servicecatalog_provisioning_artifacts_from_describe_product": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product(['Id'])",
            "method_name": "describe_product",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ProvisioningArtifacts)>",
        "result_key": "ProvisioningArtifacts"
    },
    "servicecatalog_provisioning_artifacts_from_describe_product_view": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_view(['Id'])",
            "method_name": "describe_product_view",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ProvisioningArtifacts)>",
        "result_key": "ProvisioningArtifacts"
    },
    "servicecatalog_record_detail_from_describe_record": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.describe_record(['Id'])",
            "method_name": "describe_record",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(RecordDetail)>",
        "result_key": "RecordDetail"
    },
    "servicecatalog_record_detail_from_list_record_history": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "AccessLevelFilter",
                "SearchFilter",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_record_history([])",
            "method_name": "list_record_history",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(RecordDetail)>",
        "parametrize_id_source": [
            "RecordId"
        ],
        "result_key": "RecordDetails"
    },
    "servicecatalog_record_details": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "AccessLevelFilter",
                "SearchFilter",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_record_history([])",
            "method_name": "list_record_history",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(RecordDetails)>",
        "result_key": "RecordDetails"
    },
    "servicecatalog_record_output": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.describe_record(['Id'])",
            "method_name": "describe_record",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(RecordOutput)>",
        "parametrize_id_source": null,
        "result_key": "RecordOutputs"
    },
    "servicecatalog_record_outputs": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id",
                "PageToken",
                "PageSize"
            ],
            "docstring": "servicecatalog.describe_record(['Id'])",
            "method_name": "describe_record",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(RecordOutputs)>",
        "result_key": "RecordOutputs"
    },
    "servicecatalog_resource_detail": {
        "fetch": {
            "all_args": [
                "TagOptionId",
                "ResourceType",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_resources_for_tag_option(['TagOptionId'])",
            "method_name": "list_resources_for_tag_option",
            "required_args": [
                "TagOptionId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(ResourceDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "ResourceDetails"
    },
    "servicecatalog_resource_details": {
        "fetch": {
            "all_args": [
                "TagOptionId",
                "ResourceType",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_resources_for_tag_option(['TagOptionId'])",
            "method_name": "list_resources_for_tag_option",
            "required_args": [
                "TagOptionId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(ResourceDetails)>",
        "result_key": "ResourceDetails"
    },
    "servicecatalog_status_detail": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "CopyProductToken"
            ],
            "docstring": "servicecatalog.describe_copy_product_status(['CopyProductToken'])",
            "method_name": "describe_copy_product_status",
            "required_args": [
                "CopyProductToken"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(StatusDetail)>",
        "result_key": "StatusDetail"
    },
    "servicecatalog_status_from_describe_constraint": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_constraint(['Id'])",
            "method_name": "describe_constraint",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(Status)>",
        "result_key": "Status"
    },
    "servicecatalog_status_from_describe_provisioning_artifact": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProvisioningArtifactId",
                "ProductId",
                "Verbose"
            ],
            "docstring": "servicecatalog.describe_provisioning_artifact(['ProvisioningArtifactId', 'ProductId'])",
            "method_name": "describe_provisioning_artifact",
            "required_args": [
                "ProvisioningArtifactId",
                "ProductId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(Status)>",
        "result_key": "Status"
    },
    "servicecatalog_tag_from_describe_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_portfolio(['Id'])",
            "method_name": "describe_portfolio",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "servicecatalog_tag_from_describe_product_as_admin": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "servicecatalog_tag_option_detail_from_describe_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_portfolio(['Id'])",
            "method_name": "describe_portfolio",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(TagOptionDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TagOptions"
    },
    "servicecatalog_tag_option_detail_from_describe_product_as_admin": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(TagOptionDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TagOptions"
    },
    "servicecatalog_tag_option_detail_from_describe_tag_option": {
        "fetch": {
            "all_args": [
                "Id"
            ],
            "docstring": "servicecatalog.describe_tag_option(['Id'])",
            "method_name": "describe_tag_option",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(TagOptionDetail)>",
        "result_key": "TagOptionDetail"
    },
    "servicecatalog_tag_option_detail_from_list_tag_options": {
        "fetch": {
            "all_args": [
                "Filters",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_tag_options([])",
            "method_name": "list_tag_options",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(TagOptionDetail)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TagOptionDetails"
    },
    "servicecatalog_tag_option_details": {
        "fetch": {
            "all_args": [
                "Filters",
                "PageSize",
                "PageToken"
            ],
            "docstring": "servicecatalog.list_tag_options([])",
            "method_name": "list_tag_options",
            "required_args": [],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(TagOptionDetails)>",
        "result_key": "TagOptionDetails"
    },
    "servicecatalog_tag_option_summary": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(TagOptionSummary)>",
        "parametrize_id_source": null,
        "result_key": "TagOptions"
    },
    "servicecatalog_tag_options_from_describe_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_portfolio(['Id'])",
            "method_name": "describe_portfolio",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(TagOptionDetails)>",
        "result_key": "TagOptions"
    },
    "servicecatalog_tag_options_from_describe_product_as_admin": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(TagOptionDetails)>",
        "result_key": "TagOptions"
    },
    "servicecatalog_tag_options_from_describe_provisioning_parameters": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(TagOptionSummaries)>",
        "result_key": "TagOptions"
    },
    "servicecatalog_tags_from_describe_portfolio": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_portfolio(['Id'])",
            "method_name": "describe_portfolio",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "servicecatalog_tags_from_describe_product_as_admin": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "Id"
            ],
            "docstring": "servicecatalog.describe_product_as_admin(['Id'])",
            "method_name": "describe_product_as_admin",
            "required_args": [
                "Id"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "servicecatalog_target_product_id": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "CopyProductToken"
            ],
            "docstring": "servicecatalog.describe_copy_product_status(['CopyProductToken'])",
            "method_name": "describe_copy_product_status",
            "required_args": [
                "CopyProductToken"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StringShape(Id)>",
        "result_key": "TargetProductId"
    },
    "servicecatalog_usage_instruction": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<StructureShape(UsageInstruction)>",
        "parametrize_id_source": null,
        "result_key": "UsageInstructions"
    },
    "servicecatalog_usage_instructions": {
        "fetch": {
            "all_args": [
                "AcceptLanguage",
                "ProductId",
                "ProvisioningArtifactId",
                "PathId"
            ],
            "docstring": "servicecatalog.describe_provisioning_parameters(['ProductId', 'ProvisioningArtifactId'])",
            "method_name": "describe_provisioning_parameters",
            "required_args": [
                "ProductId",
                "ProvisioningArtifactId"
            ],
            "service_name": "servicecatalog"
        },
        "output_shape": "<ListShape(UsageInstructions)>",
        "result_key": "UsageInstructions"
    },
    "ses_address": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_verified_email_addresses([])",
            "method_name": "list_verified_email_addresses",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StringShape(Address)>",
        "parametrize_id_source": [
            "Address"
        ],
        "result_key": "VerifiedEmailAddresses"
    },
    "ses_configuration_set_from_describe_configuration_set": {
        "fetch": {
            "all_args": [
                "ConfigurationSetName",
                "ConfigurationSetAttributeNames"
            ],
            "docstring": "ses.describe_configuration_set(['ConfigurationSetName'])",
            "method_name": "describe_configuration_set",
            "required_args": [
                "ConfigurationSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ConfigurationSet)>",
        "result_key": "ConfigurationSet"
    },
    "ses_configuration_set_from_list_configuration_sets": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_configuration_sets([])",
            "method_name": "list_configuration_sets",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ConfigurationSet)>",
        "parametrize_id_source": null,
        "result_key": "ConfigurationSets"
    },
    "ses_configuration_sets": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_configuration_sets([])",
            "method_name": "list_configuration_sets",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(ConfigurationSets)>",
        "result_key": "ConfigurationSets"
    },
    "ses_dkim_attributes": {
        "fetch": {
            "all_args": [
                "Identities"
            ],
            "docstring": "ses.get_identity_dkim_attributes(['Identities'])",
            "method_name": "get_identity_dkim_attributes",
            "required_args": [
                "Identities"
            ],
            "service_name": "ses"
        },
        "output_shape": "<MapShape(DkimAttributes)>",
        "result_key": "DkimAttributes"
    },
    "ses_event_destination": {
        "fetch": {
            "all_args": [
                "ConfigurationSetName",
                "ConfigurationSetAttributeNames"
            ],
            "docstring": "ses.describe_configuration_set(['ConfigurationSetName'])",
            "method_name": "describe_configuration_set",
            "required_args": [
                "ConfigurationSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(EventDestination)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "EventDestinations"
    },
    "ses_event_destinations": {
        "fetch": {
            "all_args": [
                "ConfigurationSetName",
                "ConfigurationSetAttributeNames"
            ],
            "docstring": "ses.describe_configuration_set(['ConfigurationSetName'])",
            "method_name": "describe_configuration_set",
            "required_args": [
                "ConfigurationSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(EventDestinations)>",
        "result_key": "EventDestinations"
    },
    "ses_filters": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_receipt_filters([])",
            "method_name": "list_receipt_filters",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(ReceiptFilterList)>",
        "result_key": "Filters"
    },
    "ses_identities": {
        "fetch": {
            "all_args": [
                "IdentityType"
            ],
            "docstring": "ses.list_identities([])",
            "method_name": "list_identities",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(IdentityList)>",
        "result_key": "Identities"
    },
    "ses_identity": {
        "fetch": {
            "all_args": [
                "IdentityType"
            ],
            "docstring": "ses.list_identities([])",
            "method_name": "list_identities",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StringShape(Identity)>",
        "parametrize_id_source": [
            "Identity"
        ],
        "result_key": "Identities"
    },
    "ses_mail_from_domain_attributes": {
        "fetch": {
            "all_args": [
                "Identities"
            ],
            "docstring": "ses.get_identity_mail_from_domain_attributes(['Identities'])",
            "method_name": "get_identity_mail_from_domain_attributes",
            "required_args": [
                "Identities"
            ],
            "service_name": "ses"
        },
        "output_shape": "<MapShape(MailFromDomainAttributes)>",
        "result_key": "MailFromDomainAttributes"
    },
    "ses_metadata_from_describe_active_receipt_rule_set": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.describe_active_receipt_rule_set([])",
            "method_name": "describe_active_receipt_rule_set",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRuleSetMetadata)>",
        "result_key": "Metadata"
    },
    "ses_metadata_from_describe_receipt_rule_set": {
        "fetch": {
            "all_args": [
                "RuleSetName"
            ],
            "docstring": "ses.describe_receipt_rule_set(['RuleSetName'])",
            "method_name": "describe_receipt_rule_set",
            "required_args": [
                "RuleSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRuleSetMetadata)>",
        "result_key": "Metadata"
    },
    "ses_notification_attributes": {
        "fetch": {
            "all_args": [
                "Identities"
            ],
            "docstring": "ses.get_identity_notification_attributes(['Identities'])",
            "method_name": "get_identity_notification_attributes",
            "required_args": [
                "Identities"
            ],
            "service_name": "ses"
        },
        "output_shape": "<MapShape(NotificationAttributes)>",
        "result_key": "NotificationAttributes"
    },
    "ses_policies": {
        "fetch": {
            "all_args": [
                "Identity",
                "PolicyNames"
            ],
            "docstring": "ses.get_identity_policies(['Identity', 'PolicyNames'])",
            "method_name": "get_identity_policies",
            "required_args": [
                "Identity",
                "PolicyNames"
            ],
            "service_name": "ses"
        },
        "output_shape": "<MapShape(PolicyMap)>",
        "result_key": "Policies"
    },
    "ses_policy_name": {
        "fetch": {
            "all_args": [
                "Identity"
            ],
            "docstring": "ses.list_identity_policies(['Identity'])",
            "method_name": "list_identity_policies",
            "required_args": [
                "Identity"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StringShape(PolicyName)>",
        "parametrize_id_source": [
            "PolicyName"
        ],
        "result_key": "PolicyNames"
    },
    "ses_policy_names": {
        "fetch": {
            "all_args": [
                "Identity"
            ],
            "docstring": "ses.list_identity_policies(['Identity'])",
            "method_name": "list_identity_policies",
            "required_args": [
                "Identity"
            ],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(PolicyNameList)>",
        "result_key": "PolicyNames"
    },
    "ses_receipt_filter": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_receipt_filters([])",
            "method_name": "list_receipt_filters",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptFilter)>",
        "parametrize_id_source": null,
        "result_key": "Filters"
    },
    "ses_receipt_rule_from_describe_active_receipt_rule_set": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.describe_active_receipt_rule_set([])",
            "method_name": "describe_active_receipt_rule_set",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRule)>",
        "parametrize_id_source": null,
        "result_key": "Rules"
    },
    "ses_receipt_rule_from_describe_receipt_rule_set": {
        "fetch": {
            "all_args": [
                "RuleSetName"
            ],
            "docstring": "ses.describe_receipt_rule_set(['RuleSetName'])",
            "method_name": "describe_receipt_rule_set",
            "required_args": [
                "RuleSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRule)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Rules"
    },
    "ses_receipt_rule_set_metadata": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_receipt_rule_sets([])",
            "method_name": "list_receipt_rule_sets",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRuleSetMetadata)>",
        "parametrize_id_source": null,
        "result_key": "RuleSets"
    },
    "ses_rule": {
        "fetch": {
            "all_args": [
                "RuleSetName",
                "RuleName"
            ],
            "docstring": "ses.describe_receipt_rule(['RuleSetName', 'RuleName'])",
            "method_name": "describe_receipt_rule",
            "required_args": [
                "RuleSetName",
                "RuleName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(ReceiptRule)>",
        "result_key": "Rule"
    },
    "ses_rule_sets": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_receipt_rule_sets([])",
            "method_name": "list_receipt_rule_sets",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(ReceiptRuleSetsLists)>",
        "result_key": "RuleSets"
    },
    "ses_rules_from_describe_active_receipt_rule_set": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.describe_active_receipt_rule_set([])",
            "method_name": "describe_active_receipt_rule_set",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(ReceiptRulesList)>",
        "result_key": "Rules"
    },
    "ses_rules_from_describe_receipt_rule_set": {
        "fetch": {
            "all_args": [
                "RuleSetName"
            ],
            "docstring": "ses.describe_receipt_rule_set(['RuleSetName'])",
            "method_name": "describe_receipt_rule_set",
            "required_args": [
                "RuleSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(ReceiptRulesList)>",
        "result_key": "Rules"
    },
    "ses_send_data_point": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.get_send_statistics([])",
            "method_name": "get_send_statistics",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(SendDataPoint)>",
        "parametrize_id_source": null,
        "result_key": "SendDataPoints"
    },
    "ses_send_data_points": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.get_send_statistics([])",
            "method_name": "get_send_statistics",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(SendDataPointList)>",
        "result_key": "SendDataPoints"
    },
    "ses_sent_last_24_hours": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.get_send_quota([])",
            "method_name": "get_send_quota",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<Shape(SentLast24Hours)>",
        "result_key": "SentLast24Hours"
    },
    "ses_template": {
        "fetch": {
            "all_args": [
                "TemplateName"
            ],
            "docstring": "ses.get_template(['TemplateName'])",
            "method_name": "get_template",
            "required_args": [
                "TemplateName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(Template)>",
        "result_key": "Template"
    },
    "ses_template_metadata": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_templates([])",
            "method_name": "list_templates",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(TemplateMetadata)>",
        "parametrize_id_source": null,
        "result_key": "TemplatesMetadata"
    },
    "ses_templates_metadata": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_templates([])",
            "method_name": "list_templates",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(TemplateMetadataList)>",
        "result_key": "TemplatesMetadata"
    },
    "ses_tracking_options": {
        "fetch": {
            "all_args": [
                "ConfigurationSetName",
                "ConfigurationSetAttributeNames"
            ],
            "docstring": "ses.describe_configuration_set(['ConfigurationSetName'])",
            "method_name": "describe_configuration_set",
            "required_args": [
                "ConfigurationSetName"
            ],
            "service_name": "ses"
        },
        "output_shape": "<StructureShape(TrackingOptions)>",
        "result_key": "TrackingOptions"
    },
    "ses_verification_attributes": {
        "fetch": {
            "all_args": [
                "Identities"
            ],
            "docstring": "ses.get_identity_verification_attributes(['Identities'])",
            "method_name": "get_identity_verification_attributes",
            "required_args": [
                "Identities"
            ],
            "service_name": "ses"
        },
        "output_shape": "<MapShape(VerificationAttributes)>",
        "result_key": "VerificationAttributes"
    },
    "ses_verified_email_addresses": {
        "fetch": {
            "all_args": [],
            "docstring": "ses.list_verified_email_addresses([])",
            "method_name": "list_verified_email_addresses",
            "required_args": [],
            "service_name": "ses"
        },
        "output_shape": "<ListShape(AddressList)>",
        "result_key": "VerifiedEmailAddresses"
    },
    "shield_attack": {
        "fetch": {
            "all_args": [
                "AttackId"
            ],
            "docstring": "shield.describe_attack(['AttackId'])",
            "method_name": "describe_attack",
            "required_args": [
                "AttackId"
            ],
            "service_name": "shield"
        },
        "output_shape": "<StructureShape(AttackDetail)>",
        "result_key": "Attack"
    },
    "shield_attack_summaries": {
        "fetch": {
            "all_args": [
                "ResourceArns",
                "StartTime",
                "EndTime"
            ],
            "docstring": "shield.list_attacks([])",
            "method_name": "list_attacks",
            "required_args": [],
            "service_name": "shield"
        },
        "output_shape": "<ListShape(AttackSummaries)>",
        "result_key": "AttackSummaries"
    },
    "shield_attack_summary": {
        "fetch": {
            "all_args": [
                "ResourceArns",
                "StartTime",
                "EndTime"
            ],
            "docstring": "shield.list_attacks([])",
            "method_name": "list_attacks",
            "required_args": [],
            "service_name": "shield"
        },
        "output_shape": "<StructureShape(AttackSummary)>",
        "parametrize_id_source": [
            "ResourceArn"
        ],
        "result_key": "AttackSummaries"
    },
    "shield_protection_from_describe_protection": {
        "fetch": {
            "all_args": [
                "ProtectionId"
            ],
            "docstring": "shield.describe_protection(['ProtectionId'])",
            "method_name": "describe_protection",
            "required_args": [
                "ProtectionId"
            ],
            "service_name": "shield"
        },
        "output_shape": "<StructureShape(Protection)>",
        "result_key": "Protection"
    },
    "shield_protection_from_list_protections": {
        "fetch": {
            "all_args": [],
            "docstring": "shield.list_protections([])",
            "method_name": "list_protections",
            "required_args": [],
            "service_name": "shield"
        },
        "output_shape": "<StructureShape(Protection)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Protections"
    },
    "shield_protections": {
        "fetch": {
            "all_args": [],
            "docstring": "shield.list_protections([])",
            "method_name": "list_protections",
            "required_args": [],
            "service_name": "shield"
        },
        "output_shape": "<ListShape(Protections)>",
        "result_key": "Protections"
    },
    "shield_subscription": {
        "fetch": {
            "all_args": [],
            "docstring": "shield.describe_subscription([])",
            "method_name": "describe_subscription",
            "required_args": [],
            "service_name": "shield"
        },
        "output_shape": "<StructureShape(Subscription)>",
        "result_key": "Subscription"
    },
    "sms_connector": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_connectors([])",
            "method_name": "get_connectors",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<StructureShape(Connector)>",
        "parametrize_id_source": [
            "connectorId"
        ],
        "result_key": "connectorList"
    },
    "sms_connector_list": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_connectors([])",
            "method_name": "get_connectors",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<ListShape(ConnectorList)>",
        "result_key": "connectorList"
    },
    "sms_last_modified_on": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_servers([])",
            "method_name": "get_servers",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "lastModifiedOn"
    },
    "sms_replication_job_from_get_replication_jobs": {
        "fetch": {
            "all_args": [
                "replicationJobId"
            ],
            "docstring": "sms.get_replication_jobs([])",
            "method_name": "get_replication_jobs",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<StructureShape(ReplicationJob)>",
        "parametrize_id_source": [
            "replicationJobId"
        ],
        "result_key": "replicationJobList"
    },
    "sms_replication_job_from_get_replication_runs": {
        "fetch": {
            "all_args": [
                "replicationJobId"
            ],
            "docstring": "sms.get_replication_runs(['replicationJobId'])",
            "method_name": "get_replication_runs",
            "required_args": [
                "replicationJobId"
            ],
            "service_name": "sms"
        },
        "output_shape": "<StructureShape(ReplicationJob)>",
        "result_key": "replicationJob"
    },
    "sms_replication_job_list": {
        "fetch": {
            "all_args": [
                "replicationJobId"
            ],
            "docstring": "sms.get_replication_jobs([])",
            "method_name": "get_replication_jobs",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<ListShape(ReplicationJobList)>",
        "result_key": "replicationJobList"
    },
    "sms_replication_run": {
        "fetch": {
            "all_args": [
                "replicationJobId"
            ],
            "docstring": "sms.get_replication_runs(['replicationJobId'])",
            "method_name": "get_replication_runs",
            "required_args": [
                "replicationJobId"
            ],
            "service_name": "sms"
        },
        "output_shape": "<StructureShape(ReplicationRun)>",
        "parametrize_id_source": [
            "replicationRunId"
        ],
        "result_key": "replicationRunList"
    },
    "sms_replication_run_list": {
        "fetch": {
            "all_args": [
                "replicationJobId"
            ],
            "docstring": "sms.get_replication_runs(['replicationJobId'])",
            "method_name": "get_replication_runs",
            "required_args": [
                "replicationJobId"
            ],
            "service_name": "sms"
        },
        "output_shape": "<ListShape(ReplicationRunList)>",
        "result_key": "replicationRunList"
    },
    "sms_server": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_servers([])",
            "method_name": "get_servers",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<StructureShape(Server)>",
        "parametrize_id_source": [
            "serverId"
        ],
        "result_key": "serverList"
    },
    "sms_server_catalog_status": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_servers([])",
            "method_name": "get_servers",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<StringShape(ServerCatalogStatus)>",
        "result_key": "serverCatalogStatus"
    },
    "sms_server_list": {
        "fetch": {
            "all_args": [],
            "docstring": "sms.get_servers([])",
            "method_name": "get_servers",
            "required_args": [],
            "service_name": "sms"
        },
        "output_shape": "<ListShape(ServerList)>",
        "result_key": "serverList"
    },
    "snowball_address_from_describe_address": {
        "fetch": {
            "all_args": [
                "AddressId"
            ],
            "docstring": "snowball.describe_address(['AddressId'])",
            "method_name": "describe_address",
            "required_args": [
                "AddressId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(Address)>",
        "result_key": "Address"
    },
    "snowball_address_from_describe_addresses": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.describe_addresses([])",
            "method_name": "describe_addresses",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(Address)>",
        "parametrize_id_source": [
            "AddressId"
        ],
        "result_key": "Addresses"
    },
    "snowball_addresses": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.describe_addresses([])",
            "method_name": "describe_addresses",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<ListShape(AddressList)>",
        "result_key": "Addresses"
    },
    "snowball_cluster_list_entries": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<ListShape(ClusterListEntryList)>",
        "result_key": "ClusterListEntries"
    },
    "snowball_cluster_list_entry": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.list_clusters([])",
            "method_name": "list_clusters",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(ClusterListEntry)>",
        "parametrize_id_source": [
            "ClusterId"
        ],
        "result_key": "ClusterListEntries"
    },
    "snowball_cluster_metadata": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "snowball.describe_cluster(['ClusterId'])",
            "method_name": "describe_cluster",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(ClusterMetadata)>",
        "result_key": "ClusterMetadata"
    },
    "snowball_job_list_entries_from_list_cluster_jobs": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "snowball.list_cluster_jobs(['ClusterId'])",
            "method_name": "list_cluster_jobs",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<ListShape(JobListEntryList)>",
        "result_key": "JobListEntries"
    },
    "snowball_job_list_entries_from_list_jobs": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.list_jobs([])",
            "method_name": "list_jobs",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<ListShape(JobListEntryList)>",
        "result_key": "JobListEntries"
    },
    "snowball_job_list_entry_from_list_cluster_jobs": {
        "fetch": {
            "all_args": [
                "ClusterId"
            ],
            "docstring": "snowball.list_cluster_jobs(['ClusterId'])",
            "method_name": "list_cluster_jobs",
            "required_args": [
                "ClusterId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(JobListEntry)>",
        "parametrize_id_source": [
            "JobId"
        ],
        "result_key": "JobListEntries"
    },
    "snowball_job_list_entry_from_list_jobs": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.list_jobs([])",
            "method_name": "list_jobs",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(JobListEntry)>",
        "parametrize_id_source": [
            "JobId"
        ],
        "result_key": "JobListEntries"
    },
    "snowball_job_metadata_from_describe_job": {
        "fetch": {
            "all_args": [
                "JobId"
            ],
            "docstring": "snowball.describe_job(['JobId'])",
            "method_name": "describe_job",
            "required_args": [
                "JobId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StructureShape(JobMetadata)>",
        "parametrize_id_source": [
            "JobId"
        ],
        "result_key": "SubJobMetadata"
    },
    "snowball_manifest_uri": {
        "fetch": {
            "all_args": [
                "JobId"
            ],
            "docstring": "snowball.get_job_manifest(['JobId'])",
            "method_name": "get_job_manifest",
            "required_args": [
                "JobId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "ManifestURI"
    },
    "snowball_snowball_limit": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.get_snowball_usage([])",
            "method_name": "get_snowball_usage",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "SnowballLimit"
    },
    "snowball_snowballs_in_use": {
        "fetch": {
            "all_args": [],
            "docstring": "snowball.get_snowball_usage([])",
            "method_name": "get_snowball_usage",
            "required_args": [],
            "service_name": "snowball"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "SnowballsInUse"
    },
    "snowball_sub_job_metadata": {
        "fetch": {
            "all_args": [
                "JobId"
            ],
            "docstring": "snowball.describe_job(['JobId'])",
            "method_name": "describe_job",
            "required_args": [
                "JobId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<ListShape(JobMetadataList)>",
        "result_key": "SubJobMetadata"
    },
    "snowball_unlock_code": {
        "fetch": {
            "all_args": [
                "JobId"
            ],
            "docstring": "snowball.get_job_unlock_code(['JobId'])",
            "method_name": "get_job_unlock_code",
            "required_args": [
                "JobId"
            ],
            "service_name": "snowball"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "UnlockCode"
    },
    "sns_attributes_from_get_endpoint_attributes": {
        "fetch": {
            "all_args": [
                "EndpointArn"
            ],
            "docstring": "sns.get_endpoint_attributes(['EndpointArn'])",
            "method_name": "get_endpoint_attributes",
            "required_args": [
                "EndpointArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<MapShape(MapStringToString)>",
        "result_key": "Attributes"
    },
    "sns_attributes_from_get_platform_application_attributes": {
        "fetch": {
            "all_args": [
                "PlatformApplicationArn"
            ],
            "docstring": "sns.get_platform_application_attributes(['PlatformApplicationArn'])",
            "method_name": "get_platform_application_attributes",
            "required_args": [
                "PlatformApplicationArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<MapShape(MapStringToString)>",
        "result_key": "Attributes"
    },
    "sns_attributes_from_get_sms_attributes": {
        "fetch": {
            "all_args": [
                "attributes"
            ],
            "docstring": "sns.get_sms_attributes([])",
            "method_name": "get_sms_attributes",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<MapShape(MapStringToString)>",
        "result_key": "attributes"
    },
    "sns_attributes_from_get_subscription_attributes": {
        "fetch": {
            "all_args": [
                "SubscriptionArn"
            ],
            "docstring": "sns.get_subscription_attributes(['SubscriptionArn'])",
            "method_name": "get_subscription_attributes",
            "required_args": [
                "SubscriptionArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<MapShape(SubscriptionAttributesMap)>",
        "result_key": "Attributes"
    },
    "sns_attributes_from_get_topic_attributes": {
        "fetch": {
            "all_args": [
                "TopicArn"
            ],
            "docstring": "sns.get_topic_attributes(['TopicArn'])",
            "method_name": "get_topic_attributes",
            "required_args": [
                "TopicArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<MapShape(TopicAttributesMap)>",
        "result_key": "Attributes"
    },
    "sns_endpoint": {
        "fetch": {
            "all_args": [
                "PlatformApplicationArn"
            ],
            "docstring": "sns.list_endpoints_by_platform_application(['PlatformApplicationArn'])",
            "method_name": "list_endpoints_by_platform_application",
            "required_args": [
                "PlatformApplicationArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<StructureShape(Endpoint)>",
        "parametrize_id_source": [
            "EndpointArn"
        ],
        "result_key": "Endpoints"
    },
    "sns_endpoints": {
        "fetch": {
            "all_args": [
                "PlatformApplicationArn"
            ],
            "docstring": "sns.list_endpoints_by_platform_application(['PlatformApplicationArn'])",
            "method_name": "list_endpoints_by_platform_application",
            "required_args": [
                "PlatformApplicationArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(ListOfEndpoints)>",
        "result_key": "Endpoints"
    },
    "sns_phone_number": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_phone_numbers_opted_out([])",
            "method_name": "list_phone_numbers_opted_out",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<StringShape(PhoneNumber)>",
        "parametrize_id_source": [
            "PhoneNumber"
        ],
        "result_key": "phoneNumbers"
    },
    "sns_phone_numbers": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_phone_numbers_opted_out([])",
            "method_name": "list_phone_numbers_opted_out",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(PhoneNumberList)>",
        "result_key": "phoneNumbers"
    },
    "sns_platform_application": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_platform_applications([])",
            "method_name": "list_platform_applications",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<StructureShape(PlatformApplication)>",
        "parametrize_id_source": [
            "PlatformApplicationArn"
        ],
        "result_key": "PlatformApplications"
    },
    "sns_platform_applications": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_platform_applications([])",
            "method_name": "list_platform_applications",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(ListOfPlatformApplications)>",
        "result_key": "PlatformApplications"
    },
    "sns_subscription_from_list_subscriptions": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_subscriptions([])",
            "method_name": "list_subscriptions",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<StructureShape(Subscription)>",
        "parametrize_id_source": [
            "SubscriptionArn"
        ],
        "result_key": "Subscriptions"
    },
    "sns_subscription_from_list_subscriptions_by_topic": {
        "fetch": {
            "all_args": [
                "TopicArn"
            ],
            "docstring": "sns.list_subscriptions_by_topic(['TopicArn'])",
            "method_name": "list_subscriptions_by_topic",
            "required_args": [
                "TopicArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<StructureShape(Subscription)>",
        "parametrize_id_source": [
            "TopicArn"
        ],
        "result_key": "Subscriptions"
    },
    "sns_subscriptions_from_list_subscriptions": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_subscriptions([])",
            "method_name": "list_subscriptions",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(SubscriptionsList)>",
        "result_key": "Subscriptions"
    },
    "sns_subscriptions_from_list_subscriptions_by_topic": {
        "fetch": {
            "all_args": [
                "TopicArn"
            ],
            "docstring": "sns.list_subscriptions_by_topic(['TopicArn'])",
            "method_name": "list_subscriptions_by_topic",
            "required_args": [
                "TopicArn"
            ],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(SubscriptionsList)>",
        "result_key": "Subscriptions"
    },
    "sns_topic": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_topics([])",
            "method_name": "list_topics",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<StructureShape(Topic)>",
        "parametrize_id_source": [
            "TopicArn"
        ],
        "result_key": "Topics"
    },
    "sns_topics": {
        "fetch": {
            "all_args": [],
            "docstring": "sns.list_topics([])",
            "method_name": "list_topics",
            "required_args": [],
            "service_name": "sns"
        },
        "output_shape": "<ListShape(TopicsList)>",
        "result_key": "Topics"
    },
    "sqs_attributes": {
        "fetch": {
            "all_args": [
                "QueueUrl",
                "AttributeNames"
            ],
            "docstring": "sqs.get_queue_attributes(['QueueUrl'])",
            "method_name": "get_queue_attributes",
            "required_args": [
                "QueueUrl"
            ],
            "service_name": "sqs"
        },
        "output_shape": "<MapShape(QueueAttributeMap)>",
        "result_key": "Attributes"
    },
    "sqs_queue_url": {
        "fetch": {
            "all_args": [
                "QueueName",
                "QueueOwnerAWSAccountId"
            ],
            "docstring": "sqs.get_queue_url(['QueueName'])",
            "method_name": "get_queue_url",
            "required_args": [
                "QueueName"
            ],
            "service_name": "sqs"
        },
        "output_shape": "<StringShape(String)>",
        "result_key": "QueueUrl"
    },
    "sqs_queue_urls_from_list_dead_letter_source_queues": {
        "fetch": {
            "all_args": [
                "QueueUrl"
            ],
            "docstring": "sqs.list_dead_letter_source_queues(['QueueUrl'])",
            "method_name": "list_dead_letter_source_queues",
            "required_args": [
                "QueueUrl"
            ],
            "service_name": "sqs"
        },
        "output_shape": "<ListShape(QueueUrlList)>",
        "result_key": "queueUrls"
    },
    "sqs_queue_urls_from_list_queues": {
        "fetch": {
            "all_args": [
                "QueueNamePrefix"
            ],
            "docstring": "sqs.list_queues([])",
            "method_name": "list_queues",
            "required_args": [],
            "service_name": "sqs"
        },
        "output_shape": "<ListShape(QueueUrlList)>",
        "result_key": "QueueUrls"
    },
    "sqs_string_from_list_dead_letter_source_queues": {
        "fetch": {
            "all_args": [
                "QueueUrl"
            ],
            "docstring": "sqs.list_dead_letter_source_queues(['QueueUrl'])",
            "method_name": "list_dead_letter_source_queues",
            "required_args": [
                "QueueUrl"
            ],
            "service_name": "sqs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "queueUrls"
    },
    "sqs_string_from_list_queues": {
        "fetch": {
            "all_args": [
                "QueueNamePrefix"
            ],
            "docstring": "sqs.list_queues([])",
            "method_name": "list_queues",
            "required_args": [],
            "service_name": "sqs"
        },
        "output_shape": "<StringShape(String)>",
        "parametrize_id_source": [
            "String"
        ],
        "result_key": "QueueUrls"
    },
    "sqs_tags": {
        "fetch": {
            "all_args": [
                "QueueUrl"
            ],
            "docstring": "sqs.list_queue_tags(['QueueUrl'])",
            "method_name": "list_queue_tags",
            "required_args": [
                "QueueUrl"
            ],
            "service_name": "sqs"
        },
        "output_shape": "<MapShape(TagMap)>",
        "result_key": "Tags"
    },
    "ssm_account_id": {
        "fetch": {
            "all_args": [
                "Name",
                "PermissionType"
            ],
            "docstring": "ssm.describe_document_permission(['Name', 'PermissionType'])",
            "method_name": "describe_document_permission",
            "required_args": [
                "Name",
                "PermissionType"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(AccountId)>",
        "parametrize_id_source": [
            "AccountId"
        ],
        "result_key": "AccountIds"
    },
    "ssm_account_ids": {
        "fetch": {
            "all_args": [
                "Name",
                "PermissionType"
            ],
            "docstring": "ssm.describe_document_permission(['Name', 'PermissionType'])",
            "method_name": "describe_document_permission",
            "required_args": [
                "Name",
                "PermissionType"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(AccountIdList)>",
        "result_key": "AccountIds"
    },
    "ssm_activation": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_activations([])",
            "method_name": "describe_activations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Activation)>",
        "parametrize_id_source": [
            "ActivationId"
        ],
        "result_key": "ActivationList"
    },
    "ssm_activation_list": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_activations([])",
            "method_name": "describe_activations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ActivationList)>",
        "result_key": "ActivationList"
    },
    "ssm_allow_unassociated_targets": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowAllowUnassociatedTargets)>",
        "result_key": "AllowUnassociatedTargets"
    },
    "ssm_approval_rules": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(PatchRuleGroup)>",
        "result_key": "ApprovalRules"
    },
    "ssm_approved_patches": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchIdList)>",
        "result_key": "ApprovedPatches"
    },
    "ssm_approved_patches_compliance_level": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(PatchComplianceLevel)>",
        "result_key": "ApprovedPatchesComplianceLevel"
    },
    "ssm_association": {
        "fetch": {
            "all_args": [
                "AssociationFilterList"
            ],
            "docstring": "ssm.list_associations([])",
            "method_name": "list_associations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Association)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "Associations"
    },
    "ssm_association_description": {
        "fetch": {
            "all_args": [
                "Name",
                "InstanceId",
                "AssociationId",
                "AssociationVersion"
            ],
            "docstring": "ssm.describe_association([])",
            "method_name": "describe_association",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(AssociationDescription)>",
        "result_key": "AssociationDescription"
    },
    "ssm_association_version_info": {
        "fetch": {
            "all_args": [
                "AssociationId"
            ],
            "docstring": "ssm.list_association_versions(['AssociationId'])",
            "method_name": "list_association_versions",
            "required_args": [
                "AssociationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(AssociationVersionInfo)>",
        "parametrize_id_source": [
            "AssociationId"
        ],
        "result_key": "AssociationVersions"
    },
    "ssm_association_versions": {
        "fetch": {
            "all_args": [
                "AssociationId"
            ],
            "docstring": "ssm.list_association_versions(['AssociationId'])",
            "method_name": "list_association_versions",
            "required_args": [
                "AssociationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(AssociationVersionList)>",
        "result_key": "AssociationVersions"
    },
    "ssm_associations_from_describe_effective_instance_associations": {
        "fetch": {
            "all_args": [
                "InstanceId"
            ],
            "docstring": "ssm.describe_effective_instance_associations(['InstanceId'])",
            "method_name": "describe_effective_instance_associations",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InstanceAssociationList)>",
        "result_key": "Associations"
    },
    "ssm_associations_from_list_associations": {
        "fetch": {
            "all_args": [
                "AssociationFilterList"
            ],
            "docstring": "ssm.list_associations([])",
            "method_name": "list_associations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(AssociationList)>",
        "result_key": "Associations"
    },
    "ssm_automation_execution": {
        "fetch": {
            "all_args": [
                "AutomationExecutionId"
            ],
            "docstring": "ssm.get_automation_execution(['AutomationExecutionId'])",
            "method_name": "get_automation_execution",
            "required_args": [
                "AutomationExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(AutomationExecution)>",
        "result_key": "AutomationExecution"
    },
    "ssm_automation_execution_metadata": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_automation_executions([])",
            "method_name": "describe_automation_executions",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(AutomationExecutionMetadata)>",
        "parametrize_id_source": [
            "AutomationExecutionId"
        ],
        "result_key": "AutomationExecutionMetadataList"
    },
    "ssm_automation_execution_metadata_list": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_automation_executions([])",
            "method_name": "describe_automation_executions",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(AutomationExecutionMetadataList)>",
        "result_key": "AutomationExecutionMetadataList"
    },
    "ssm_baseline_id_from_get_default_patch_baseline": {
        "fetch": {
            "all_args": [
                "OperatingSystem"
            ],
            "docstring": "ssm.get_default_patch_baseline([])",
            "method_name": "get_default_patch_baseline",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(BaselineId)>",
        "result_key": "BaselineId"
    },
    "ssm_baseline_id_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(BaselineId)>",
        "result_key": "BaselineId"
    },
    "ssm_baseline_id_from_get_patch_baseline_for_patch_group": {
        "fetch": {
            "all_args": [
                "PatchGroup",
                "OperatingSystem"
            ],
            "docstring": "ssm.get_patch_baseline_for_patch_group(['PatchGroup'])",
            "method_name": "get_patch_baseline_for_patch_group",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(BaselineId)>",
        "result_key": "BaselineId"
    },
    "ssm_baseline_identities": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_patch_baselines([])",
            "method_name": "describe_patch_baselines",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchBaselineIdentityList)>",
        "result_key": "BaselineIdentities"
    },
    "ssm_capture_time": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InventoryItemCaptureTime)>",
        "result_key": "CaptureTime"
    },
    "ssm_command": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "Filters"
            ],
            "docstring": "ssm.list_commands([])",
            "method_name": "list_commands",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Command)>",
        "parametrize_id_source": [
            "CommandId"
        ],
        "result_key": "Commands"
    },
    "ssm_command_id": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(CommandId)>",
        "result_key": "CommandId"
    },
    "ssm_command_invocation": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "Filters",
                "Details"
            ],
            "docstring": "ssm.list_command_invocations([])",
            "method_name": "list_command_invocations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(CommandInvocation)>",
        "parametrize_id_source": [
            "CommandId"
        ],
        "result_key": "CommandInvocations"
    },
    "ssm_command_invocations": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "Filters",
                "Details"
            ],
            "docstring": "ssm.list_command_invocations([])",
            "method_name": "list_command_invocations",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(CommandInvocationList)>",
        "result_key": "CommandInvocations"
    },
    "ssm_commands": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "Filters"
            ],
            "docstring": "ssm.list_commands([])",
            "method_name": "list_commands",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(CommandList)>",
        "result_key": "Commands"
    },
    "ssm_comment": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(Comment)>",
        "result_key": "Comment"
    },
    "ssm_compliance_item": {
        "fetch": {
            "all_args": [
                "Filters",
                "ResourceIds",
                "ResourceTypes"
            ],
            "docstring": "ssm.list_compliance_items([])",
            "method_name": "list_compliance_items",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ComplianceItem)>",
        "parametrize_id_source": [
            "ResourceType"
        ],
        "result_key": "ComplianceItems"
    },
    "ssm_compliance_items": {
        "fetch": {
            "all_args": [
                "Filters",
                "ResourceIds",
                "ResourceTypes"
            ],
            "docstring": "ssm.list_compliance_items([])",
            "method_name": "list_compliance_items",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ComplianceItemList)>",
        "result_key": "ComplianceItems"
    },
    "ssm_compliance_summary_item": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.list_compliance_summaries([])",
            "method_name": "list_compliance_summaries",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ComplianceSummaryItem)>",
        "parametrize_id_source": null,
        "result_key": "ComplianceSummaryItems"
    },
    "ssm_compliance_summary_items": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.list_compliance_summaries([])",
            "method_name": "list_compliance_summaries",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ComplianceSummaryItemList)>",
        "result_key": "ComplianceSummaryItems"
    },
    "ssm_content": {
        "fetch": {
            "all_args": [
                "Name",
                "DocumentVersion"
            ],
            "docstring": "ssm.get_document(['Name'])",
            "method_name": "get_document",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(DocumentContent)>",
        "result_key": "Content"
    },
    "ssm_created_date_from_get_maintenance_window": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "CreatedDate"
    },
    "ssm_created_date_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "CreatedDate"
    },
    "ssm_cutoff": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowCutoff)>",
        "result_key": "Cutoff"
    },
    "ssm_description_from_get_maintenance_window": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowDescription)>",
        "result_key": "Description"
    },
    "ssm_description_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowDescription)>",
        "result_key": "Description"
    },
    "ssm_description_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(BaselineDescription)>",
        "result_key": "Description"
    },
    "ssm_document": {
        "fetch": {
            "all_args": [
                "Name",
                "DocumentVersion"
            ],
            "docstring": "ssm.describe_document(['Name'])",
            "method_name": "describe_document",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(DocumentDescription)>",
        "result_key": "Document"
    },
    "ssm_document_identifier": {
        "fetch": {
            "all_args": [
                "DocumentFilterList",
                "Filters"
            ],
            "docstring": "ssm.list_documents([])",
            "method_name": "list_documents",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(DocumentIdentifier)>",
        "parametrize_id_source": null,
        "result_key": "DocumentIdentifiers"
    },
    "ssm_document_identifiers": {
        "fetch": {
            "all_args": [
                "DocumentFilterList",
                "Filters"
            ],
            "docstring": "ssm.list_documents([])",
            "method_name": "list_documents",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(DocumentIdentifierList)>",
        "result_key": "DocumentIdentifiers"
    },
    "ssm_document_name": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(DocumentName)>",
        "result_key": "DocumentName"
    },
    "ssm_document_type": {
        "fetch": {
            "all_args": [
                "Name",
                "DocumentVersion"
            ],
            "docstring": "ssm.get_document(['Name'])",
            "method_name": "get_document",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(DocumentType)>",
        "result_key": "DocumentType"
    },
    "ssm_document_version": {
        "fetch": {
            "all_args": [
                "Name",
                "DocumentVersion"
            ],
            "docstring": "ssm.get_document(['Name'])",
            "method_name": "get_document",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(DocumentVersion)>",
        "result_key": "DocumentVersion"
    },
    "ssm_document_version_info": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "ssm.list_document_versions(['Name'])",
            "method_name": "list_document_versions",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(DocumentVersionInfo)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "DocumentVersions"
    },
    "ssm_document_versions": {
        "fetch": {
            "all_args": [
                "Name"
            ],
            "docstring": "ssm.list_document_versions(['Name'])",
            "method_name": "list_document_versions",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(DocumentVersionList)>",
        "result_key": "DocumentVersions"
    },
    "ssm_duration": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowDurationHours)>",
        "result_key": "Duration"
    },
    "ssm_effective_patch": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.describe_effective_patches_for_patch_baseline(['BaselineId'])",
            "method_name": "describe_effective_patches_for_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(EffectivePatch)>",
        "parametrize_id_source": null,
        "result_key": "EffectivePatches"
    },
    "ssm_effective_patches": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.describe_effective_patches_for_patch_baseline(['BaselineId'])",
            "method_name": "describe_effective_patches_for_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(EffectivePatchList)>",
        "result_key": "EffectivePatches"
    },
    "ssm_enabled": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowEnabled)>",
        "result_key": "Enabled"
    },
    "ssm_end_time_from_get_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "EndTime"
    },
    "ssm_end_time_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "EndTime"
    },
    "ssm_end_time_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "EndTime"
    },
    "ssm_entities": {
        "fetch": {
            "all_args": [
                "Filters",
                "ResultAttributes"
            ],
            "docstring": "ssm.get_inventory([])",
            "method_name": "get_inventory",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InventoryResultEntityList)>",
        "result_key": "Entities"
    },
    "ssm_entries": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InventoryItemEntryList)>",
        "result_key": "Entries"
    },
    "ssm_execution_elapsed_time": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StringDateTime)>",
        "result_key": "ExecutionElapsedTime"
    },
    "ssm_execution_end_date_time": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StringDateTime)>",
        "result_key": "ExecutionEndDateTime"
    },
    "ssm_execution_id": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskExecutionId)>",
        "result_key": "ExecutionId"
    },
    "ssm_execution_start_date_time": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StringDateTime)>",
        "result_key": "ExecutionStartDateTime"
    },
    "ssm_global_filters": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(PatchFilterGroup)>",
        "result_key": "GlobalFilters"
    },
    "ssm_instance_association": {
        "fetch": {
            "all_args": [
                "InstanceId"
            ],
            "docstring": "ssm.describe_effective_instance_associations(['InstanceId'])",
            "method_name": "describe_effective_instance_associations",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InstanceAssociation)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "Associations"
    },
    "ssm_instance_association_status_info": {
        "fetch": {
            "all_args": [
                "InstanceId"
            ],
            "docstring": "ssm.describe_instance_associations_status(['InstanceId'])",
            "method_name": "describe_instance_associations_status",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InstanceAssociationStatusInfo)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstanceAssociationStatusInfos"
    },
    "ssm_instance_association_status_infos": {
        "fetch": {
            "all_args": [
                "InstanceId"
            ],
            "docstring": "ssm.describe_instance_associations_status(['InstanceId'])",
            "method_name": "describe_instance_associations_status",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InstanceAssociationStatusInfos)>",
        "result_key": "InstanceAssociationStatusInfos"
    },
    "ssm_instance_id_from_get_command_invocation": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InstanceId)>",
        "result_key": "InstanceId"
    },
    "ssm_instance_id_from_get_deployable_patch_snapshot_for_instance": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "docstring": "ssm.get_deployable_patch_snapshot_for_instance(['InstanceId', 'SnapshotId'])",
            "method_name": "get_deployable_patch_snapshot_for_instance",
            "required_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InstanceId)>",
        "result_key": "InstanceId"
    },
    "ssm_instance_id_from_list_inventory_entries": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InstanceId)>",
        "result_key": "InstanceId"
    },
    "ssm_instance_information": {
        "fetch": {
            "all_args": [
                "InstanceInformationFilterList",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_information([])",
            "method_name": "describe_instance_information",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InstanceInformation)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstanceInformationList"
    },
    "ssm_instance_information_list": {
        "fetch": {
            "all_args": [
                "InstanceInformationFilterList",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_information([])",
            "method_name": "describe_instance_information",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InstanceInformationList)>",
        "result_key": "InstanceInformationList"
    },
    "ssm_instance_patch_state_from_describe_instance_patch_states": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "ssm.describe_instance_patch_states(['InstanceIds'])",
            "method_name": "describe_instance_patch_states",
            "required_args": [
                "InstanceIds"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InstancePatchState)>",
        "parametrize_id_source": [
            "InstanceId"
        ],
        "result_key": "InstancePatchStates"
    },
    "ssm_instance_patch_state_from_describe_instance_patch_states_for_patch_group": {
        "fetch": {
            "all_args": [
                "PatchGroup",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_patch_states_for_patch_group(['PatchGroup'])",
            "method_name": "describe_instance_patch_states_for_patch_group",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InstancePatchState)>",
        "parametrize_id_source": [
            "PatchGroup"
        ],
        "result_key": "InstancePatchStates"
    },
    "ssm_instance_patch_states_from_describe_instance_patch_states": {
        "fetch": {
            "all_args": [
                "InstanceIds"
            ],
            "docstring": "ssm.describe_instance_patch_states(['InstanceIds'])",
            "method_name": "describe_instance_patch_states",
            "required_args": [
                "InstanceIds"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InstancePatchStateList)>",
        "result_key": "InstancePatchStates"
    },
    "ssm_instance_patch_states_from_describe_instance_patch_states_for_patch_group": {
        "fetch": {
            "all_args": [
                "PatchGroup",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_patch_states_for_patch_group(['PatchGroup'])",
            "method_name": "describe_instance_patch_states_for_patch_group",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InstancePatchStatesList)>",
        "result_key": "InstancePatchStates"
    },
    "ssm_instances": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "Instances"
    },
    "ssm_instances_with_failed_patches": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "InstancesWithFailedPatches"
    },
    "ssm_instances_with_installed_other_patches": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "InstancesWithInstalledOtherPatches"
    },
    "ssm_instances_with_installed_patches": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "InstancesWithInstalledPatches"
    },
    "ssm_instances_with_missing_patches": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "InstancesWithMissingPatches"
    },
    "ssm_instances_with_not_applicable_patches": {
        "fetch": {
            "all_args": [
                "PatchGroup"
            ],
            "docstring": "ssm.describe_patch_group_state(['PatchGroup'])",
            "method_name": "describe_patch_group_state",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(Integer)>",
        "result_key": "InstancesWithNotApplicablePatches"
    },
    "ssm_invalid_parameters": {
        "fetch": {
            "all_args": [
                "Names",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters(['Names'])",
            "method_name": "get_parameters",
            "required_args": [
                "Names"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ParameterNameList)>",
        "result_key": "InvalidParameters"
    },
    "ssm_inventory_item_entry": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<MapShape(InventoryItemEntry)>",
        "parametrize_id_source": null,
        "result_key": "Entries"
    },
    "ssm_inventory_item_schema": {
        "fetch": {
            "all_args": [
                "TypeName",
                "SubType"
            ],
            "docstring": "ssm.get_inventory_schema([])",
            "method_name": "get_inventory_schema",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InventoryItemSchema)>",
        "parametrize_id_source": [
            "TypeName"
        ],
        "result_key": "Schemas"
    },
    "ssm_inventory_result_entity": {
        "fetch": {
            "all_args": [
                "Filters",
                "ResultAttributes"
            ],
            "docstring": "ssm.get_inventory([])",
            "method_name": "get_inventory",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(InventoryResultEntity)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Entities"
    },
    "ssm_invocation_id": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskInvocationId)>",
        "result_key": "InvocationId"
    },
    "ssm_logging_info": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(LoggingInfo)>",
        "result_key": "LoggingInfo"
    },
    "ssm_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_executions(['WindowId'])",
            "method_name": "describe_maintenance_window_executions",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowExecution)>",
        "parametrize_id_source": [
            "WindowId"
        ],
        "result_key": "WindowExecutions"
    },
    "ssm_maintenance_window_execution_task_id": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskId)>",
        "parametrize_id_source": [
            "MaintenanceWindowExecutionTaskId"
        ],
        "result_key": "TaskIds"
    },
    "ssm_maintenance_window_execution_task_identity": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_execution_tasks(['WindowExecutionId'])",
            "method_name": "describe_maintenance_window_execution_tasks",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowExecutionTaskIdentity)>",
        "parametrize_id_source": [
            "WindowExecutionId"
        ],
        "result_key": "WindowExecutionTaskIdentities"
    },
    "ssm_maintenance_window_execution_task_invocation_identity": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_execution_task_invocations(['WindowExecutionId', 'TaskId'])",
            "method_name": "describe_maintenance_window_execution_task_invocations",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowExecutionTaskInvocationIdentity)>",
        "parametrize_id_source": [
            "WindowExecutionId"
        ],
        "result_key": "WindowExecutionTaskInvocationIdentities"
    },
    "ssm_maintenance_window_identity": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_windows([])",
            "method_name": "describe_maintenance_windows",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowIdentity)>",
        "parametrize_id_source": [
            "WindowId"
        ],
        "result_key": "WindowIdentities"
    },
    "ssm_maintenance_window_target": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_targets(['WindowId'])",
            "method_name": "describe_maintenance_window_targets",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowTarget)>",
        "parametrize_id_source": [
            "WindowId"
        ],
        "result_key": "Targets"
    },
    "ssm_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_tasks(['WindowId'])",
            "method_name": "describe_maintenance_window_tasks",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowTask)>",
        "parametrize_id_source": [
            "WindowId"
        ],
        "result_key": "Tasks"
    },
    "ssm_maintenance_window_task_parameters": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<MapShape(MaintenanceWindowTaskParameters)>",
        "parametrize_id_source": null,
        "result_key": "TaskParameters"
    },
    "ssm_mappings": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_patch_groups([])",
            "method_name": "describe_patch_groups",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchGroupPatchBaselineMappingList)>",
        "result_key": "Mappings"
    },
    "ssm_modified_date_from_get_maintenance_window": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "ModifiedDate"
    },
    "ssm_modified_date_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "ModifiedDate"
    },
    "ssm_name_from_get_document": {
        "fetch": {
            "all_args": [
                "Name",
                "DocumentVersion"
            ],
            "docstring": "ssm.get_document(['Name'])",
            "method_name": "get_document",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(DocumentARN)>",
        "result_key": "Name"
    },
    "ssm_name_from_get_maintenance_window": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowName)>",
        "result_key": "Name"
    },
    "ssm_name_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowName)>",
        "result_key": "Name"
    },
    "ssm_name_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(BaselineName)>",
        "result_key": "Name"
    },
    "ssm_operating_system_from_get_default_patch_baseline": {
        "fetch": {
            "all_args": [
                "OperatingSystem"
            ],
            "docstring": "ssm.get_default_patch_baseline([])",
            "method_name": "get_default_patch_baseline",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(OperatingSystem)>",
        "result_key": "OperatingSystem"
    },
    "ssm_operating_system_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(OperatingSystem)>",
        "result_key": "OperatingSystem"
    },
    "ssm_operating_system_from_get_patch_baseline_for_patch_group": {
        "fetch": {
            "all_args": [
                "PatchGroup",
                "OperatingSystem"
            ],
            "docstring": "ssm.get_patch_baseline_for_patch_group(['PatchGroup'])",
            "method_name": "get_patch_baseline_for_patch_group",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(OperatingSystem)>",
        "result_key": "OperatingSystem"
    },
    "ssm_owner_information": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(OwnerInformation)>",
        "result_key": "OwnerInformation"
    },
    "ssm_parameter_from_get_parameter": {
        "fetch": {
            "all_args": [
                "Name",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameter(['Name'])",
            "method_name": "get_parameter",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "result_key": "Parameter"
    },
    "ssm_parameter_from_get_parameters": {
        "fetch": {
            "all_args": [
                "Names",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters(['Names'])",
            "method_name": "get_parameters",
            "required_args": [
                "Names"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Parameters"
    },
    "ssm_parameter_from_get_parameters_by_path": {
        "fetch": {
            "all_args": [
                "Path",
                "Recursive",
                "ParameterFilters",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters_by_path(['Path'])",
            "method_name": "get_parameters_by_path",
            "required_args": [
                "Path"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Parameter)>",
        "parametrize_id_source": null,
        "result_key": "Parameters"
    },
    "ssm_parameter_history": {
        "fetch": {
            "all_args": [
                "Name",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameter_history(['Name'])",
            "method_name": "get_parameter_history",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ParameterHistory)>",
        "parametrize_id_source": [
            "Name"
        ],
        "result_key": "Parameters"
    },
    "ssm_parameter_metadata": {
        "fetch": {
            "all_args": [
                "Filters",
                "ParameterFilters"
            ],
            "docstring": "ssm.describe_parameters([])",
            "method_name": "describe_parameters",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ParameterMetadata)>",
        "parametrize_id_source": [
            "KeyId"
        ],
        "result_key": "Parameters"
    },
    "ssm_parameters_from_describe_parameters": {
        "fetch": {
            "all_args": [
                "Filters",
                "ParameterFilters"
            ],
            "docstring": "ssm.describe_parameters([])",
            "method_name": "describe_parameters",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ParameterMetadataList)>",
        "result_key": "Parameters"
    },
    "ssm_parameters_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskInvocationParameters)>",
        "result_key": "Parameters"
    },
    "ssm_parameters_from_get_parameter_history": {
        "fetch": {
            "all_args": [
                "Name",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameter_history(['Name'])",
            "method_name": "get_parameter_history",
            "required_args": [
                "Name"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ParameterHistoryList)>",
        "result_key": "Parameters"
    },
    "ssm_parameters_from_get_parameters": {
        "fetch": {
            "all_args": [
                "Names",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters(['Names'])",
            "method_name": "get_parameters",
            "required_args": [
                "Names"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ParameterList)>",
        "result_key": "Parameters"
    },
    "ssm_parameters_from_get_parameters_by_path": {
        "fetch": {
            "all_args": [
                "Path",
                "Recursive",
                "ParameterFilters",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters_by_path(['Path'])",
            "method_name": "get_parameters_by_path",
            "required_args": [
                "Path"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ParameterList)>",
        "result_key": "Parameters"
    },
    "ssm_patch": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_available_patches([])",
            "method_name": "describe_available_patches",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Patch)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Patches"
    },
    "ssm_patch_baseline_identity": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_patch_baselines([])",
            "method_name": "describe_patch_baselines",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(PatchBaselineIdentity)>",
        "parametrize_id_source": [
            "BaselineId"
        ],
        "result_key": "BaselineIdentities"
    },
    "ssm_patch_compliance_data": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_patches(['InstanceId'])",
            "method_name": "describe_instance_patches",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(PatchComplianceData)>",
        "parametrize_id_source": [
            "KBId"
        ],
        "result_key": "Patches"
    },
    "ssm_patch_group_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(PatchGroup)>",
        "parametrize_id_source": [
            "PatchGroup"
        ],
        "result_key": "PatchGroups"
    },
    "ssm_patch_group_from_get_patch_baseline_for_patch_group": {
        "fetch": {
            "all_args": [
                "PatchGroup",
                "OperatingSystem"
            ],
            "docstring": "ssm.get_patch_baseline_for_patch_group(['PatchGroup'])",
            "method_name": "get_patch_baseline_for_patch_group",
            "required_args": [
                "PatchGroup"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(PatchGroup)>",
        "result_key": "PatchGroup"
    },
    "ssm_patch_group_patch_baseline_mapping": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_patch_groups([])",
            "method_name": "describe_patch_groups",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(PatchGroupPatchBaselineMapping)>",
        "parametrize_id_source": [
            "BaselineIdentity"
        ],
        "result_key": "Mappings"
    },
    "ssm_patch_groups": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchGroupList)>",
        "result_key": "PatchGroups"
    },
    "ssm_patch_id_from_get_patch_baseline": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(PatchId)>",
        "parametrize_id_source": [
            "PatchId"
        ],
        "result_key": "RejectedPatches"
    },
    "ssm_patches_from_describe_available_patches": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_available_patches([])",
            "method_name": "describe_available_patches",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchList)>",
        "result_key": "Patches"
    },
    "ssm_patches_from_describe_instance_patches": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "Filters"
            ],
            "docstring": "ssm.describe_instance_patches(['InstanceId'])",
            "method_name": "describe_instance_patches",
            "required_args": [
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchComplianceDataList)>",
        "result_key": "Patches"
    },
    "ssm_plugin_name": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(CommandPluginName)>",
        "result_key": "PluginName"
    },
    "ssm_priority_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowTaskPriority)>",
        "result_key": "Priority"
    },
    "ssm_priority_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(MaintenanceWindowTaskPriority)>",
        "result_key": "Priority"
    },
    "ssm_product": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "docstring": "ssm.get_deployable_patch_snapshot_for_instance(['InstanceId', 'SnapshotId'])",
            "method_name": "get_deployable_patch_snapshot_for_instance",
            "required_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(Product)>",
        "result_key": "Product"
    },
    "ssm_ps_parameter_name": {
        "fetch": {
            "all_args": [
                "Names",
                "WithDecryption"
            ],
            "docstring": "ssm.get_parameters(['Names'])",
            "method_name": "get_parameters",
            "required_args": [
                "Names"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(PSParameterName)>",
        "parametrize_id_source": [
            "PSParameterName"
        ],
        "result_key": "InvalidParameters"
    },
    "ssm_rejected_patches": {
        "fetch": {
            "all_args": [
                "BaselineId"
            ],
            "docstring": "ssm.get_patch_baseline(['BaselineId'])",
            "method_name": "get_patch_baseline",
            "required_args": [
                "BaselineId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(PatchIdList)>",
        "result_key": "RejectedPatches"
    },
    "ssm_resource_compliance_summary_item": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.list_resource_compliance_summaries([])",
            "method_name": "list_resource_compliance_summaries",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ResourceComplianceSummaryItem)>",
        "parametrize_id_source": [
            "ResourceId"
        ],
        "result_key": "ResourceComplianceSummaryItems"
    },
    "ssm_resource_compliance_summary_items": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.list_resource_compliance_summaries([])",
            "method_name": "list_resource_compliance_summaries",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ResourceComplianceSummaryItemList)>",
        "result_key": "ResourceComplianceSummaryItems"
    },
    "ssm_resource_data_sync_item": {
        "fetch": {
            "all_args": [],
            "docstring": "ssm.list_resource_data_sync([])",
            "method_name": "list_resource_data_sync",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(ResourceDataSyncItem)>",
        "parametrize_id_source": null,
        "result_key": "ResourceDataSyncItems"
    },
    "ssm_resource_data_sync_items": {
        "fetch": {
            "all_args": [],
            "docstring": "ssm.list_resource_data_sync([])",
            "method_name": "list_resource_data_sync",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(ResourceDataSyncItemList)>",
        "result_key": "ResourceDataSyncItems"
    },
    "ssm_response_code": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(ResponseCode)>",
        "result_key": "ResponseCode"
    },
    "ssm_schedule": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowSchedule)>",
        "result_key": "Schedule"
    },
    "ssm_schema_version": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InventoryItemSchemaVersion)>",
        "result_key": "SchemaVersion"
    },
    "ssm_schemas": {
        "fetch": {
            "all_args": [
                "TypeName",
                "SubType"
            ],
            "docstring": "ssm.get_inventory_schema([])",
            "method_name": "get_inventory_schema",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(InventoryItemSchemaResultList)>",
        "result_key": "Schemas"
    },
    "ssm_service_role": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(ServiceRole)>",
        "result_key": "ServiceRole"
    },
    "ssm_service_role_arn": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(ServiceRole)>",
        "result_key": "ServiceRoleArn"
    },
    "ssm_snapshot_download_url": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "docstring": "ssm.get_deployable_patch_snapshot_for_instance(['InstanceId', 'SnapshotId'])",
            "method_name": "get_deployable_patch_snapshot_for_instance",
            "required_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(SnapshotDownloadUrl)>",
        "result_key": "SnapshotDownloadUrl"
    },
    "ssm_snapshot_id": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "docstring": "ssm.get_deployable_patch_snapshot_for_instance(['InstanceId', 'SnapshotId'])",
            "method_name": "get_deployable_patch_snapshot_for_instance",
            "required_args": [
                "InstanceId",
                "SnapshotId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(SnapshotId)>",
        "result_key": "SnapshotId"
    },
    "ssm_standard_error_content": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StandardErrorContent)>",
        "result_key": "StandardErrorContent"
    },
    "ssm_standard_error_url": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(Url)>",
        "result_key": "StandardErrorUrl"
    },
    "ssm_standard_output_content": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StandardOutputContent)>",
        "result_key": "StandardOutputContent"
    },
    "ssm_standard_output_url": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(Url)>",
        "result_key": "StandardOutputUrl"
    },
    "ssm_start_time_from_get_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "StartTime"
    },
    "ssm_start_time_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "StartTime"
    },
    "ssm_start_time_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<Shape(DateTime)>",
        "result_key": "StartTime"
    },
    "ssm_status_details_from_get_command_invocation": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(StatusDetails)>",
        "result_key": "StatusDetails"
    },
    "ssm_status_details_from_get_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatusDetails)>",
        "result_key": "StatusDetails"
    },
    "ssm_status_details_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatusDetails)>",
        "result_key": "StatusDetails"
    },
    "ssm_status_details_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatusDetails)>",
        "result_key": "StatusDetails"
    },
    "ssm_status_from_get_command_invocation": {
        "fetch": {
            "all_args": [
                "CommandId",
                "InstanceId",
                "PluginName"
            ],
            "docstring": "ssm.get_command_invocation(['CommandId', 'InstanceId'])",
            "method_name": "get_command_invocation",
            "required_args": [
                "CommandId",
                "InstanceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(CommandInvocationStatus)>",
        "result_key": "Status"
    },
    "ssm_status_from_get_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatus)>",
        "result_key": "Status"
    },
    "ssm_status_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatus)>",
        "result_key": "Status"
    },
    "ssm_status_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionStatus)>",
        "result_key": "Status"
    },
    "ssm_tag": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId"
            ],
            "docstring": "ssm.list_tags_for_resource(['ResourceType', 'ResourceId'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceType",
                "ResourceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "ssm_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceType",
                "ResourceId"
            ],
            "docstring": "ssm.list_tags_for_resource(['ResourceType', 'ResourceId'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceType",
                "ResourceId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "ssm_target": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(Target)>",
        "parametrize_id_source": null,
        "result_key": "Targets"
    },
    "ssm_targets_from_describe_maintenance_window_targets": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_targets(['WindowId'])",
            "method_name": "describe_maintenance_window_targets",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowTargetList)>",
        "result_key": "Targets"
    },
    "ssm_targets_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(Targets)>",
        "result_key": "Targets"
    },
    "ssm_task_arn_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskArn)>",
        "result_key": "TaskArn"
    },
    "ssm_task_arn_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskArn)>",
        "result_key": "TaskArn"
    },
    "ssm_task_execution_id_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskId)>",
        "result_key": "TaskExecutionId"
    },
    "ssm_task_execution_id_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionTaskId)>",
        "result_key": "TaskExecutionId"
    },
    "ssm_task_ids": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowExecutionTaskIdList)>",
        "result_key": "TaskIds"
    },
    "ssm_task_invocation_parameters": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StructureShape(MaintenanceWindowTaskInvocationParameters)>",
        "result_key": "TaskInvocationParameters"
    },
    "ssm_task_parameters_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowTaskParametersList)>",
        "result_key": "TaskParameters"
    },
    "ssm_task_parameters_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<MapShape(MaintenanceWindowTaskParameters)>",
        "result_key": "TaskParameters"
    },
    "ssm_task_type_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskType)>",
        "result_key": "TaskType"
    },
    "ssm_task_type_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskType)>",
        "result_key": "TaskType"
    },
    "ssm_tasks": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_tasks(['WindowId'])",
            "method_name": "describe_maintenance_window_tasks",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowTaskList)>",
        "result_key": "Tasks"
    },
    "ssm_type": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskType)>",
        "result_key": "Type"
    },
    "ssm_type_name": {
        "fetch": {
            "all_args": [
                "InstanceId",
                "TypeName",
                "Filters"
            ],
            "docstring": "ssm.list_inventory_entries(['InstanceId', 'TypeName'])",
            "method_name": "list_inventory_entries",
            "required_args": [
                "InstanceId",
                "TypeName"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(InventoryItemTypeName)>",
        "result_key": "TypeName"
    },
    "ssm_window_execution_id_from_get_maintenance_window_execution": {
        "fetch": {
            "all_args": [
                "WindowExecutionId"
            ],
            "docstring": "ssm.get_maintenance_window_execution(['WindowExecutionId'])",
            "method_name": "get_maintenance_window_execution",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionId)>",
        "result_key": "WindowExecutionId"
    },
    "ssm_window_execution_id_from_get_maintenance_window_execution_task": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task(['WindowExecutionId', 'TaskId'])",
            "method_name": "get_maintenance_window_execution_task",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionId)>",
        "result_key": "WindowExecutionId"
    },
    "ssm_window_execution_id_from_get_maintenance_window_execution_task_invocation": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowExecutionId)>",
        "result_key": "WindowExecutionId"
    },
    "ssm_window_execution_task_identities": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_execution_tasks(['WindowExecutionId'])",
            "method_name": "describe_maintenance_window_execution_tasks",
            "required_args": [
                "WindowExecutionId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowExecutionTaskIdentityList)>",
        "result_key": "WindowExecutionTaskIdentities"
    },
    "ssm_window_execution_task_invocation_identities": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_execution_task_invocations(['WindowExecutionId', 'TaskId'])",
            "method_name": "describe_maintenance_window_execution_task_invocations",
            "required_args": [
                "WindowExecutionId",
                "TaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowExecutionTaskInvocationIdentityList)>",
        "result_key": "WindowExecutionTaskInvocationIdentities"
    },
    "ssm_window_executions": {
        "fetch": {
            "all_args": [
                "WindowId",
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_window_executions(['WindowId'])",
            "method_name": "describe_maintenance_window_executions",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowExecutionList)>",
        "result_key": "WindowExecutions"
    },
    "ssm_window_id_from_get_maintenance_window": {
        "fetch": {
            "all_args": [
                "WindowId"
            ],
            "docstring": "ssm.get_maintenance_window(['WindowId'])",
            "method_name": "get_maintenance_window",
            "required_args": [
                "WindowId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowId)>",
        "result_key": "WindowId"
    },
    "ssm_window_id_from_get_maintenance_window_task": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowId)>",
        "result_key": "WindowId"
    },
    "ssm_window_identities": {
        "fetch": {
            "all_args": [
                "Filters"
            ],
            "docstring": "ssm.describe_maintenance_windows([])",
            "method_name": "describe_maintenance_windows",
            "required_args": [],
            "service_name": "ssm"
        },
        "output_shape": "<ListShape(MaintenanceWindowIdentityList)>",
        "result_key": "WindowIdentities"
    },
    "ssm_window_target_id": {
        "fetch": {
            "all_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "docstring": "ssm.get_maintenance_window_execution_task_invocation(['WindowExecutionId', 'TaskId', 'InvocationId'])",
            "method_name": "get_maintenance_window_execution_task_invocation",
            "required_args": [
                "WindowExecutionId",
                "TaskId",
                "InvocationId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskTargetId)>",
        "result_key": "WindowTargetId"
    },
    "ssm_window_task_id": {
        "fetch": {
            "all_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "docstring": "ssm.get_maintenance_window_task(['WindowId', 'WindowTaskId'])",
            "method_name": "get_maintenance_window_task",
            "required_args": [
                "WindowId",
                "WindowTaskId"
            ],
            "service_name": "ssm"
        },
        "output_shape": "<StringShape(MaintenanceWindowTaskId)>",
        "result_key": "WindowTaskId"
    },
    "stepfunctions_activities": {
        "fetch": {
            "all_args": [],
            "docstring": "stepfunctions.list_activities([])",
            "method_name": "list_activities",
            "required_args": [],
            "service_name": "stepfunctions"
        },
        "output_shape": "<ListShape(ActivityList)>",
        "result_key": "activities"
    },
    "stepfunctions_activity_arn": {
        "fetch": {
            "all_args": [
                "activityArn"
            ],
            "docstring": "stepfunctions.describe_activity(['activityArn'])",
            "method_name": "describe_activity",
            "required_args": [
                "activityArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "activityArn"
    },
    "stepfunctions_activity_list_item": {
        "fetch": {
            "all_args": [],
            "docstring": "stepfunctions.list_activities([])",
            "method_name": "list_activities",
            "required_args": [],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StructureShape(ActivityListItem)>",
        "parametrize_id_source": [
            "activityArn"
        ],
        "result_key": "activities"
    },
    "stepfunctions_creation_date_from_describe_activity": {
        "fetch": {
            "all_args": [
                "activityArn"
            ],
            "docstring": "stepfunctions.describe_activity(['activityArn'])",
            "method_name": "describe_activity",
            "required_args": [
                "activityArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "creationDate"
    },
    "stepfunctions_creation_date_from_describe_state_machine": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "creationDate"
    },
    "stepfunctions_definition": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Definition)>",
        "result_key": "definition"
    },
    "stepfunctions_events": {
        "fetch": {
            "all_args": [
                "executionArn",
                "reverseOrder"
            ],
            "docstring": "stepfunctions.get_execution_history(['executionArn'])",
            "method_name": "get_execution_history",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<ListShape(HistoryEventList)>",
        "result_key": "events"
    },
    "stepfunctions_execution_arn": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "executionArn"
    },
    "stepfunctions_execution_list_item": {
        "fetch": {
            "all_args": [
                "stateMachineArn",
                "statusFilter"
            ],
            "docstring": "stepfunctions.list_executions(['stateMachineArn'])",
            "method_name": "list_executions",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StructureShape(ExecutionListItem)>",
        "parametrize_id_source": [
            "stateMachineArn"
        ],
        "result_key": "executions"
    },
    "stepfunctions_executions": {
        "fetch": {
            "all_args": [
                "stateMachineArn",
                "statusFilter"
            ],
            "docstring": "stepfunctions.list_executions(['stateMachineArn'])",
            "method_name": "list_executions",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<ListShape(ExecutionList)>",
        "result_key": "executions"
    },
    "stepfunctions_history_event": {
        "fetch": {
            "all_args": [
                "executionArn",
                "reverseOrder"
            ],
            "docstring": "stepfunctions.get_execution_history(['executionArn'])",
            "method_name": "get_execution_history",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StructureShape(HistoryEvent)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "events"
    },
    "stepfunctions_input_from_describe_execution": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Data)>",
        "result_key": "input"
    },
    "stepfunctions_input_from_get_activity_task": {
        "fetch": {
            "all_args": [
                "activityArn",
                "workerName"
            ],
            "docstring": "stepfunctions.get_activity_task(['activityArn'])",
            "method_name": "get_activity_task",
            "required_args": [
                "activityArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Data)>",
        "result_key": "input"
    },
    "stepfunctions_name_from_describe_activity": {
        "fetch": {
            "all_args": [
                "activityArn"
            ],
            "docstring": "stepfunctions.describe_activity(['activityArn'])",
            "method_name": "describe_activity",
            "required_args": [
                "activityArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Name)>",
        "result_key": "name"
    },
    "stepfunctions_name_from_describe_execution": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Name)>",
        "result_key": "name"
    },
    "stepfunctions_name_from_describe_state_machine": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Name)>",
        "result_key": "name"
    },
    "stepfunctions_output": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Data)>",
        "result_key": "output"
    },
    "stepfunctions_role_arn": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "roleArn"
    },
    "stepfunctions_start_date": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "startDate"
    },
    "stepfunctions_state_machine_arn_from_describe_execution": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "stateMachineArn"
    },
    "stepfunctions_state_machine_arn_from_describe_state_machine": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(Arn)>",
        "result_key": "stateMachineArn"
    },
    "stepfunctions_state_machine_list_item": {
        "fetch": {
            "all_args": [],
            "docstring": "stepfunctions.list_state_machines([])",
            "method_name": "list_state_machines",
            "required_args": [],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StructureShape(StateMachineListItem)>",
        "parametrize_id_source": [
            "stateMachineArn"
        ],
        "result_key": "stateMachines"
    },
    "stepfunctions_state_machines": {
        "fetch": {
            "all_args": [],
            "docstring": "stepfunctions.list_state_machines([])",
            "method_name": "list_state_machines",
            "required_args": [],
            "service_name": "stepfunctions"
        },
        "output_shape": "<ListShape(StateMachineList)>",
        "result_key": "stateMachines"
    },
    "stepfunctions_status_from_describe_execution": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(ExecutionStatus)>",
        "result_key": "status"
    },
    "stepfunctions_status_from_describe_state_machine": {
        "fetch": {
            "all_args": [
                "stateMachineArn"
            ],
            "docstring": "stepfunctions.describe_state_machine(['stateMachineArn'])",
            "method_name": "describe_state_machine",
            "required_args": [
                "stateMachineArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(StateMachineStatus)>",
        "result_key": "status"
    },
    "stepfunctions_stop_date": {
        "fetch": {
            "all_args": [
                "executionArn"
            ],
            "docstring": "stepfunctions.describe_execution(['executionArn'])",
            "method_name": "describe_execution",
            "required_args": [
                "executionArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "stopDate"
    },
    "stepfunctions_task_token": {
        "fetch": {
            "all_args": [
                "activityArn",
                "workerName"
            ],
            "docstring": "stepfunctions.get_activity_task(['activityArn'])",
            "method_name": "get_activity_task",
            "required_args": [
                "activityArn"
            ],
            "service_name": "stepfunctions"
        },
        "output_shape": "<StringShape(TaskToken)>",
        "result_key": "taskToken"
    },
    "storagegateway_average_download_rate_limit_in_bits_per_sec": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_bandwidth_rate_limit(['GatewayARN'])",
            "method_name": "describe_bandwidth_rate_limit",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(BandwidthDownloadRateLimit)>",
        "result_key": "AverageDownloadRateLimitInBitsPerSec"
    },
    "storagegateway_average_upload_rate_limit_in_bits_per_sec": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_bandwidth_rate_limit(['GatewayARN'])",
            "method_name": "describe_bandwidth_rate_limit",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(BandwidthUploadRateLimit)>",
        "result_key": "AverageUploadRateLimitInBitsPerSec"
    },
    "storagegateway_cache_allocated_in_bytes": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "CacheAllocatedInBytes"
    },
    "storagegateway_cache_dirty_percentage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(double)>",
        "result_key": "CacheDirtyPercentage"
    },
    "storagegateway_cache_hit_percentage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(double)>",
        "result_key": "CacheHitPercentage"
    },
    "storagegateway_cache_miss_percentage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(double)>",
        "result_key": "CacheMissPercentage"
    },
    "storagegateway_cache_used_percentage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(double)>",
        "result_key": "CacheUsedPercentage"
    },
    "storagegateway_cachedi_scsi_volume": {
        "fetch": {
            "all_args": [
                "VolumeARNs"
            ],
            "docstring": "storagegateway.describe_cached_iscsi_volumes(['VolumeARNs'])",
            "method_name": "describe_cached_iscsi_volumes",
            "required_args": [
                "VolumeARNs"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(CachediSCSIVolume)>",
        "parametrize_id_source": [
            "VolumeARN"
        ],
        "result_key": "CachediSCSIVolumes"
    },
    "storagegateway_cachedi_scsi_volumes": {
        "fetch": {
            "all_args": [
                "VolumeARNs"
            ],
            "docstring": "storagegateway.describe_cached_iscsi_volumes(['VolumeARNs'])",
            "method_name": "describe_cached_iscsi_volumes",
            "required_args": [
                "VolumeARNs"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(CachediSCSIVolumes)>",
        "result_key": "CachediSCSIVolumes"
    },
    "storagegateway_chap_credentials": {
        "fetch": {
            "all_args": [
                "TargetARN"
            ],
            "docstring": "storagegateway.describe_chap_credentials(['TargetARN'])",
            "method_name": "describe_chap_credentials",
            "required_args": [
                "TargetARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(ChapCredentials)>",
        "result_key": "ChapCredentials"
    },
    "storagegateway_chap_info": {
        "fetch": {
            "all_args": [
                "TargetARN"
            ],
            "docstring": "storagegateway.describe_chap_credentials(['TargetARN'])",
            "method_name": "describe_chap_credentials",
            "required_args": [
                "TargetARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(ChapInfo)>",
        "parametrize_id_source": [
            "TargetARN"
        ],
        "result_key": "ChapCredentials"
    },
    "storagegateway_day_of_week": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_maintenance_start_time(['GatewayARN'])",
            "method_name": "describe_maintenance_start_time",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(DayOfWeek)>",
        "result_key": "DayOfWeek"
    },
    "storagegateway_description": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.describe_snapshot_schedule(['VolumeARN'])",
            "method_name": "describe_snapshot_schedule",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(Description)>",
        "result_key": "Description"
    },
    "storagegateway_disk": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_local_disks(['GatewayARN'])",
            "method_name": "list_local_disks",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(Disk)>",
        "parametrize_id_source": [
            "DiskId"
        ],
        "result_key": "Disks"
    },
    "storagegateway_disk_id_from_describe_cache": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(DiskId)>",
        "parametrize_id_source": [
            "DiskId"
        ],
        "result_key": "DiskIds"
    },
    "storagegateway_disk_id_from_describe_upload_buffer": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_upload_buffer(['GatewayARN'])",
            "method_name": "describe_upload_buffer",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(DiskId)>",
        "parametrize_id_source": [
            "DiskId"
        ],
        "result_key": "DiskIds"
    },
    "storagegateway_disk_id_from_describe_working_storage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_working_storage(['GatewayARN'])",
            "method_name": "describe_working_storage",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(DiskId)>",
        "parametrize_id_source": [
            "DiskId"
        ],
        "result_key": "DiskIds"
    },
    "storagegateway_disk_ids_from_describe_cache": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(DiskIds)>",
        "result_key": "DiskIds"
    },
    "storagegateway_disk_ids_from_describe_upload_buffer": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_upload_buffer(['GatewayARN'])",
            "method_name": "describe_upload_buffer",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(DiskIds)>",
        "result_key": "DiskIds"
    },
    "storagegateway_disk_ids_from_describe_working_storage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_working_storage(['GatewayARN'])",
            "method_name": "describe_working_storage",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(DiskIds)>",
        "result_key": "DiskIds"
    },
    "storagegateway_disks": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_local_disks(['GatewayARN'])",
            "method_name": "list_local_disks",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(Disks)>",
        "result_key": "Disks"
    },
    "storagegateway_file_share_info": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_file_shares([])",
            "method_name": "list_file_shares",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(FileShareInfo)>",
        "parametrize_id_source": [
            "GatewayARN"
        ],
        "result_key": "FileShareInfoList"
    },
    "storagegateway_file_share_info_list": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_file_shares([])",
            "method_name": "list_file_shares",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(FileShareInfoList)>",
        "result_key": "FileShareInfoList"
    },
    "storagegateway_gateway_arn_from_describe_bandwidth_rate_limit": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_bandwidth_rate_limit(['GatewayARN'])",
            "method_name": "describe_bandwidth_rate_limit",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_cache": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_cache(['GatewayARN'])",
            "method_name": "describe_cache",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_gateway_information": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_maintenance_start_time": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_maintenance_start_time(['GatewayARN'])",
            "method_name": "describe_maintenance_start_time",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_tape_recovery_points": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tape_recovery_points(['GatewayARN'])",
            "method_name": "describe_tape_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_upload_buffer": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_upload_buffer(['GatewayARN'])",
            "method_name": "describe_upload_buffer",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_vtl_devices": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "VTLDeviceARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_vtl_devices(['GatewayARN'])",
            "method_name": "describe_vtl_devices",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_describe_working_storage": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_working_storage(['GatewayARN'])",
            "method_name": "describe_working_storage",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_list_local_disks": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_local_disks(['GatewayARN'])",
            "method_name": "list_local_disks",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_list_volume_recovery_points": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_volume_recovery_points(['GatewayARN'])",
            "method_name": "list_volume_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_arn_from_list_volumes": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_volumes([])",
            "method_name": "list_volumes",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayARN)>",
        "result_key": "GatewayARN"
    },
    "storagegateway_gateway_id": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayId)>",
        "result_key": "GatewayId"
    },
    "storagegateway_gateway_info": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "storagegateway.list_gateways([])",
            "method_name": "list_gateways",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(GatewayInfo)>",
        "parametrize_id_source": [
            "GatewayId"
        ],
        "result_key": "Gateways"
    },
    "storagegateway_gateway_name": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(string)>",
        "result_key": "GatewayName"
    },
    "storagegateway_gateway_network_interfaces": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(GatewayNetworkInterfaces)>",
        "result_key": "GatewayNetworkInterfaces"
    },
    "storagegateway_gateway_state": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayState)>",
        "result_key": "GatewayState"
    },
    "storagegateway_gateway_timezone": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayTimezone)>",
        "result_key": "GatewayTimezone"
    },
    "storagegateway_gateway_type": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayType)>",
        "result_key": "GatewayType"
    },
    "storagegateway_gateways": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "storagegateway.list_gateways([])",
            "method_name": "list_gateways",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(Gateways)>",
        "result_key": "Gateways"
    },
    "storagegateway_hour_of_day": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_maintenance_start_time(['GatewayARN'])",
            "method_name": "describe_maintenance_start_time",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(HourOfDay)>",
        "result_key": "HourOfDay"
    },
    "storagegateway_initiator": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.list_volume_initiators(['VolumeARN'])",
            "method_name": "list_volume_initiators",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(Initiator)>",
        "parametrize_id_source": [
            "Initiator"
        ],
        "result_key": "Initiators"
    },
    "storagegateway_initiators": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.list_volume_initiators(['VolumeARN'])",
            "method_name": "list_volume_initiators",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(Initiators)>",
        "result_key": "Initiators"
    },
    "storagegateway_last_software_update": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(LastSoftwareUpdate)>",
        "result_key": "LastSoftwareUpdate"
    },
    "storagegateway_minute_of_hour": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_maintenance_start_time(['GatewayARN'])",
            "method_name": "describe_maintenance_start_time",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(MinuteOfHour)>",
        "result_key": "MinuteOfHour"
    },
    "storagegateway_network_interface": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(NetworkInterface)>",
        "parametrize_id_source": null,
        "result_key": "GatewayNetworkInterfaces"
    },
    "storagegateway_next_update_availability_date": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_gateway_information(['GatewayARN'])",
            "method_name": "describe_gateway_information",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(NextUpdateAvailabilityDate)>",
        "result_key": "NextUpdateAvailabilityDate"
    },
    "storagegateway_nfs_file_share_info": {
        "fetch": {
            "all_args": [
                "FileShareARNList"
            ],
            "docstring": "storagegateway.describe_nfs_file_shares(['FileShareARNList'])",
            "method_name": "describe_nfs_file_shares",
            "required_args": [
                "FileShareARNList"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(NFSFileShareInfo)>",
        "parametrize_id_source": [
            "FileShareARN"
        ],
        "result_key": "NFSFileShareInfoList"
    },
    "storagegateway_nfs_file_share_info_list": {
        "fetch": {
            "all_args": [
                "FileShareARNList"
            ],
            "docstring": "storagegateway.describe_nfs_file_shares(['FileShareARNList'])",
            "method_name": "describe_nfs_file_shares",
            "required_args": [
                "FileShareARNList"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(NFSFileShareInfoList)>",
        "result_key": "NFSFileShareInfoList"
    },
    "storagegateway_recurrence_in_hours": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.describe_snapshot_schedule(['VolumeARN'])",
            "method_name": "describe_snapshot_schedule",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(RecurrenceInHours)>",
        "result_key": "RecurrenceInHours"
    },
    "storagegateway_resource_arn": {
        "fetch": {
            "all_args": [
                "ResourceARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_tags_for_resource(['ResourceARN'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(ResourceARN)>",
        "result_key": "ResourceARN"
    },
    "storagegateway_start_at": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.describe_snapshot_schedule(['VolumeARN'])",
            "method_name": "describe_snapshot_schedule",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(HourOfDay)>",
        "result_key": "StartAt"
    },
    "storagegateway_storedi_scsi_volume": {
        "fetch": {
            "all_args": [
                "VolumeARNs"
            ],
            "docstring": "storagegateway.describe_stored_iscsi_volumes(['VolumeARNs'])",
            "method_name": "describe_stored_iscsi_volumes",
            "required_args": [
                "VolumeARNs"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(StorediSCSIVolume)>",
        "parametrize_id_source": [
            "VolumeARN"
        ],
        "result_key": "StorediSCSIVolumes"
    },
    "storagegateway_storedi_scsi_volumes": {
        "fetch": {
            "all_args": [
                "VolumeARNs"
            ],
            "docstring": "storagegateway.describe_stored_iscsi_volumes(['VolumeARNs'])",
            "method_name": "describe_stored_iscsi_volumes",
            "required_args": [
                "VolumeARNs"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(StorediSCSIVolumes)>",
        "result_key": "StorediSCSIVolumes"
    },
    "storagegateway_tag": {
        "fetch": {
            "all_args": [
                "ResourceARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_tags_for_resource(['ResourceARN'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "Tags"
    },
    "storagegateway_tags": {
        "fetch": {
            "all_args": [
                "ResourceARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_tags_for_resource(['ResourceARN'])",
            "method_name": "list_tags_for_resource",
            "required_args": [
                "ResourceARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(Tags)>",
        "result_key": "Tags"
    },
    "storagegateway_tape": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tapes(['GatewayARN'])",
            "method_name": "describe_tapes",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(Tape)>",
        "parametrize_id_source": [
            "TapeARN"
        ],
        "result_key": "Tapes"
    },
    "storagegateway_tape_archive": {
        "fetch": {
            "all_args": [
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tape_archives([])",
            "method_name": "describe_tape_archives",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(TapeArchive)>",
        "parametrize_id_source": [
            "TapeARN"
        ],
        "result_key": "TapeArchives"
    },
    "storagegateway_tape_archives": {
        "fetch": {
            "all_args": [
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tape_archives([])",
            "method_name": "describe_tape_archives",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(TapeArchives)>",
        "result_key": "TapeArchives"
    },
    "storagegateway_tape_info": {
        "fetch": {
            "all_args": [
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.list_tapes([])",
            "method_name": "list_tapes",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(TapeInfo)>",
        "parametrize_id_source": [
            "TapeARN"
        ],
        "result_key": "TapeInfos"
    },
    "storagegateway_tape_infos": {
        "fetch": {
            "all_args": [
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.list_tapes([])",
            "method_name": "list_tapes",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(TapeInfos)>",
        "result_key": "TapeInfos"
    },
    "storagegateway_tape_recovery_point_info": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tape_recovery_points(['GatewayARN'])",
            "method_name": "describe_tape_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(TapeRecoveryPointInfo)>",
        "parametrize_id_source": [
            "TapeARN"
        ],
        "result_key": "TapeRecoveryPointInfos"
    },
    "storagegateway_tape_recovery_point_infos": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tape_recovery_points(['GatewayARN'])",
            "method_name": "describe_tape_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(TapeRecoveryPointInfos)>",
        "result_key": "TapeRecoveryPointInfos"
    },
    "storagegateway_tapes": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "TapeARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_tapes(['GatewayARN'])",
            "method_name": "describe_tapes",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(Tapes)>",
        "result_key": "Tapes"
    },
    "storagegateway_timezone_from_describe_maintenance_start_time": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_maintenance_start_time(['GatewayARN'])",
            "method_name": "describe_maintenance_start_time",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayTimezone)>",
        "result_key": "Timezone"
    },
    "storagegateway_timezone_from_describe_snapshot_schedule": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.describe_snapshot_schedule(['VolumeARN'])",
            "method_name": "describe_snapshot_schedule",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(GatewayTimezone)>",
        "result_key": "Timezone"
    },
    "storagegateway_upload_buffer_allocated_in_bytes": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_upload_buffer(['GatewayARN'])",
            "method_name": "describe_upload_buffer",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "UploadBufferAllocatedInBytes"
    },
    "storagegateway_upload_buffer_used_in_bytes": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_upload_buffer(['GatewayARN'])",
            "method_name": "describe_upload_buffer",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "UploadBufferUsedInBytes"
    },
    "storagegateway_volume_arn": {
        "fetch": {
            "all_args": [
                "VolumeARN"
            ],
            "docstring": "storagegateway.describe_snapshot_schedule(['VolumeARN'])",
            "method_name": "describe_snapshot_schedule",
            "required_args": [
                "VolumeARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StringShape(VolumeARN)>",
        "result_key": "VolumeARN"
    },
    "storagegateway_volume_info": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_volumes([])",
            "method_name": "list_volumes",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(VolumeInfo)>",
        "parametrize_id_source": [
            "GatewayARN"
        ],
        "result_key": "VolumeInfos"
    },
    "storagegateway_volume_infos": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "Limit"
            ],
            "docstring": "storagegateway.list_volumes([])",
            "method_name": "list_volumes",
            "required_args": [],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(VolumeInfos)>",
        "result_key": "VolumeInfos"
    },
    "storagegateway_volume_recovery_point_info": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_volume_recovery_points(['GatewayARN'])",
            "method_name": "list_volume_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(VolumeRecoveryPointInfo)>",
        "parametrize_id_source": [
            "VolumeARN"
        ],
        "result_key": "VolumeRecoveryPointInfos"
    },
    "storagegateway_volume_recovery_point_infos": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.list_volume_recovery_points(['GatewayARN'])",
            "method_name": "list_volume_recovery_points",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(VolumeRecoveryPointInfos)>",
        "result_key": "VolumeRecoveryPointInfos"
    },
    "storagegateway_vtl_device": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "VTLDeviceARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_vtl_devices(['GatewayARN'])",
            "method_name": "describe_vtl_devices",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<StructureShape(VTLDevice)>",
        "parametrize_id_source": [
            "VTLDeviceARN"
        ],
        "result_key": "VTLDevices"
    },
    "storagegateway_vtl_devices": {
        "fetch": {
            "all_args": [
                "GatewayARN",
                "VTLDeviceARNs",
                "Limit"
            ],
            "docstring": "storagegateway.describe_vtl_devices(['GatewayARN'])",
            "method_name": "describe_vtl_devices",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<ListShape(VTLDevices)>",
        "result_key": "VTLDevices"
    },
    "storagegateway_working_storage_allocated_in_bytes": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_working_storage(['GatewayARN'])",
            "method_name": "describe_working_storage",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "WorkingStorageAllocatedInBytes"
    },
    "storagegateway_working_storage_used_in_bytes": {
        "fetch": {
            "all_args": [
                "GatewayARN"
            ],
            "docstring": "storagegateway.describe_working_storage(['GatewayARN'])",
            "method_name": "describe_working_storage",
            "required_args": [
                "GatewayARN"
            ],
            "service_name": "storagegateway"
        },
        "output_shape": "<Shape(long)>",
        "result_key": "WorkingStorageUsedInBytes"
    },
    "sts_account": {
        "fetch": {
            "all_args": [],
            "docstring": "sts.get_caller_identity([])",
            "method_name": "get_caller_identity",
            "required_args": [],
            "service_name": "sts"
        },
        "output_shape": "<StringShape(accountType)>",
        "result_key": "Account"
    },
    "sts_arn": {
        "fetch": {
            "all_args": [],
            "docstring": "sts.get_caller_identity([])",
            "method_name": "get_caller_identity",
            "required_args": [],
            "service_name": "sts"
        },
        "output_shape": "<StringShape(arnType)>",
        "result_key": "Arn"
    },
    "sts_credentials_from_get_federation_token": {
        "fetch": {
            "all_args": [
                "Name",
                "Policy",
                "DurationSeconds"
            ],
            "docstring": "sts.get_federation_token(['Name'])",
            "method_name": "get_federation_token",
            "required_args": [
                "Name"
            ],
            "service_name": "sts"
        },
        "output_shape": "<StructureShape(Credentials)>",
        "result_key": "Credentials"
    },
    "sts_credentials_from_get_session_token": {
        "fetch": {
            "all_args": [
                "DurationSeconds",
                "SerialNumber",
                "TokenCode"
            ],
            "docstring": "sts.get_session_token([])",
            "method_name": "get_session_token",
            "required_args": [],
            "service_name": "sts"
        },
        "output_shape": "<StructureShape(Credentials)>",
        "result_key": "Credentials"
    },
    "sts_federated_user": {
        "fetch": {
            "all_args": [
                "Name",
                "Policy",
                "DurationSeconds"
            ],
            "docstring": "sts.get_federation_token(['Name'])",
            "method_name": "get_federation_token",
            "required_args": [
                "Name"
            ],
            "service_name": "sts"
        },
        "output_shape": "<StructureShape(FederatedUser)>",
        "result_key": "FederatedUser"
    },
    "sts_packed_policy_size": {
        "fetch": {
            "all_args": [
                "Name",
                "Policy",
                "DurationSeconds"
            ],
            "docstring": "sts.get_federation_token(['Name'])",
            "method_name": "get_federation_token",
            "required_args": [
                "Name"
            ],
            "service_name": "sts"
        },
        "output_shape": "<Shape(nonNegativeIntegerType)>",
        "result_key": "PackedPolicySize"
    },
    "sts_user_id": {
        "fetch": {
            "all_args": [],
            "docstring": "sts.get_caller_identity([])",
            "method_name": "get_caller_identity",
            "required_args": [],
            "service_name": "sts"
        },
        "output_shape": "<StringShape(userIdType)>",
        "result_key": "UserId"
    },
    "support_attachment": {
        "fetch": {
            "all_args": [
                "attachmentId"
            ],
            "docstring": "support.describe_attachment(['attachmentId'])",
            "method_name": "describe_attachment",
            "required_args": [
                "attachmentId"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(Attachment)>",
        "result_key": "attachment"
    },
    "support_case_details": {
        "fetch": {
            "all_args": [
                "caseIdList",
                "displayId",
                "afterTime",
                "beforeTime",
                "includeResolvedCases",
                "language",
                "includeCommunications"
            ],
            "docstring": "support.describe_cases([])",
            "method_name": "describe_cases",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(CaseDetails)>",
        "parametrize_id_source": [
            "caseId"
        ],
        "result_key": "cases"
    },
    "support_cases": {
        "fetch": {
            "all_args": [
                "caseIdList",
                "displayId",
                "afterTime",
                "beforeTime",
                "includeResolvedCases",
                "language",
                "includeCommunications"
            ],
            "docstring": "support.describe_cases([])",
            "method_name": "describe_cases",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<ListShape(CaseList)>",
        "result_key": "cases"
    },
    "support_checks": {
        "fetch": {
            "all_args": [
                "language"
            ],
            "docstring": "support.describe_trusted_advisor_checks(['language'])",
            "method_name": "describe_trusted_advisor_checks",
            "required_args": [
                "language"
            ],
            "service_name": "support"
        },
        "output_shape": "<ListShape(TrustedAdvisorCheckList)>",
        "result_key": "checks"
    },
    "support_communication": {
        "fetch": {
            "all_args": [
                "caseId",
                "beforeTime",
                "afterTime"
            ],
            "docstring": "support.describe_communications(['caseId'])",
            "method_name": "describe_communications",
            "required_args": [
                "caseId"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(Communication)>",
        "parametrize_id_source": [
            "caseId"
        ],
        "result_key": "communications"
    },
    "support_communications": {
        "fetch": {
            "all_args": [
                "caseId",
                "beforeTime",
                "afterTime"
            ],
            "docstring": "support.describe_communications(['caseId'])",
            "method_name": "describe_communications",
            "required_args": [
                "caseId"
            ],
            "service_name": "support"
        },
        "output_shape": "<ListShape(CommunicationList)>",
        "result_key": "communications"
    },
    "support_result": {
        "fetch": {
            "all_args": [
                "checkId",
                "language"
            ],
            "docstring": "support.describe_trusted_advisor_check_result(['checkId'])",
            "method_name": "describe_trusted_advisor_check_result",
            "required_args": [
                "checkId"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(TrustedAdvisorCheckResult)>",
        "result_key": "result"
    },
    "support_service": {
        "fetch": {
            "all_args": [
                "serviceCodeList",
                "language"
            ],
            "docstring": "support.describe_services([])",
            "method_name": "describe_services",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(Service)>",
        "parametrize_id_source": null,
        "result_key": "services"
    },
    "support_services": {
        "fetch": {
            "all_args": [
                "serviceCodeList",
                "language"
            ],
            "docstring": "support.describe_services([])",
            "method_name": "describe_services",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<ListShape(ServiceList)>",
        "result_key": "services"
    },
    "support_severity_level": {
        "fetch": {
            "all_args": [
                "language"
            ],
            "docstring": "support.describe_severity_levels([])",
            "method_name": "describe_severity_levels",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(SeverityLevel)>",
        "parametrize_id_source": null,
        "result_key": "severityLevels"
    },
    "support_severity_levels": {
        "fetch": {
            "all_args": [
                "language"
            ],
            "docstring": "support.describe_severity_levels([])",
            "method_name": "describe_severity_levels",
            "required_args": [],
            "service_name": "support"
        },
        "output_shape": "<ListShape(SeverityLevelsList)>",
        "result_key": "severityLevels"
    },
    "support_statuses": {
        "fetch": {
            "all_args": [
                "checkIds"
            ],
            "docstring": "support.describe_trusted_advisor_check_refresh_statuses(['checkIds'])",
            "method_name": "describe_trusted_advisor_check_refresh_statuses",
            "required_args": [
                "checkIds"
            ],
            "service_name": "support"
        },
        "output_shape": "<ListShape(TrustedAdvisorCheckRefreshStatusList)>",
        "result_key": "statuses"
    },
    "support_summaries": {
        "fetch": {
            "all_args": [
                "checkIds"
            ],
            "docstring": "support.describe_trusted_advisor_check_summaries(['checkIds'])",
            "method_name": "describe_trusted_advisor_check_summaries",
            "required_args": [
                "checkIds"
            ],
            "service_name": "support"
        },
        "output_shape": "<ListShape(TrustedAdvisorCheckSummaryList)>",
        "result_key": "summaries"
    },
    "support_trusted_advisor_check_description": {
        "fetch": {
            "all_args": [
                "language"
            ],
            "docstring": "support.describe_trusted_advisor_checks(['language'])",
            "method_name": "describe_trusted_advisor_checks",
            "required_args": [
                "language"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(TrustedAdvisorCheckDescription)>",
        "parametrize_id_source": [
            "id"
        ],
        "result_key": "checks"
    },
    "support_trusted_advisor_check_refresh_status": {
        "fetch": {
            "all_args": [
                "checkIds"
            ],
            "docstring": "support.describe_trusted_advisor_check_refresh_statuses(['checkIds'])",
            "method_name": "describe_trusted_advisor_check_refresh_statuses",
            "required_args": [
                "checkIds"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(TrustedAdvisorCheckRefreshStatus)>",
        "parametrize_id_source": [
            "checkId"
        ],
        "result_key": "statuses"
    },
    "support_trusted_advisor_check_summary": {
        "fetch": {
            "all_args": [
                "checkIds"
            ],
            "docstring": "support.describe_trusted_advisor_check_summaries(['checkIds'])",
            "method_name": "describe_trusted_advisor_check_summaries",
            "required_args": [
                "checkIds"
            ],
            "service_name": "support"
        },
        "output_shape": "<StructureShape(TrustedAdvisorCheckSummary)>",
        "parametrize_id_source": [
            "checkId"
        ],
        "result_key": "summaries"
    },
    "swf_activity_type_info": {
        "fetch": {
            "all_args": [
                "domain",
                "name",
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_activity_types(['domain', 'registrationStatus'])",
            "method_name": "list_activity_types",
            "required_args": [
                "domain",
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(ActivityTypeInfo)>",
        "parametrize_id_source": null,
        "result_key": "typeInfos"
    },
    "swf_configuration_from_describe_activity_type": {
        "fetch": {
            "all_args": [
                "domain",
                "activityType"
            ],
            "docstring": "swf.describe_activity_type(['domain', 'activityType'])",
            "method_name": "describe_activity_type",
            "required_args": [
                "domain",
                "activityType"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(ActivityTypeConfiguration)>",
        "result_key": "configuration"
    },
    "swf_configuration_from_describe_domain": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "swf.describe_domain(['name'])",
            "method_name": "describe_domain",
            "required_args": [
                "name"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(DomainConfiguration)>",
        "result_key": "configuration"
    },
    "swf_configuration_from_describe_workflow_type": {
        "fetch": {
            "all_args": [
                "domain",
                "workflowType"
            ],
            "docstring": "swf.describe_workflow_type(['domain', 'workflowType'])",
            "method_name": "describe_workflow_type",
            "required_args": [
                "domain",
                "workflowType"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowTypeConfiguration)>",
        "result_key": "configuration"
    },
    "swf_domain_info_from_describe_domain": {
        "fetch": {
            "all_args": [
                "name"
            ],
            "docstring": "swf.describe_domain(['name'])",
            "method_name": "describe_domain",
            "required_args": [
                "name"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(DomainInfo)>",
        "result_key": "domainInfo"
    },
    "swf_domain_info_from_list_domains": {
        "fetch": {
            "all_args": [
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_domains(['registrationStatus'])",
            "method_name": "list_domains",
            "required_args": [
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(DomainInfo)>",
        "parametrize_id_source": null,
        "result_key": "domainInfos"
    },
    "swf_domain_infos": {
        "fetch": {
            "all_args": [
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_domains(['registrationStatus'])",
            "method_name": "list_domains",
            "required_args": [
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(DomainInfoList)>",
        "result_key": "domainInfos"
    },
    "swf_events": {
        "fetch": {
            "all_args": [
                "domain",
                "execution",
                "reverseOrder"
            ],
            "docstring": "swf.get_workflow_execution_history(['domain', 'execution'])",
            "method_name": "get_workflow_execution_history",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(HistoryEventList)>",
        "result_key": "events"
    },
    "swf_execution_configuration": {
        "fetch": {
            "all_args": [
                "domain",
                "execution"
            ],
            "docstring": "swf.describe_workflow_execution(['domain', 'execution'])",
            "method_name": "describe_workflow_execution",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowExecutionConfiguration)>",
        "result_key": "executionConfiguration"
    },
    "swf_execution_info": {
        "fetch": {
            "all_args": [
                "domain",
                "execution"
            ],
            "docstring": "swf.describe_workflow_execution(['domain', 'execution'])",
            "method_name": "describe_workflow_execution",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowExecutionInfo)>",
        "result_key": "executionInfo"
    },
    "swf_execution_infos_from_list_closed_workflow_executions": {
        "fetch": {
            "all_args": [
                "domain",
                "startTimeFilter",
                "closeTimeFilter",
                "executionFilter",
                "closeStatusFilter",
                "typeFilter",
                "tagFilter",
                "reverseOrder"
            ],
            "docstring": "swf.list_closed_workflow_executions(['domain'])",
            "method_name": "list_closed_workflow_executions",
            "required_args": [
                "domain"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(WorkflowExecutionInfoList)>",
        "result_key": "executionInfos"
    },
    "swf_execution_infos_from_list_open_workflow_executions": {
        "fetch": {
            "all_args": [
                "domain",
                "startTimeFilter",
                "typeFilter",
                "tagFilter",
                "reverseOrder",
                "executionFilter"
            ],
            "docstring": "swf.list_open_workflow_executions(['domain', 'startTimeFilter'])",
            "method_name": "list_open_workflow_executions",
            "required_args": [
                "domain",
                "startTimeFilter"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(WorkflowExecutionInfoList)>",
        "result_key": "executionInfos"
    },
    "swf_history_event": {
        "fetch": {
            "all_args": [
                "domain",
                "execution",
                "reverseOrder"
            ],
            "docstring": "swf.get_workflow_execution_history(['domain', 'execution'])",
            "method_name": "get_workflow_execution_history",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(HistoryEvent)>",
        "parametrize_id_source": [
            "eventId"
        ],
        "result_key": "events"
    },
    "swf_latest_activity_task_timestamp": {
        "fetch": {
            "all_args": [
                "domain",
                "execution"
            ],
            "docstring": "swf.describe_workflow_execution(['domain', 'execution'])",
            "method_name": "describe_workflow_execution",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "latestActivityTaskTimestamp"
    },
    "swf_latest_execution_context": {
        "fetch": {
            "all_args": [
                "domain",
                "execution"
            ],
            "docstring": "swf.describe_workflow_execution(['domain', 'execution'])",
            "method_name": "describe_workflow_execution",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StringShape(Data)>",
        "result_key": "latestExecutionContext"
    },
    "swf_open_counts": {
        "fetch": {
            "all_args": [
                "domain",
                "execution"
            ],
            "docstring": "swf.describe_workflow_execution(['domain', 'execution'])",
            "method_name": "describe_workflow_execution",
            "required_args": [
                "domain",
                "execution"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowExecutionOpenCounts)>",
        "result_key": "openCounts"
    },
    "swf_type_info_from_describe_activity_type": {
        "fetch": {
            "all_args": [
                "domain",
                "activityType"
            ],
            "docstring": "swf.describe_activity_type(['domain', 'activityType'])",
            "method_name": "describe_activity_type",
            "required_args": [
                "domain",
                "activityType"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(ActivityTypeInfo)>",
        "result_key": "typeInfo"
    },
    "swf_type_info_from_describe_workflow_type": {
        "fetch": {
            "all_args": [
                "domain",
                "workflowType"
            ],
            "docstring": "swf.describe_workflow_type(['domain', 'workflowType'])",
            "method_name": "describe_workflow_type",
            "required_args": [
                "domain",
                "workflowType"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowTypeInfo)>",
        "result_key": "typeInfo"
    },
    "swf_type_infos_from_list_activity_types": {
        "fetch": {
            "all_args": [
                "domain",
                "name",
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_activity_types(['domain', 'registrationStatus'])",
            "method_name": "list_activity_types",
            "required_args": [
                "domain",
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(ActivityTypeInfoList)>",
        "result_key": "typeInfos"
    },
    "swf_type_infos_from_list_workflow_types": {
        "fetch": {
            "all_args": [
                "domain",
                "name",
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_workflow_types(['domain', 'registrationStatus'])",
            "method_name": "list_workflow_types",
            "required_args": [
                "domain",
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<ListShape(WorkflowTypeInfoList)>",
        "result_key": "typeInfos"
    },
    "swf_workflow_execution_info_from_list_closed_workflow_executions": {
        "fetch": {
            "all_args": [
                "domain",
                "startTimeFilter",
                "closeTimeFilter",
                "executionFilter",
                "closeStatusFilter",
                "typeFilter",
                "tagFilter",
                "reverseOrder"
            ],
            "docstring": "swf.list_closed_workflow_executions(['domain'])",
            "method_name": "list_closed_workflow_executions",
            "required_args": [
                "domain"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowExecutionInfo)>",
        "parametrize_id_source": [
            "execution"
        ],
        "result_key": "executionInfos"
    },
    "swf_workflow_execution_info_from_list_open_workflow_executions": {
        "fetch": {
            "all_args": [
                "domain",
                "startTimeFilter",
                "typeFilter",
                "tagFilter",
                "reverseOrder",
                "executionFilter"
            ],
            "docstring": "swf.list_open_workflow_executions(['domain', 'startTimeFilter'])",
            "method_name": "list_open_workflow_executions",
            "required_args": [
                "domain",
                "startTimeFilter"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowExecutionInfo)>",
        "parametrize_id_source": [
            "execution"
        ],
        "result_key": "executionInfos"
    },
    "swf_workflow_type_info": {
        "fetch": {
            "all_args": [
                "domain",
                "name",
                "registrationStatus",
                "reverseOrder"
            ],
            "docstring": "swf.list_workflow_types(['domain', 'registrationStatus'])",
            "method_name": "list_workflow_types",
            "required_args": [
                "domain",
                "registrationStatus"
            ],
            "service_name": "swf"
        },
        "output_shape": "<StructureShape(WorkflowTypeInfo)>",
        "parametrize_id_source": null,
        "result_key": "typeInfos"
    },
    "waf_byte_match_set": {
        "fetch": {
            "all_args": [
                "ByteMatchSetId"
            ],
            "docstring": "waf.get_byte_match_set(['ByteMatchSetId'])",
            "method_name": "get_byte_match_set",
            "required_args": [
                "ByteMatchSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(ByteMatchSet)>",
        "result_key": "ByteMatchSet"
    },
    "waf_byte_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_byte_match_sets([])",
            "method_name": "list_byte_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(ByteMatchSetSummary)>",
        "parametrize_id_source": [
            "ByteMatchSetId"
        ],
        "result_key": "ByteMatchSets"
    },
    "waf_byte_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_byte_match_sets([])",
            "method_name": "list_byte_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(ByteMatchSetSummaries)>",
        "result_key": "ByteMatchSets"
    },
    "waf_change_token": {
        "fetch": {
            "all_args": [],
            "docstring": "waf.get_change_token([])",
            "method_name": "get_change_token",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StringShape(ChangeToken)>",
        "result_key": "ChangeToken"
    },
    "waf_change_token_status": {
        "fetch": {
            "all_args": [
                "ChangeToken"
            ],
            "docstring": "waf.get_change_token_status(['ChangeToken'])",
            "method_name": "get_change_token_status",
            "required_args": [
                "ChangeToken"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StringShape(ChangeTokenStatus)>",
        "result_key": "ChangeTokenStatus"
    },
    "waf_geo_match_set": {
        "fetch": {
            "all_args": [
                "GeoMatchSetId"
            ],
            "docstring": "waf.get_geo_match_set(['GeoMatchSetId'])",
            "method_name": "get_geo_match_set",
            "required_args": [
                "GeoMatchSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(GeoMatchSet)>",
        "result_key": "GeoMatchSet"
    },
    "waf_geo_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_geo_match_sets([])",
            "method_name": "list_geo_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(GeoMatchSetSummary)>",
        "parametrize_id_source": [
            "GeoMatchSetId"
        ],
        "result_key": "GeoMatchSets"
    },
    "waf_geo_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_geo_match_sets([])",
            "method_name": "list_geo_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(GeoMatchSetSummaries)>",
        "result_key": "GeoMatchSets"
    },
    "waf_ip_set": {
        "fetch": {
            "all_args": [
                "IPSetId"
            ],
            "docstring": "waf.get_ip_set(['IPSetId'])",
            "method_name": "get_ip_set",
            "required_args": [
                "IPSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(IPSet)>",
        "result_key": "IPSet"
    },
    "waf_ip_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_ip_sets([])",
            "method_name": "list_ip_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(IPSetSummary)>",
        "parametrize_id_source": [
            "IPSetId"
        ],
        "result_key": "IPSets"
    },
    "waf_ip_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_ip_sets([])",
            "method_name": "list_ip_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(IPSetSummaries)>",
        "result_key": "IPSets"
    },
    "waf_managed_key": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf.get_rate_based_rule_managed_keys(['RuleId'])",
            "method_name": "get_rate_based_rule_managed_keys",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StringShape(ManagedKey)>",
        "parametrize_id_source": [
            "ManagedKey"
        ],
        "result_key": "ManagedKeys"
    },
    "waf_managed_keys": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf.get_rate_based_rule_managed_keys(['RuleId'])",
            "method_name": "get_rate_based_rule_managed_keys",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(ManagedKeys)>",
        "result_key": "ManagedKeys"
    },
    "waf_population_size": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf"
        },
        "output_shape": "<Shape(PopulationSize)>",
        "result_key": "PopulationSize"
    },
    "waf_regex_match_set": {
        "fetch": {
            "all_args": [
                "RegexMatchSetId"
            ],
            "docstring": "waf.get_regex_match_set(['RegexMatchSetId'])",
            "method_name": "get_regex_match_set",
            "required_args": [
                "RegexMatchSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RegexMatchSet)>",
        "result_key": "RegexMatchSet"
    },
    "waf_regex_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_regex_match_sets([])",
            "method_name": "list_regex_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RegexMatchSetSummary)>",
        "parametrize_id_source": [
            "RegexMatchSetId"
        ],
        "result_key": "RegexMatchSets"
    },
    "waf_regex_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_regex_match_sets([])",
            "method_name": "list_regex_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(RegexMatchSetSummaries)>",
        "result_key": "RegexMatchSets"
    },
    "waf_regex_pattern_set": {
        "fetch": {
            "all_args": [
                "RegexPatternSetId"
            ],
            "docstring": "waf.get_regex_pattern_set(['RegexPatternSetId'])",
            "method_name": "get_regex_pattern_set",
            "required_args": [
                "RegexPatternSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RegexPatternSet)>",
        "result_key": "RegexPatternSet"
    },
    "waf_regex_pattern_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_regex_pattern_sets([])",
            "method_name": "list_regex_pattern_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RegexPatternSetSummary)>",
        "parametrize_id_source": [
            "RegexPatternSetId"
        ],
        "result_key": "RegexPatternSets"
    },
    "waf_regex_pattern_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_regex_pattern_sets([])",
            "method_name": "list_regex_pattern_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(RegexPatternSetSummaries)>",
        "result_key": "RegexPatternSets"
    },
    "waf_regional_byte_match_set": {
        "fetch": {
            "all_args": [
                "ByteMatchSetId"
            ],
            "docstring": "waf-regional.get_byte_match_set(['ByteMatchSetId'])",
            "method_name": "get_byte_match_set",
            "required_args": [
                "ByteMatchSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(ByteMatchSet)>",
        "result_key": "ByteMatchSet"
    },
    "waf_regional_byte_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_byte_match_sets([])",
            "method_name": "list_byte_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(ByteMatchSetSummary)>",
        "parametrize_id_source": [
            "ByteMatchSetId"
        ],
        "result_key": "ByteMatchSets"
    },
    "waf_regional_byte_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_byte_match_sets([])",
            "method_name": "list_byte_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(ByteMatchSetSummaries)>",
        "result_key": "ByteMatchSets"
    },
    "waf_regional_change_token": {
        "fetch": {
            "all_args": [],
            "docstring": "waf-regional.get_change_token([])",
            "method_name": "get_change_token",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StringShape(ChangeToken)>",
        "result_key": "ChangeToken"
    },
    "waf_regional_change_token_status": {
        "fetch": {
            "all_args": [
                "ChangeToken"
            ],
            "docstring": "waf-regional.get_change_token_status(['ChangeToken'])",
            "method_name": "get_change_token_status",
            "required_args": [
                "ChangeToken"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StringShape(ChangeTokenStatus)>",
        "result_key": "ChangeTokenStatus"
    },
    "waf_regional_geo_match_set": {
        "fetch": {
            "all_args": [
                "GeoMatchSetId"
            ],
            "docstring": "waf-regional.get_geo_match_set(['GeoMatchSetId'])",
            "method_name": "get_geo_match_set",
            "required_args": [
                "GeoMatchSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(GeoMatchSet)>",
        "result_key": "GeoMatchSet"
    },
    "waf_regional_geo_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_geo_match_sets([])",
            "method_name": "list_geo_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(GeoMatchSetSummary)>",
        "parametrize_id_source": [
            "GeoMatchSetId"
        ],
        "result_key": "GeoMatchSets"
    },
    "waf_regional_geo_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_geo_match_sets([])",
            "method_name": "list_geo_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(GeoMatchSetSummaries)>",
        "result_key": "GeoMatchSets"
    },
    "waf_regional_ip_set": {
        "fetch": {
            "all_args": [
                "IPSetId"
            ],
            "docstring": "waf-regional.get_ip_set(['IPSetId'])",
            "method_name": "get_ip_set",
            "required_args": [
                "IPSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(IPSet)>",
        "result_key": "IPSet"
    },
    "waf_regional_ip_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_ip_sets([])",
            "method_name": "list_ip_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(IPSetSummary)>",
        "parametrize_id_source": [
            "IPSetId"
        ],
        "result_key": "IPSets"
    },
    "waf_regional_ip_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_ip_sets([])",
            "method_name": "list_ip_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(IPSetSummaries)>",
        "result_key": "IPSets"
    },
    "waf_regional_managed_key": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf-regional.get_rate_based_rule_managed_keys(['RuleId'])",
            "method_name": "get_rate_based_rule_managed_keys",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StringShape(ManagedKey)>",
        "parametrize_id_source": [
            "ManagedKey"
        ],
        "result_key": "ManagedKeys"
    },
    "waf_regional_managed_keys": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf-regional.get_rate_based_rule_managed_keys(['RuleId'])",
            "method_name": "get_rate_based_rule_managed_keys",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(ManagedKeys)>",
        "result_key": "ManagedKeys"
    },
    "waf_regional_population_size": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf-regional.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<Shape(PopulationSize)>",
        "result_key": "PopulationSize"
    },
    "waf_regional_regex_match_set": {
        "fetch": {
            "all_args": [
                "RegexMatchSetId"
            ],
            "docstring": "waf-regional.get_regex_match_set(['RegexMatchSetId'])",
            "method_name": "get_regex_match_set",
            "required_args": [
                "RegexMatchSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RegexMatchSet)>",
        "result_key": "RegexMatchSet"
    },
    "waf_regional_regex_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_regex_match_sets([])",
            "method_name": "list_regex_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RegexMatchSetSummary)>",
        "parametrize_id_source": [
            "RegexMatchSetId"
        ],
        "result_key": "RegexMatchSets"
    },
    "waf_regional_regex_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_regex_match_sets([])",
            "method_name": "list_regex_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(RegexMatchSetSummaries)>",
        "result_key": "RegexMatchSets"
    },
    "waf_regional_regex_pattern_set": {
        "fetch": {
            "all_args": [
                "RegexPatternSetId"
            ],
            "docstring": "waf-regional.get_regex_pattern_set(['RegexPatternSetId'])",
            "method_name": "get_regex_pattern_set",
            "required_args": [
                "RegexPatternSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RegexPatternSet)>",
        "result_key": "RegexPatternSet"
    },
    "waf_regional_regex_pattern_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_regex_pattern_sets([])",
            "method_name": "list_regex_pattern_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RegexPatternSetSummary)>",
        "parametrize_id_source": [
            "RegexPatternSetId"
        ],
        "result_key": "RegexPatternSets"
    },
    "waf_regional_regex_pattern_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_regex_pattern_sets([])",
            "method_name": "list_regex_pattern_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(RegexPatternSetSummaries)>",
        "result_key": "RegexPatternSets"
    },
    "waf_regional_resource_arn": {
        "fetch": {
            "all_args": [
                "WebACLId"
            ],
            "docstring": "waf-regional.list_resources_for_web_acl(['WebACLId'])",
            "method_name": "list_resources_for_web_acl",
            "required_args": [
                "WebACLId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StringShape(ResourceArn)>",
        "parametrize_id_source": [
            "ResourceArn"
        ],
        "result_key": "ResourceArns"
    },
    "waf_regional_resource_arns": {
        "fetch": {
            "all_args": [
                "WebACLId"
            ],
            "docstring": "waf-regional.list_resources_for_web_acl(['WebACLId'])",
            "method_name": "list_resources_for_web_acl",
            "required_args": [
                "WebACLId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(ResourceArns)>",
        "result_key": "ResourceArns"
    },
    "waf_regional_rule_from_get_rate_based_rule": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf-regional.get_rate_based_rule(['RuleId'])",
            "method_name": "get_rate_based_rule",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RateBasedRule)>",
        "result_key": "Rule"
    },
    "waf_regional_rule_from_get_rule": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf-regional.get_rule(['RuleId'])",
            "method_name": "get_rule",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(Rule)>",
        "result_key": "Rule"
    },
    "waf_regional_rule_summary_from_list_rate_based_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_rate_based_rules([])",
            "method_name": "list_rate_based_rules",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RuleSummary)>",
        "parametrize_id_source": [
            "RuleId"
        ],
        "result_key": "Rules"
    },
    "waf_regional_rule_summary_from_list_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(RuleSummary)>",
        "parametrize_id_source": [
            "RuleId"
        ],
        "result_key": "Rules"
    },
    "waf_regional_rules_from_list_rate_based_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_rate_based_rules([])",
            "method_name": "list_rate_based_rules",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(RuleSummaries)>",
        "result_key": "Rules"
    },
    "waf_regional_rules_from_list_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(RuleSummaries)>",
        "result_key": "Rules"
    },
    "waf_regional_sampled_http_request": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf-regional.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(SampledHTTPRequest)>",
        "parametrize_id_source": null,
        "result_key": "SampledRequests"
    },
    "waf_regional_sampled_requests": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf-regional.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(SampledHTTPRequests)>",
        "result_key": "SampledRequests"
    },
    "waf_regional_size_constraint_set": {
        "fetch": {
            "all_args": [
                "SizeConstraintSetId"
            ],
            "docstring": "waf-regional.get_size_constraint_set(['SizeConstraintSetId'])",
            "method_name": "get_size_constraint_set",
            "required_args": [
                "SizeConstraintSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(SizeConstraintSet)>",
        "result_key": "SizeConstraintSet"
    },
    "waf_regional_size_constraint_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_size_constraint_sets([])",
            "method_name": "list_size_constraint_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(SizeConstraintSetSummary)>",
        "parametrize_id_source": [
            "SizeConstraintSetId"
        ],
        "result_key": "SizeConstraintSets"
    },
    "waf_regional_size_constraint_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_size_constraint_sets([])",
            "method_name": "list_size_constraint_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(SizeConstraintSetSummaries)>",
        "result_key": "SizeConstraintSets"
    },
    "waf_regional_sql_injection_match_set": {
        "fetch": {
            "all_args": [
                "SqlInjectionMatchSetId"
            ],
            "docstring": "waf-regional.get_sql_injection_match_set(['SqlInjectionMatchSetId'])",
            "method_name": "get_sql_injection_match_set",
            "required_args": [
                "SqlInjectionMatchSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(SqlInjectionMatchSet)>",
        "result_key": "SqlInjectionMatchSet"
    },
    "waf_regional_sql_injection_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_sql_injection_match_sets([])",
            "method_name": "list_sql_injection_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(SqlInjectionMatchSetSummary)>",
        "parametrize_id_source": [
            "SqlInjectionMatchSetId"
        ],
        "result_key": "SqlInjectionMatchSets"
    },
    "waf_regional_sql_injection_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_sql_injection_match_sets([])",
            "method_name": "list_sql_injection_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(SqlInjectionMatchSetSummaries)>",
        "result_key": "SqlInjectionMatchSets"
    },
    "waf_regional_time_window": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf-regional.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(TimeWindow)>",
        "result_key": "TimeWindow"
    },
    "waf_regional_web_acl": {
        "fetch": {
            "all_args": [
                "WebACLId"
            ],
            "docstring": "waf-regional.get_web_acl(['WebACLId'])",
            "method_name": "get_web_acl",
            "required_args": [
                "WebACLId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(WebACL)>",
        "result_key": "WebACL"
    },
    "waf_regional_web_acl_summary_from_get_web_acl_for_resource": {
        "fetch": {
            "all_args": [
                "ResourceArn"
            ],
            "docstring": "waf-regional.get_web_acl_for_resource(['ResourceArn'])",
            "method_name": "get_web_acl_for_resource",
            "required_args": [
                "ResourceArn"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(WebACLSummary)>",
        "result_key": "WebACLSummary"
    },
    "waf_regional_web_acl_summary_from_list_web_acls": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_web_acls([])",
            "method_name": "list_web_acls",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(WebACLSummary)>",
        "parametrize_id_source": [
            "WebACLId"
        ],
        "result_key": "WebACLs"
    },
    "waf_regional_web_acls": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_web_acls([])",
            "method_name": "list_web_acls",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(WebACLSummaries)>",
        "result_key": "WebACLs"
    },
    "waf_regional_xss_match_set": {
        "fetch": {
            "all_args": [
                "XssMatchSetId"
            ],
            "docstring": "waf-regional.get_xss_match_set(['XssMatchSetId'])",
            "method_name": "get_xss_match_set",
            "required_args": [
                "XssMatchSetId"
            ],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(XssMatchSet)>",
        "result_key": "XssMatchSet"
    },
    "waf_regional_xss_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_xss_match_sets([])",
            "method_name": "list_xss_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<StructureShape(XssMatchSetSummary)>",
        "parametrize_id_source": [
            "XssMatchSetId"
        ],
        "result_key": "XssMatchSets"
    },
    "waf_regional_xss_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf-regional.list_xss_match_sets([])",
            "method_name": "list_xss_match_sets",
            "required_args": [],
            "service_name": "waf-regional"
        },
        "output_shape": "<ListShape(XssMatchSetSummaries)>",
        "result_key": "XssMatchSets"
    },
    "waf_rule_from_get_rate_based_rule": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf.get_rate_based_rule(['RuleId'])",
            "method_name": "get_rate_based_rule",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RateBasedRule)>",
        "result_key": "Rule"
    },
    "waf_rule_from_get_rule": {
        "fetch": {
            "all_args": [
                "RuleId"
            ],
            "docstring": "waf.get_rule(['RuleId'])",
            "method_name": "get_rule",
            "required_args": [
                "RuleId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(Rule)>",
        "result_key": "Rule"
    },
    "waf_rule_summary_from_list_rate_based_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_rate_based_rules([])",
            "method_name": "list_rate_based_rules",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RuleSummary)>",
        "parametrize_id_source": [
            "RuleId"
        ],
        "result_key": "Rules"
    },
    "waf_rule_summary_from_list_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(RuleSummary)>",
        "parametrize_id_source": [
            "RuleId"
        ],
        "result_key": "Rules"
    },
    "waf_rules_from_list_rate_based_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_rate_based_rules([])",
            "method_name": "list_rate_based_rules",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(RuleSummaries)>",
        "result_key": "Rules"
    },
    "waf_rules_from_list_rules": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_rules([])",
            "method_name": "list_rules",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(RuleSummaries)>",
        "result_key": "Rules"
    },
    "waf_sampled_http_request": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(SampledHTTPRequest)>",
        "parametrize_id_source": null,
        "result_key": "SampledRequests"
    },
    "waf_sampled_requests": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(SampledHTTPRequests)>",
        "result_key": "SampledRequests"
    },
    "waf_size_constraint_set": {
        "fetch": {
            "all_args": [
                "SizeConstraintSetId"
            ],
            "docstring": "waf.get_size_constraint_set(['SizeConstraintSetId'])",
            "method_name": "get_size_constraint_set",
            "required_args": [
                "SizeConstraintSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(SizeConstraintSet)>",
        "result_key": "SizeConstraintSet"
    },
    "waf_size_constraint_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_size_constraint_sets([])",
            "method_name": "list_size_constraint_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(SizeConstraintSetSummary)>",
        "parametrize_id_source": [
            "SizeConstraintSetId"
        ],
        "result_key": "SizeConstraintSets"
    },
    "waf_size_constraint_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_size_constraint_sets([])",
            "method_name": "list_size_constraint_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(SizeConstraintSetSummaries)>",
        "result_key": "SizeConstraintSets"
    },
    "waf_sql_injection_match_set": {
        "fetch": {
            "all_args": [
                "SqlInjectionMatchSetId"
            ],
            "docstring": "waf.get_sql_injection_match_set(['SqlInjectionMatchSetId'])",
            "method_name": "get_sql_injection_match_set",
            "required_args": [
                "SqlInjectionMatchSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(SqlInjectionMatchSet)>",
        "result_key": "SqlInjectionMatchSet"
    },
    "waf_sql_injection_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_sql_injection_match_sets([])",
            "method_name": "list_sql_injection_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(SqlInjectionMatchSetSummary)>",
        "parametrize_id_source": [
            "SqlInjectionMatchSetId"
        ],
        "result_key": "SqlInjectionMatchSets"
    },
    "waf_sql_injection_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_sql_injection_match_sets([])",
            "method_name": "list_sql_injection_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(SqlInjectionMatchSetSummaries)>",
        "result_key": "SqlInjectionMatchSets"
    },
    "waf_time_window": {
        "fetch": {
            "all_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow"
            ],
            "docstring": "waf.get_sampled_requests(['WebAclId', 'RuleId', 'TimeWindow', 'MaxItems'])",
            "method_name": "get_sampled_requests",
            "required_args": [
                "WebAclId",
                "RuleId",
                "TimeWindow",
                "MaxItems"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(TimeWindow)>",
        "result_key": "TimeWindow"
    },
    "waf_web_acl": {
        "fetch": {
            "all_args": [
                "WebACLId"
            ],
            "docstring": "waf.get_web_acl(['WebACLId'])",
            "method_name": "get_web_acl",
            "required_args": [
                "WebACLId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(WebACL)>",
        "result_key": "WebACL"
    },
    "waf_web_acl_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_web_acls([])",
            "method_name": "list_web_acls",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(WebACLSummary)>",
        "parametrize_id_source": [
            "WebACLId"
        ],
        "result_key": "WebACLs"
    },
    "waf_web_acls": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_web_acls([])",
            "method_name": "list_web_acls",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(WebACLSummaries)>",
        "result_key": "WebACLs"
    },
    "waf_xss_match_set": {
        "fetch": {
            "all_args": [
                "XssMatchSetId"
            ],
            "docstring": "waf.get_xss_match_set(['XssMatchSetId'])",
            "method_name": "get_xss_match_set",
            "required_args": [
                "XssMatchSetId"
            ],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(XssMatchSet)>",
        "result_key": "XssMatchSet"
    },
    "waf_xss_match_set_summary": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_xss_match_sets([])",
            "method_name": "list_xss_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<StructureShape(XssMatchSetSummary)>",
        "parametrize_id_source": [
            "XssMatchSetId"
        ],
        "result_key": "XssMatchSets"
    },
    "waf_xss_match_sets": {
        "fetch": {
            "all_args": [
                "Limit"
            ],
            "docstring": "waf.list_xss_match_sets([])",
            "method_name": "list_xss_match_sets",
            "required_args": [],
            "service_name": "waf"
        },
        "output_shape": "<ListShape(XssMatchSetSummaries)>",
        "result_key": "XssMatchSets"
    },
    "workdocs_activity": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "StartTime",
                "EndTime",
                "OrganizationId",
                "UserId",
                "Limit"
            ],
            "docstring": "workdocs.describe_activities([])",
            "method_name": "describe_activities",
            "required_args": [],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(Activity)>",
        "parametrize_id_source": [
            "OrganizationId"
        ],
        "result_key": "UserActivities"
    },
    "workdocs_comment": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "VersionId",
                "Limit"
            ],
            "docstring": "workdocs.describe_comments(['DocumentId', 'VersionId'])",
            "method_name": "describe_comments",
            "required_args": [
                "DocumentId",
                "VersionId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(Comment)>",
        "parametrize_id_source": [
            "CommentId"
        ],
        "result_key": "Comments"
    },
    "workdocs_comments": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "VersionId",
                "Limit"
            ],
            "docstring": "workdocs.describe_comments(['DocumentId', 'VersionId'])",
            "method_name": "describe_comments",
            "required_args": [
                "DocumentId",
                "VersionId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(CommentList)>",
        "result_key": "Comments"
    },
    "workdocs_custom_metadata_from_get_document": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_document(['DocumentId'])",
            "method_name": "get_document",
            "required_args": [
                "DocumentId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<MapShape(CustomMetadataMap)>",
        "result_key": "CustomMetadata"
    },
    "workdocs_custom_metadata_from_get_document_version": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "VersionId",
                "Fields",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_document_version(['DocumentId', 'VersionId'])",
            "method_name": "get_document_version",
            "required_args": [
                "DocumentId",
                "VersionId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<MapShape(CustomMetadataMap)>",
        "result_key": "CustomMetadata"
    },
    "workdocs_custom_metadata_from_get_folder": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_folder(['FolderId'])",
            "method_name": "get_folder",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<MapShape(CustomMetadataMap)>",
        "result_key": "CustomMetadata"
    },
    "workdocs_document_metadata": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "Sort",
                "Order",
                "Limit",
                "Type",
                "Include"
            ],
            "docstring": "workdocs.describe_folder_contents(['FolderId'])",
            "method_name": "describe_folder_contents",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(DocumentMetadata)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Documents"
    },
    "workdocs_document_version_metadata": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "Limit",
                "Include",
                "Fields"
            ],
            "docstring": "workdocs.describe_document_versions(['DocumentId'])",
            "method_name": "describe_document_versions",
            "required_args": [
                "DocumentId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(DocumentVersionMetadata)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "DocumentVersions"
    },
    "workdocs_document_versions": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "Limit",
                "Include",
                "Fields"
            ],
            "docstring": "workdocs.describe_document_versions(['DocumentId'])",
            "method_name": "describe_document_versions",
            "required_args": [
                "DocumentId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(DocumentVersionMetadataList)>",
        "result_key": "DocumentVersions"
    },
    "workdocs_documents": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "Sort",
                "Order",
                "Limit",
                "Type",
                "Include"
            ],
            "docstring": "workdocs.describe_folder_contents(['FolderId'])",
            "method_name": "describe_folder_contents",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(DocumentMetadataList)>",
        "result_key": "Documents"
    },
    "workdocs_folder_metadata_from_describe_folder_contents": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "Sort",
                "Order",
                "Limit",
                "Type",
                "Include"
            ],
            "docstring": "workdocs.describe_folder_contents(['FolderId'])",
            "method_name": "describe_folder_contents",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(FolderMetadata)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Folders"
    },
    "workdocs_folder_metadata_from_describe_root_folders": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "Limit"
            ],
            "docstring": "workdocs.describe_root_folders(['AuthenticationToken'])",
            "method_name": "describe_root_folders",
            "required_args": [
                "AuthenticationToken"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(FolderMetadata)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Folders"
    },
    "workdocs_folders_from_describe_folder_contents": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "Sort",
                "Order",
                "Limit",
                "Type",
                "Include"
            ],
            "docstring": "workdocs.describe_folder_contents(['FolderId'])",
            "method_name": "describe_folder_contents",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(FolderMetadataList)>",
        "result_key": "Folders"
    },
    "workdocs_folders_from_describe_root_folders": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "Limit"
            ],
            "docstring": "workdocs.describe_root_folders(['AuthenticationToken'])",
            "method_name": "describe_root_folders",
            "required_args": [
                "AuthenticationToken"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(FolderMetadataList)>",
        "result_key": "Folders"
    },
    "workdocs_metadata_from_get_document": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_document(['DocumentId'])",
            "method_name": "get_document",
            "required_args": [
                "DocumentId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(DocumentMetadata)>",
        "result_key": "Metadata"
    },
    "workdocs_metadata_from_get_document_version": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "VersionId",
                "Fields",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_document_version(['DocumentId', 'VersionId'])",
            "method_name": "get_document_version",
            "required_args": [
                "DocumentId",
                "VersionId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(DocumentVersionMetadata)>",
        "result_key": "Metadata"
    },
    "workdocs_metadata_from_get_folder": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "IncludeCustomMetadata"
            ],
            "docstring": "workdocs.get_folder(['FolderId'])",
            "method_name": "get_folder",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(FolderMetadata)>",
        "result_key": "Metadata"
    },
    "workdocs_path_from_get_document_path": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "DocumentId",
                "Limit",
                "Fields"
            ],
            "docstring": "workdocs.get_document_path(['DocumentId'])",
            "method_name": "get_document_path",
            "required_args": [
                "DocumentId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(ResourcePath)>",
        "result_key": "Path"
    },
    "workdocs_path_from_get_folder_path": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "FolderId",
                "Limit",
                "Fields"
            ],
            "docstring": "workdocs.get_folder_path(['FolderId'])",
            "method_name": "get_folder_path",
            "required_args": [
                "FolderId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(ResourcePath)>",
        "result_key": "Path"
    },
    "workdocs_principal": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "ResourceId",
                "Limit"
            ],
            "docstring": "workdocs.describe_resource_permissions(['ResourceId'])",
            "method_name": "describe_resource_permissions",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(Principal)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Principals"
    },
    "workdocs_principals": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "ResourceId",
                "Limit"
            ],
            "docstring": "workdocs.describe_resource_permissions(['ResourceId'])",
            "method_name": "describe_resource_permissions",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(PrincipalList)>",
        "result_key": "Principals"
    },
    "workdocs_subscription": {
        "fetch": {
            "all_args": [
                "OrganizationId",
                "Limit"
            ],
            "docstring": "workdocs.describe_notification_subscriptions(['OrganizationId'])",
            "method_name": "describe_notification_subscriptions",
            "required_args": [
                "OrganizationId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(Subscription)>",
        "parametrize_id_source": [
            "SubscriptionId"
        ],
        "result_key": "Subscriptions"
    },
    "workdocs_subscriptions": {
        "fetch": {
            "all_args": [
                "OrganizationId",
                "Limit"
            ],
            "docstring": "workdocs.describe_notification_subscriptions(['OrganizationId'])",
            "method_name": "describe_notification_subscriptions",
            "required_args": [
                "OrganizationId"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(SubscriptionList)>",
        "result_key": "Subscriptions"
    },
    "workdocs_total_number_of_users": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "OrganizationId",
                "UserIds",
                "Query",
                "Include",
                "Order",
                "Sort",
                "Limit",
                "Fields"
            ],
            "docstring": "workdocs.describe_users([])",
            "method_name": "describe_users",
            "required_args": [],
            "service_name": "workdocs"
        },
        "output_shape": "<Shape(SizeType)>",
        "result_key": "TotalNumberOfUsers"
    },
    "workdocs_user_activities": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "StartTime",
                "EndTime",
                "OrganizationId",
                "UserId",
                "Limit"
            ],
            "docstring": "workdocs.describe_activities([])",
            "method_name": "describe_activities",
            "required_args": [],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(UserActivities)>",
        "result_key": "UserActivities"
    },
    "workdocs_user_from_describe_users": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "OrganizationId",
                "UserIds",
                "Query",
                "Include",
                "Order",
                "Sort",
                "Limit",
                "Fields"
            ],
            "docstring": "workdocs.describe_users([])",
            "method_name": "describe_users",
            "required_args": [],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(User)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "Users"
    },
    "workdocs_user_from_get_current_user": {
        "fetch": {
            "all_args": [
                "AuthenticationToken"
            ],
            "docstring": "workdocs.get_current_user(['AuthenticationToken'])",
            "method_name": "get_current_user",
            "required_args": [
                "AuthenticationToken"
            ],
            "service_name": "workdocs"
        },
        "output_shape": "<StructureShape(User)>",
        "result_key": "User"
    },
    "workdocs_users": {
        "fetch": {
            "all_args": [
                "AuthenticationToken",
                "OrganizationId",
                "UserIds",
                "Query",
                "Include",
                "Order",
                "Sort",
                "Limit",
                "Fields"
            ],
            "docstring": "workdocs.describe_users([])",
            "method_name": "describe_users",
            "required_args": [],
            "service_name": "workdocs"
        },
        "output_shape": "<ListShape(OrganizationUserList)>",
        "result_key": "Users"
    },
    "workspaces_bundles": {
        "fetch": {
            "all_args": [
                "BundleIds",
                "Owner"
            ],
            "docstring": "workspaces.describe_workspace_bundles([])",
            "method_name": "describe_workspace_bundles",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<ListShape(BundleList)>",
        "result_key": "Bundles"
    },
    "workspaces_directories": {
        "fetch": {
            "all_args": [
                "DirectoryIds"
            ],
            "docstring": "workspaces.describe_workspace_directories([])",
            "method_name": "describe_workspace_directories",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<ListShape(DirectoryList)>",
        "result_key": "Directories"
    },
    "workspaces_tag": {
        "fetch": {
            "all_args": [
                "ResourceId"
            ],
            "docstring": "workspaces.describe_tags(['ResourceId'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "workspaces"
        },
        "output_shape": "<StructureShape(Tag)>",
        "parametrize_id_source": null,
        "result_key": "TagList"
    },
    "workspaces_tag_list": {
        "fetch": {
            "all_args": [
                "ResourceId"
            ],
            "docstring": "workspaces.describe_tags(['ResourceId'])",
            "method_name": "describe_tags",
            "required_args": [
                "ResourceId"
            ],
            "service_name": "workspaces"
        },
        "output_shape": "<ListShape(TagList)>",
        "result_key": "TagList"
    },
    "workspaces_workspace": {
        "fetch": {
            "all_args": [
                "WorkspaceIds",
                "DirectoryId",
                "UserName",
                "BundleId",
                "Limit"
            ],
            "docstring": "workspaces.describe_workspaces([])",
            "method_name": "describe_workspaces",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<StructureShape(Workspace)>",
        "parametrize_id_source": [
            "WorkspaceId"
        ],
        "result_key": "Workspaces"
    },
    "workspaces_workspace_bundle": {
        "fetch": {
            "all_args": [
                "BundleIds",
                "Owner"
            ],
            "docstring": "workspaces.describe_workspace_bundles([])",
            "method_name": "describe_workspace_bundles",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<StructureShape(WorkspaceBundle)>",
        "parametrize_id_source": [
            "BundleId"
        ],
        "result_key": "Bundles"
    },
    "workspaces_workspace_connection_status": {
        "fetch": {
            "all_args": [
                "WorkspaceIds"
            ],
            "docstring": "workspaces.describe_workspaces_connection_status([])",
            "method_name": "describe_workspaces_connection_status",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<StructureShape(WorkspaceConnectionStatus)>",
        "parametrize_id_source": [
            "WorkspaceId"
        ],
        "result_key": "WorkspacesConnectionStatus"
    },
    "workspaces_workspace_directory": {
        "fetch": {
            "all_args": [
                "DirectoryIds"
            ],
            "docstring": "workspaces.describe_workspace_directories([])",
            "method_name": "describe_workspace_directories",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<StructureShape(WorkspaceDirectory)>",
        "parametrize_id_source": [
            "DirectoryId"
        ],
        "result_key": "Directories"
    },
    "workspaces_workspaces": {
        "fetch": {
            "all_args": [
                "WorkspaceIds",
                "DirectoryId",
                "UserName",
                "BundleId",
                "Limit"
            ],
            "docstring": "workspaces.describe_workspaces([])",
            "method_name": "describe_workspaces",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<ListShape(WorkspaceList)>",
        "result_key": "Workspaces"
    },
    "workspaces_workspaces_connection_status": {
        "fetch": {
            "all_args": [
                "WorkspaceIds"
            ],
            "docstring": "workspaces.describe_workspaces_connection_status([])",
            "method_name": "describe_workspaces_connection_status",
            "required_args": [],
            "service_name": "workspaces"
        },
        "output_shape": "<ListShape(WorkspaceConnectionStatusList)>",
        "result_key": "WorkspacesConnectionStatus"
    },
    "xray_approximate_time": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime",
                "Sampling",
                "FilterExpression"
            ],
            "docstring": "xray.get_trace_summaries(['StartTime', 'EndTime'])",
            "method_name": "get_trace_summaries",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "ApproximateTime"
    },
    "xray_end_time": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "xray.get_service_graph(['StartTime', 'EndTime'])",
            "method_name": "get_service_graph",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "EndTime"
    },
    "xray_service_from_get_service_graph": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "xray.get_service_graph(['StartTime', 'EndTime'])",
            "method_name": "get_service_graph",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<StructureShape(Service)>",
        "parametrize_id_source": [
            "StartTime"
        ],
        "result_key": "Services"
    },
    "xray_service_from_get_trace_graph": {
        "fetch": {
            "all_args": [
                "TraceIds"
            ],
            "docstring": "xray.get_trace_graph(['TraceIds'])",
            "method_name": "get_trace_graph",
            "required_args": [
                "TraceIds"
            ],
            "service_name": "xray"
        },
        "output_shape": "<StructureShape(Service)>",
        "parametrize_id_source": [
            "ReferenceId"
        ],
        "result_key": "Services"
    },
    "xray_services_from_get_service_graph": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "xray.get_service_graph(['StartTime', 'EndTime'])",
            "method_name": "get_service_graph",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<ListShape(ServiceList)>",
        "result_key": "Services"
    },
    "xray_services_from_get_trace_graph": {
        "fetch": {
            "all_args": [
                "TraceIds"
            ],
            "docstring": "xray.get_trace_graph(['TraceIds'])",
            "method_name": "get_trace_graph",
            "required_args": [
                "TraceIds"
            ],
            "service_name": "xray"
        },
        "output_shape": "<ListShape(ServiceList)>",
        "result_key": "Services"
    },
    "xray_start_time": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime"
            ],
            "docstring": "xray.get_service_graph(['StartTime', 'EndTime'])",
            "method_name": "get_service_graph",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<Shape(Timestamp)>",
        "result_key": "StartTime"
    },
    "xray_trace_summaries": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime",
                "Sampling",
                "FilterExpression"
            ],
            "docstring": "xray.get_trace_summaries(['StartTime', 'EndTime'])",
            "method_name": "get_trace_summaries",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<ListShape(TraceSummaryList)>",
        "result_key": "TraceSummaries"
    },
    "xray_trace_summary": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime",
                "Sampling",
                "FilterExpression"
            ],
            "docstring": "xray.get_trace_summaries(['StartTime', 'EndTime'])",
            "method_name": "get_trace_summaries",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<StructureShape(TraceSummary)>",
        "parametrize_id_source": [
            "Id"
        ],
        "result_key": "TraceSummaries"
    },
    "xray_traces_processed_count": {
        "fetch": {
            "all_args": [
                "StartTime",
                "EndTime",
                "Sampling",
                "FilterExpression"
            ],
            "docstring": "xray.get_trace_summaries(['StartTime', 'EndTime'])",
            "method_name": "get_trace_summaries",
            "required_args": [
                "StartTime",
                "EndTime"
            ],
            "service_name": "xray"
        },
        "output_shape": "<Shape(NullableLong)>",
        "result_key": "TracesProcessedCount"
    }
}